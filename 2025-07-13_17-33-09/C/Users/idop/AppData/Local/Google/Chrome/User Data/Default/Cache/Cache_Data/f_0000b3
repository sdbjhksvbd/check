!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("SplunkAnalytics",[],t):"object"==typeof exports?exports.SplunkAnalytics=t():e.SplunkAnalytics=t()}("undefined"!=typeof self?self:this,(function(){return function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),n.d(t,"logger",(function(){return u})),n.d(t,"service",(function(){return y}));var r={error:[],info:[],debug:[]},o="error",i="info",a=function(e,t){window.sp&&window.sp.log?sp.log[e](t):r[e].push(t)},u={info:function(e){a(i,e)},error:function(e){a(o,e)},debug:function(e){a(i,e)},flush:function(){window.sp&&window.sp.log?(r.error.length>0&&(sp.log.error(r.error),r.error=[]),r.info.length>0&&(sp.log.info(r.info),r.info=[]),r.debug.length>0&&(sp.log.debug(r.debug),r.debug=[])):console.log("sp.js not loaded yet")}},c={tag_url:"/api/v2/analytics/tag",apix_tag_url:"/v2/tag",app_name_msg:"Invalid application name. Accepts only alphabets, numbers, underscore and hyphen characters. First character must an alphabet. Length must be between 3 to 50 characters."},l={setWithExpiry:function(e,t,n,r){var o={value:t,expiry:(new Date).getTime()+n,version:r};return localStorage.setItem(e,JSON.stringify(o)),Promise.resolve(t)},getWithExpiry:function(e,t){var n=localStorage.getItem(e);return new Promise((function(r){if(!n)return r(null);var o=JSON.parse(n);return o.version&&o.version!==t?r(null):(new Date).getTime()>o.expiry?(localStorage.removeItem(e),r(null)):r(o.value)}))}};function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function p(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function f(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(Object(n),!0).forEach((function(t){d(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t,n){return(t=function(e){var t=function(e,t){if("object"!=s(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,t||"default");if("object"!=s(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==s(t)?t:t+""}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var g="is_logging_enabled",y={isValidAppName:function(e){return/^[a-z][a-z0-9\-_]{2,49}$/.test(e.trim().toLowerCase())},getAppDetails:function(e,t){if(!this.isValidAppName(t))return Promise.reject(new Error(c.app_name_msg));var n=c.tag_url;return-1!==e.indexOf("apps-api.splunk.com")&&(n=c.apix_tag_url),l.getWithExpiry(t,2).then((function(r){return null===r?fetch(e+n,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:t}),credentials:"include"}).then((function(e){if(e.ok)return e.json();throw new Error("Failed to retrieve application details")})):f(f({},r),{},{cached:!0})})).then((function(e){return e.cached?e:l.setWithExpiry(t,e,2592e6,2)})).then((function(e){var t=!(!e||!e.data)&&e.data;return t&&t.isLoggingEnabled?localStorage.setItem(g,t.isLoggingEnabled):localStorage.removeItem(g),t}))},addScript:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"head",n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;return new Promise((function(o){var i=document.querySelector(t);window.scriptLoaded=function(){console.log("Script loaded!"),u.flush(),o()};var a=document.createElement("script");a.setAttribute("type","text/javascript"),e+="loadScript = scriptLoaded",a.text=e,a.async=void 0===n||n,a.defer=void 0===r||r,i.appendChild(a)}))},track:function(e,t){var n={svp:e.svp,elinkid:e.elinkid,el:e.el,ec:e.ec,eht:e.eht,ea:e.ea,e0:e.e0,e1:e.e1,e2:e.e2,e3:e.e3,e4:e.e4,e5:e.e5,e6:e.e6,e7:e.e7,e8:e.e8,e9:e.e9,a0:e.a0,a1:e.a1,a2:e.a2,a3:e.a3,a4:e.a4,a5:e.a5,a6:e.a6,a7:e.a7,a8:e.a8,a9:e.a9,u0:e.u0,u1:e.u1,u2:e.u2,u3:e.u3,u4:e.u4,u5:e.u5,u6:e.u6,u7:e.u7,u8:e.u8,u9:e.u9},r=e.user;if(t&&r){var o={uid:r.uid,uname:r.uname};n=f(f({},n),o)}window.sp?window.sp.track("track",n):console.log("SplunkAnalytics::ERROR: sp object not found. Unable to track events.")},pageview:function(e){window.sp?window.sp.pageview(e):console.log("SplunkAnalytics::ERROR: sp object not found. Unable to track events.")}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,