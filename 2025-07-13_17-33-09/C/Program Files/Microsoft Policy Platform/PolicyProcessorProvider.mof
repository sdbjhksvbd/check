/******************************************************************************
Copyright Â© Microsoft Corporation.  All rights reserved.

Synopsis:
    mof source for Policy Processor Provider.

    This file will be processed by MOFCOMP utility to
    register the provider with the WMI repository

******************************************************************************/

#pragma autorecover
#pragma classflags("forceupdate")

#pragma namespace("\\\\.\\Root\\Microsoft\\PolicyPlatform\\Processor")

// Remove old provider registration
#pragma deleteclass("Win32_ProviderEx", nofail)
#pragma deleteinstance("__MethodProviderRegistration.provider='\\\\.\\root\\Microsoft\\PolicyPlatform\\Processor:Win32_ProviderEx.Name=\"PolicyPlatform_PolicyProcessorProvider\"'", nofail)

// Create new provider registration
instance of __Win32Provider as $PolicyProcessorProvider
{
    Name    = "PolicyPlatform_PolicyProcessorProvider";     //Name is the key property for __Provider objects.
                                            //vendor|provider|version is the suggested format
                                            //to prevent name collisions.

    HostingModel = "SelfHost"; // Hosting model

    ClsId   = "{3AFEA1D5-6518-4BE3-B12D-ED3325DF0515}";	 //provider GUID

    DefaultMachineName = NULL;		//NULL for local machine

    ClientLoadableCLSID = NULL;		//reserved

    ImpersonationLevel = 0;		//reserved

    InitializationReentrancy = 0;	//Set of flags that provide information about serialization:
                                        //0 = all initialization of this provider must be serialized
                                        //1 = all initializations of this provider in the same namespace must be serialized
                                        //2 = no initialization serialization is necessary

    InitializeAsAdminFirst = FALSE;	//Request to be fully initialized as "Admin" before
                                        //initializations begin for users

    PerLocaleInitialization = FALSE;	//Indicates whether the provider is initialized for each
                                        //locale if a user connects to the same namespace more
                                        //than once using different locales.

    PerUserInitialization = FALSE;	//Indicates whether the provider is initialized once for each actual
                                        //Windows NT/Windows 2000 NTLM user making requests of the provider.
                                        //If set to FALSE, the provider is initialized once for all users

    Pure = TRUE;			//A pure provider exists only to service requests from
                                        //applications and WMI. Most providers are pure providers.
                                        //Non-pure providers transition to the role of client after they have
                                        //finished servicing requests.
                                        
    Version = 1;            // Version of the provider.

    UnloadTimeout = NULL;		//Currently ignored
                                        //Use __CacheControl class in the root namespace to control provider unloading.
                                        //A string in the DMTF date/time format that specifies how long WMI
                                        //allows the provider to remain idle before it is unloaded.
};

instance of __MethodProviderRegistration
{
    Provider = $PolicyProcessorProvider;
};

