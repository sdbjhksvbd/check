{"version":3,"file":"617.617.4a78dff269435c2f78fd.js","mappings":"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","sources":["webpack://remote-manage-config-page/./src/config-page/win-event-log-collections/WinELC.errors.ts","webpack://remote-manage-config-page/./src/config-page/win-event-log-collections/WinELC.messages.ts","webpack://remote-manage-config-page/./src/config-page/win-event-log-collections/data/jsonforms/uischema/index.ts","webpack://remote-manage-config-page/./src/config-page/win-event-log-collections/WinELC.testids.ts","webpack://remote-manage-config-page/./src/config-page/win-event-log-collections/WinELC.styles.ts","webpack://remote-manage-config-page/./src/config-page/win-event-log-collections/WinELC.apiservice.ts","webpack://remote-manage-config-page/./src/config-page/win-event-log-collections/WinELC.component.tsx","webpack://remote-manage-config-page/./src/config-page/win-event-log-collections/data/jsonforms/schema/index.ts","webpack://remote-manage-config-page/./src/shared/components/FilterHOCs/filterHOCs.tsx","webpack://remote-manage-config-page/./src/shared/components/LoadingMessage/LoadingMessage.testids.ts","webpack://remote-manage-config-page/./src/shared/components/LoadingMessage/LoadingMessage.styles.ts","webpack://remote-manage-config-page/./src/shared/components/LoadingMessage/LoadingMessage.component.tsx"],"sourcesContent":["const ERROR_CODES = {\n    FETCH_AVAILABLE_LOGS_NOT_FOUND: 'FETCH_AVAILABLE_LOGS_NOT_FOUND',\n};\n\nexport default ERROR_CODES;\n","import { localizeMessages } from '@splunk/sui-forms-shared-utils';\nimport ERROR_CODES from './WinELC.errors';\n\nexport const MESSAGES = {\n    LOOKUP_HOST: {\n        LABEL: 'Choose logs from this host *',\n        DESCRIPTION:\n            \"Enter IP address or host name, for example 10.11.39 or foo.ad.yourdomain.com. To collect logs from your local machine, edit the existing entry called 'localhost'.\",\n        BUTTON_LABEL: 'Find logs...',\n    },\n    ADDITIONAL_HOSTS: {\n        LABEL: 'Collect the same set of logs from additional hosts',\n        DESCRIPTION: 'Enter a comma-separated list of host names or IP addresses.',\n    },\n    TRANSFER_LIST: {\n        LABEL: 'Logs',\n        SOURCE_LABEL: 'Available log(s)',\n        SOURCE_DESCRIPTION: 'Select the Windows Event Logs you want to index from the list.',\n        TARGET_LABEL: 'Selected log(s)',\n    },\n    INDEX: {\n        LABEL: 'Index',\n        SELECT_LABEL: 'Set the destination index for this source',\n    },\n    ERRORS: {\n        [ERROR_CODES.FETCH_AVAILABLE_LOGS_NOT_FOUND]: (lookupHost: string): string =>\n            `Failed to fetch data: Unable to get wmi classes from host '${lookupHost}'. This host may not be reachable or WMI may be misconfigured.`,\n    },\n};\n// Localize messages\nlocalizeMessages(MESSAGES);\n","import { UISchemaElement } from '@jsonforms/core';\nimport {\n    getAlwaysDisableElementRule,\n    getHideElementsRule,\n    getControlGroupLabelWidthProps,\n} from '../../../../../shared/utils/helper';\nimport { MESSAGES } from '../../../WinELC.messages';\nimport { LOCALHOST } from '../../../../../constants';\n\ninterface IGenerateUISchemaFnParam {\n    dataSource: string[];\n    handleFindLogsButtonClick: (lookupHost: string, { refreshDataSources }) => Promise<void>;\n}\n\ninterface IGenerateUISchemaFn {\n    (param: IGenerateUISchemaFnParam): UISchemaElement;\n}\n\nexport const generateUISchema: IGenerateUISchemaFn = ({ dataSource, handleFindLogsButtonClick }) => {\n    return {\n        type: 'VerticalLayout',\n        elements: [\n            {\n                type: 'Control',\n                scope: '#/properties/name',\n                label: 'Name',\n                rule: { ...getAlwaysDisableElementRule() },\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                },\n            },\n            {\n                type: 'InputButtonGroup',\n                scope: '#/properties/lookupHost',\n                label: MESSAGES.LOOKUP_HOST.LABEL,\n                rule: { ...getHideElementsRule({ propertyName: 'name', propertyValue: LOCALHOST }) },\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                    customComponentProps: {\n                        inputProps: {},\n                        buttonProps: {\n                            label: MESSAGES.LOOKUP_HOST.BUTTON_LABEL,\n                            onClick: handleFindLogsButtonClick,\n                        },\n                    },\n                },\n            },\n            {\n                type: 'TransferList',\n                scope: '#/properties/logsList',\n                label: MESSAGES.TRANSFER_LIST.LABEL,\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                    customComponentProps: {\n                        source: {\n                            label: MESSAGES.TRANSFER_LIST.SOURCE_LABEL,\n                            description: MESSAGES.TRANSFER_LIST.SOURCE_DESCRIPTION,\n                        },\n                        target: {\n                            label: MESSAGES.TRANSFER_LIST.TARGET_LABEL,\n                        },\n                        dataSource,\n                    },\n                },\n            },\n            {\n                type: 'Control',\n                label: MESSAGES.ADDITIONAL_HOSTS.LABEL,\n                scope: '#/properties/additionalHosts',\n                rule: { ...getHideElementsRule({ propertyName: 'name', propertyValue: LOCALHOST }) },\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                },\n            },\n            {\n                type: 'Label',\n                text: MESSAGES.INDEX.LABEL,\n            },\n            {\n                type: 'Select',\n                scope: '#/properties/index',\n                label: MESSAGES.INDEX.SELECT_LABEL,\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                    suiComponentProps: {\n                        filter: false,\n                    },\n                },\n            },\n        ],\n    };\n};\n","import { normalizeDataTestIds } from '@splunk/sui-forms-shared-utils';\nimport { remoteAppName } from '../../constants';\n\nconst TEST_IDS = {\n    CONTAINER: 'Container',\n    WAITSPINNER: 'WaitSpinner',\n    ERROR_MSG: 'ErrorMessage',\n};\n\nnormalizeDataTestIds({ remoteAppName, compName: 'WinELC', testIds: TEST_IDS });\nexport default TEST_IDS;\n","import styled from 'styled-components';\nimport { pick, variables } from '@splunk/themes';\n\nexport const WrapperDiv = styled.div`\n    max-width: 960px;\n    padding: 30px 20px 20px 20px;\n    background-color: ${pick({\n        enterprise: variables.backgroundColor,\n        prisma: variables.backgroundColorPopup,\n    })};\n    box-shadow: ${variables.overlayShadow};\n    margin: 0 auto 20px;\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const ActionAreaWrapper = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    border-top: 1px solid #ccc;\n    padding: 20px;\n`;\n\nexport const WaitSpinnerWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    margin-top: 40px;\n    margin-bottom: 40px;\n`;\n","import { get } from 'lodash';\nimport { stringify } from 'query-string';\nimport { createRESTURL } from '@splunk/splunk-utils/url';\nimport { defaultFetchInit } from '@splunk/splunk-utils/fetch';\nimport {\n    IAvailableLogsQueryParams,\n    IEntityAcl,\n    IFetchAvailableLogsFn,\n    IFetchDefaultSettingsFn,\n    IFetchIndexesFn,\n    IFetchWinELCSettingsFn,\n    IWinELCFormData,\n} from './WinELC.interfaces';\nimport { fetchIndexesParams, formatSplunkDError } from '../../shared/utils/helper';\nimport { LOCALHOST } from '../../constants';\n\nexport const defaultSettingsUrl = createRESTURL('data/inputs/win-event-log-collections');\nexport const fetchIndexesUrl = createRESTURL('data/indexes');\nexport const fetchEnumAvailableLogsUrl = createRESTURL('admin/win-wmi-enum-eventlogs');\nexport const fetchAllAvailableLogsUrl = createRESTURL('admin/win-alleventlogs');\nexport const updateWinELCSettingsUrl = 'data/inputs/win-event-log-collections';\n\nconst entityAcl: IEntityAcl = {\n    app: '',\n    owner: '',\n};\n\nexport const fetchDefaultSettings: IFetchDefaultSettingsFn = async (lookupHost) => {\n    const response = await fetch(\n        `${defaultSettingsUrl}/${lookupHost}?${stringify({ output_mode: 'json' })}`,\n        { ...defaultFetchInit }\n    );\n    const jsonResponse = await response.json();\n\n    if (response.status === 200) {\n        /* eslint-disable camelcase */\n        const {\n            name = '',\n            lookup_host = '',\n            logs = [],\n            index = 'default',\n            hosts = '',\n        } = get(jsonResponse, 'entry[0].content', {});\n\n        const { app, owner } = get(jsonResponse, 'entry[0].acl', {});\n        entityAcl.app = app;\n        entityAcl.owner = owner;\n        return {\n            name,\n            lookupHost: lookup_host,\n            additionalHosts: hosts,\n            index: { label: index, value: index },\n            logsList: { targetItemsList: logs },\n        };\n    }\n    throw new Error(formatSplunkDError(jsonResponse));\n};\n\nexport const fetchIndexes: IFetchIndexesFn = async () => {\n    const url = `${fetchIndexesUrl}?${stringify(fetchIndexesParams)}`;\n    const response = await fetch(url, { ...defaultFetchInit });\n    const json = await response.json();\n    if (response.status === 200) {\n        return [\n            { label: 'default', value: 'default' },\n            ...(json.entry || []).map((index) => ({ label: index.name, value: index.name })),\n        ];\n    }\n    throw new Error(formatSplunkDError(json));\n};\n\nexport const fetchAvailableLogs: IFetchAvailableLogsFn = async ({ entity, lookupHost }) => {\n    const queryParams: IAvailableLogsQueryParams = {\n        output_mode: 'json',\n    };\n    if (entity === LOCALHOST) {\n        queryParams.sort_key = 'importance';\n        queryParams.sort_dir = 'asc';\n        queryParams.sort_mode = 'num';\n    } else {\n        queryParams.server = lookupHost;\n    }\n    const url = `${\n        entity === LOCALHOST ? fetchAllAvailableLogsUrl : `${fetchEnumAvailableLogsUrl}/${lookupHost}`\n    }?${stringify({\n        ...queryParams,\n    })}`;\n\n    const response = await fetch(url, { ...defaultFetchInit });\n    const jsonResponse = await response.json();\n\n    if (response.status === 200) {\n        if (entity === LOCALHOST) {\n            return (jsonResponse?.entry || []).map((logs) => logs.name);\n        }\n        return get(jsonResponse, 'entry[0].content.logs', []);\n    }\n\n    throw new Error(formatSplunkDError(jsonResponse));\n};\n\nexport const updateWinELCSettings = async (entity: string, formData: IWinELCFormData): Promise<void> => {\n    const { app, owner } = entityAcl;\n    const url = createRESTURL(updateWinELCSettingsUrl, {\n        owner: entity === LOCALHOST ? 'nobody' : owner,\n        app: entity === LOCALHOST ? 'system' : app,\n    });\n\n    const body = {\n        lookup_host: formData.lookupHost,\n        hosts: formData.additionalHosts,\n        index: formData.index?.value || '',\n        logs: formData.logsList.targetItemsList,\n    };\n    const fetchConfig = { ...defaultFetchInit, method: 'POST', body: stringify({ ...body }) };\n    const response = await fetch(`${url}/${entity}?${stringify({ output_mode: 'json' })}`, {\n        ...fetchConfig,\n    });\n    const jsonResponse = await response.json();\n\n    if (response.status !== 200) {\n        throw new Error(formatSplunkDError(jsonResponse));\n    }\n};\n\nexport const fetchWinELCSettings: IFetchWinELCSettingsFn = async (lookupHost) => {\n    return Promise.all([fetchDefaultSettings(lookupHost), fetchIndexes()]);\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport { flowRight as compose, isEmpty } from 'lodash';\nimport { $any, SUIFormRendererCompound, ISubmitHandler, Errors } from '@splunk/sui-form-renderer';\nimport WaitSpinner from '@splunk/react-ui/WaitSpinner';\nimport { UISchemaElement } from '@jsonforms/core';\nimport {\n    withOSFilter,\n    withRBACFilter,\n    withSplunkEnvFilter,\n} from '../../shared/components/FilterHOCs/filterHOCs';\nimport { generateSchema } from './data/jsonforms/schema';\nimport { generateUISchema } from './data/jsonforms/uischema';\nimport TEST_IDS from './WinELC.testids';\nimport LoadingMessage from '../../shared/components/LoadingMessage/LoadingMessage.component';\nimport { WrapperDiv, ActionAreaWrapper, WaitSpinnerWrapper } from './WinELC.styles';\nimport { fetchAvailableLogs, fetchWinELCSettings, updateWinELCSettings } from './WinELC.apiservice';\nimport { IWinELCFormData, WinELCProps } from './WinELC.interfaces';\nimport { LISTING_PAGE_URL } from '../../constants';\nimport { Pages } from '../../app.interfaces';\n\nconst WinELC: FC<WinELCProps> = ({ entity }) => {\n    const [isBootstrapping, setIsBootstrapping] = useState(true);\n    const [isFetchingData, setIsFetchingData] = useState(false);\n    const [formData, setFormData] = useState<IWinELCFormData>(undefined);\n    const [schema, setSchema] = useState({});\n    const [uiSchema, setUISchema] = useState({});\n    const [errorMessages, setErrorMessages] = useState<string[]>([]);\n\n    const handleFindLogsButtonClick = async (lookupHost, { refreshDataSources }): Promise<void> => {\n        setErrorMessages([]);\n        setIsFetchingData(true);\n        let availableLogs = [];\n        try {\n            availableLogs = await fetchAvailableLogs({ entity, lookupHost });\n        } catch (error) {\n            setErrorMessages([error.message]);\n        } finally {\n            setIsFetchingData(false);\n            refreshDataSources([['logsList', availableLogs]]);\n        }\n    };\n\n    useEffect(() => {\n        if (!entity) {\n            window.location.href = LISTING_PAGE_URL[Pages.WinEventLogCollections];\n            return;\n        }\n        (async (): Promise<void> => {\n            let defaultSettings: IWinELCFormData;\n            let indexes = [];\n            let logsList = [];\n            try {\n                [defaultSettings, indexes] = await fetchWinELCSettings(entity);\n                try {\n                    logsList = await fetchAvailableLogs({\n                        entity,\n                        lookupHost: defaultSettings.lookupHost,\n                    });\n                } catch (error) {\n                    // reset `logsList` if fetchAvailableLogs() returns an error\n                    defaultSettings.logsList = { targetItemsList: [] };\n                    throw error;\n                }\n            } catch (error) {\n                setErrorMessages([error.message]);\n            } finally {\n                setFormData({ name: entity, ...defaultSettings });\n                setSchema(generateSchema(indexes));\n                setUISchema(\n                    generateUISchema({\n                        dataSource: logsList,\n                        handleFindLogsButtonClick,\n                    })\n                );\n                setIsBootstrapping(false);\n            }\n        })();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const dismissErrorMessage = (): void => setErrorMessages([]);\n\n    const handleSubmit: ISubmitHandler<$any> = async ({ data, successCb, failureCb }) => {\n        setErrorMessages([]);\n        setIsFetchingData(true);\n        try {\n            await updateWinELCSettings(entity, data);\n            successCb();\n        } catch (error) {\n            failureCb([error.message]);\n        } finally {\n            setIsFetchingData(false);\n        }\n    };\n\n    const renderForm = !isEmpty(schema) && !isEmpty(uiSchema);\n\n    return (\n        <>\n            {!isBootstrapping && (\n                <WrapperDiv data-test-name={TEST_IDS.CONTAINER}>\n                    {errorMessages.length > 0 && (\n                        <Errors errorMessages={errorMessages} onRequestRemove={dismissErrorMessage} />\n                    )}\n                    {renderForm && (\n                        <SUIFormRendererCompound>\n                            <div style={{ width: '100%', position: 'relative' }}>\n                                {isFetchingData && <LoadingMessage />}\n                                <main>\n                                    <SUIFormRendererCompound.ErrorView />\n                                    <SUIFormRendererCompound.Form\n                                        data={formData}\n                                        schema={schema}\n                                        uischema={uiSchema as UISchemaElement}\n                                    />\n                                </main>\n                                <footer>\n                                    <ActionAreaWrapper>\n                                        <SUIFormRendererCompound.ActionButtons onSubmit={handleSubmit} />\n                                    </ActionAreaWrapper>\n                                </footer>\n                            </div>\n                        </SUIFormRendererCompound>\n                    )}\n                </WrapperDiv>\n            )}\n            {isBootstrapping && (\n                <WaitSpinnerWrapper data-test-name={TEST_IDS.WAITSPINNER}>\n                    <WaitSpinner size=\"medium\" />\n                </WaitSpinnerWrapper>\n            )}\n        </>\n    );\n};\n\nconst WinELCPage = compose([\n    withOSFilter(['Windows']),\n    withSplunkEnvFilter(['cmp']),\n    withRBACFilter(['edit_win_eventlogs']),\n])(WinELC);\n\nexport default WinELCPage;\n","import { JsonSchema4 } from '@jsonforms/core';\nimport { MESSAGES } from '../../../WinELC.messages';\n\ninterface IGenerateSchemaFn {\n    (indexes: Array<{ label: string; value: string }>): JsonSchema4;\n}\n\nexport const generateSchema: IGenerateSchemaFn = (indexes = []) => {\n    return {\n        type: 'object',\n        properties: {\n            name: {\n                type: 'string',\n            },\n            lookupHost: {\n                type: 'string',\n                description: MESSAGES.LOOKUP_HOST.DESCRIPTION,\n            },\n            logsList: {\n                type: 'object',\n            },\n            additionalHosts: {\n                type: 'string',\n                description: MESSAGES.ADDITIONAL_HOSTS.DESCRIPTION,\n            },\n            index: indexes.length\n                ? {\n                      type: 'object',\n                      enum: indexes,\n                  }\n                : {},\n        },\n        required: ['lookupHost'],\n    };\n};\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { $any, SplunkInstanceTypes, SplunkExperienceTypes } from '../../../app.interfaces';\nimport { ServerInfoService } from '../../services/ServerInfoService';\nimport { UserContextService } from '../../services/UserContextService';\nimport { ExperienceService } from '../../services/ExperienceService';\nimport { IFilterHOCReturnType, OS, OSList } from './filterHOCs.interfaces';\nimport { MESSAGES } from '../../../messages';\n\nconst ErrorWrapper = styled.div`\n    margin: 25px;\n`;\n\nconst ErrorView: FC<{ msg: string }> = ({ msg = 'Error loading page' }) => {\n    return <h2>{msg}</h2>;\n};\n\nexport const withRBACFilter =\n    (permissionsNeeded = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const hasPermission = UserContextService.canReadPage(permissionsNeeded);\n        const RBACFilterComp: FC<$any> = (props) => {\n            return !hasPermission ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.RBAC_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return RBACFilterComp;\n    };\n\nexport const withSplunkEnvFilter =\n    (supportedEnvs: SplunkInstanceTypes[] = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsEnv = supportedEnvs.includes(ServerInfoService.getSplunkInstanceType());\n        const SplunkEnvFilterComp: FC<$any> = (props) => {\n            return !supportsEnv ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.SPLUNK_ENV_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return SplunkEnvFilterComp;\n    };\n\nexport const withOSFilter =\n    (supportedOS: OSList = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsOS = supportedOS.includes(ServerInfoService.getOS() as OS);\n        const OSFilterComp: FC<$any> = (props) => {\n            return !supportsOS ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.OS_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return OSFilterComp;\n    };\n\nexport const withExperienceFilter =\n    (supportedExperiences: SplunkExperienceTypes[] = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsExperience = supportedExperiences.includes(ExperienceService.getExperienceType());\n        const ExperienceFilterComp: FC<$any> = (props) => {\n            return !supportsExperience ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.SPLUNK_EXPERIENCE_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return ExperienceFilterComp;\n    };\n","import { normalizeDataTestIds } from '@splunk/sui-forms-shared-utils';\nimport { remoteAppName } from '../../../constants';\n\nconst TEST_IDS = {\n    LOADING_MSG: 'LoadingMessage',\n};\n\nnormalizeDataTestIds({ remoteAppName, compName: 'LoadingMessage', testIds: TEST_IDS });\nexport default TEST_IDS;\n","import styled from 'styled-components';\nimport P from '@splunk/react-ui/Paragraph';\n\nexport const LoadingMessageWrapper = styled.div`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    background-color: rgba(255, 255, 255, 0.5);\n    z-index: 500;\n`;\n\nexport const LoadingMessageContainer = styled.div`\n    margin: auto;\n    display: flex;\n`;\n\nexport const Message = styled(P)`\n    margin: auto;\n    font-size: 16px;\n    margin-bottom: 4px;\n    margin-left: 2px;\n`;\n","import React, { FC } from 'react';\nimport WaitSpinner from '@splunk/react-ui/WaitSpinner';\nimport TEST_IDS from './LoadingMessage.testids';\nimport { MESSAGES } from '../../../messages';\nimport { LoadingMessageWrapper, LoadingMessageContainer, Message } from './LoadingMessage.styles';\n\nconst LoadingMessage: FC = () => {\n    return (\n        <LoadingMessageWrapper data-test-name={TEST_IDS.LOADING_MSG}>\n            <LoadingMessageContainer>\n                <WaitSpinner size=\"medium\" />\n                <Message>{MESSAGES.COMMON.LOADING_MSG}</Message>\n            </LoadingMessageContainer>\n        </LoadingMessageWrapper>\n    );\n};\n\nexport default LoadingMessage;\n"],"names":["MESSAGES","LOOKUP_HOST","LABEL","DESCRIPTION","BUTTON_LABEL","ADDITIONAL_HOSTS","TRANSFER_LIST","SOURCE_LABEL","SOURCE_DESCRIPTION","TARGET_LABEL","INDEX","SELECT_LABEL","ERRORS","lookupHost","localizeMessages","TEST_IDS","CONTAINER","WAITSPINNER","ERROR_MSG","normalizeDataTestIds","remoteAppName","compName","testIds","WrapperDiv","styled","pick","enterprise","variables","prisma","ActionAreaWrapper","WaitSpinnerWrapper","defaultSettingsUrl","createRESTURL","fetchIndexesUrl","fetchEnumAvailableLogsUrl","fetchAllAvailableLogsUrl","entityAcl","app","owner","fetchDefaultSettings","async","response","fetch","stringify","output_mode","defaultFetchInit","jsonResponse","json","status","name","lookup_host","logs","index","hosts","get","additionalHosts","label","value","logsList","targetItemsList","Error","formatSplunkDError","fetchIndexes","url","fetchIndexesParams","entry","map","fetchAvailableLogs","entity","queryParams","LOCALHOST","sort_key","sort_dir","sort_mode","server","compose","withOSFilter","withSplunkEnvFilter","withRBACFilter","isBootstrapping","setIsBootstrapping","useState","isFetchingData","setIsFetchingData","formData","setFormData","undefined","schema","setSchema","uiSchema","setUISchema","errorMessages","setErrorMessages","handleFindLogsButtonClick","refreshDataSources","availableLogs","error","message","useEffect","defaultSettings","indexes","Promise","all","fetchWinELCSettings","type","properties","description","length","enum","required","generateSchema","dataSource","elements","scope","rule","getAlwaysDisableElementRule","options","suiControlGroupProps","getControlGroupLabelWidthProps","getHideElementsRule","propertyName","propertyValue","customComponentProps","inputProps","buttonProps","onClick","source","target","text","suiComponentProps","filter","generateUISchema","window","location","href","LISTING_PAGE_URL","Pages","renderForm","isEmpty","Errors","onRequestRemove","SUIFormRendererCompound","style","width","position","data","uischema","onSubmit","successCb","failureCb","body","fetchConfig","method","updateWinELCSettings","size","ErrorWrapper","ErrorView","msg","permissionsNeeded","Comp","hasPermission","UserContextService","props","supportedEnvs","supportsEnv","includes","ServerInfoService","supportedOS","supportsOS","withExperienceFilter","supportedExperiences","supportsExperience","ExperienceService","LOADING_MSG","LoadingMessageWrapper","LoadingMessageContainer","Message","P"],"sourceRoot":""}