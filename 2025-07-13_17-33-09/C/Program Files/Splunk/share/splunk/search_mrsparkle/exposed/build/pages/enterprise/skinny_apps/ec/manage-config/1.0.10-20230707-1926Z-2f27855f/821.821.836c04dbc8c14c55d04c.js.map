{"version":3,"file":"821.821.836c04dbc8c14c55d04c.js","mappings":"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","sources":["webpack://remote-manage-config-page/./src/config-page/win-fwd-perfmon/WinFwdPerfmon.apiservice.ts","webpack://remote-manage-config-page/./src/config-page/win-fwd-perfmon/WinFwdPerfmon.testids.ts","webpack://remote-manage-config-page/./src/config-page/win-fwd-perfmon/WinFwdPerfmon.messages.ts","webpack://remote-manage-config-page/./src/config-page/win-fwd-perfmon/WinFwdPerfmon.styles.ts","webpack://remote-manage-config-page/./src/config-page/win-fwd-perfmon/WinFwdPerfmon.component.tsx","webpack://remote-manage-config-page/./src/config-page/win-fwd-perfmon/data/jsonforms/schema/index.ts","webpack://remote-manage-config-page/./src/config-page/win-fwd-perfmon/data/jsonforms/uischema/index.ts","webpack://remote-manage-config-page/./src/shared/components/FilterHOCs/filterHOCs.tsx","webpack://remote-manage-config-page/./src/shared/components/LoadingMessage/LoadingMessage.testids.ts","webpack://remote-manage-config-page/./src/shared/components/LoadingMessage/LoadingMessage.styles.ts","webpack://remote-manage-config-page/./src/shared/components/LoadingMessage/LoadingMessage.component.tsx"],"sourcesContent":["import { get } from 'lodash';\nimport { stringify } from 'query-string';\nimport { createRESTURL } from '@splunk/splunk-utils/url';\nimport { defaultFetchInit } from '@splunk/splunk-utils/fetch';\nimport { $any } from '@splunk/sui-form-renderer';\nimport {\n    IFetchAvailableObjectsFn,\n    IFetchCountersInstancesFn,\n    IFetchDefaultSettingsFn,\n    IFetchIndexesFn,\n    ISplunkDACL,\n    IWinFwdPerfmonFormData,\n} from './WinFwdPerfmon.interfaces';\nimport { defaultIndex, fetchIndexesParams, formatSplunkDError } from '../../shared/utils/helper';\n\nexport const defaultSettingsUrl = createRESTURL('deployment/server/setup/data/inputs/remote_perfmon');\nexport const fetchWinFwdPerfmonCollectionUrl = createRESTURL('admin/win-perfmon-find-collection');\nexport const fetchIndexesUrl = createRESTURL('data/indexes');\n\nconst entityAcl: ISplunkDACL = {\n    app: '',\n    owner: '',\n};\n\nexport const fetchDefaultSettings: IFetchDefaultSettingsFn = async (entity) => {\n    const url = `${defaultSettingsUrl}/${entity}?${stringify({ output_mode: 'json' })}`;\n    const response = await fetch(url, { ...defaultFetchInit });\n    const json = await response.json();\n\n    if (response.status === 200) {\n        const {\n            object = '',\n            counters = '',\n            index = '',\n            instances = '',\n            interval = null,\n        } = get(json, 'entry[0].content', {});\n\n        const { app = '', owner = '' } = get(json, 'entry[0].acl', {});\n        entityAcl.app = app;\n        entityAcl.owner = owner;\n\n        return {\n            name: get(json, `entry[0].name`, ''),\n            availableObjects: { label: object, value: object },\n            counters: {\n                targetItemsList: counters.split(';').filter((e) => e),\n            },\n            instances: {\n                targetItemsList: instances.split(';').filter((e) => e),\n            },\n            pollingInterval: interval,\n            index: { label: index, value: index },\n        };\n    }\n    throw new Error(formatSplunkDError(json));\n};\n\nexport const fetchAvailableObjects: IFetchAvailableObjectsFn = async () => {\n    const url = `${fetchWinFwdPerfmonCollectionUrl}?${stringify({ output_mode: 'json' })}`;\n    const response = await fetch(url, { ...defaultFetchInit });\n    const json = await response.json();\n\n    if (response.status === 200) {\n        return get(json, 'entry[0].content.objects', []).map((obj) => ({ label: obj, value: obj }));\n    }\n    throw new Error(formatSplunkDError(json));\n};\n\nexport const fetchCountersInstances: IFetchCountersInstancesFn = async (availObj) => {\n    const params = { object: availObj, output_mode: 'json' };\n    const url = `${fetchWinFwdPerfmonCollectionUrl}?${stringify(params)}`;\n    const response = await fetch(url, { ...defaultFetchInit });\n    const json = await response.json();\n\n    if (response.status === 200) {\n        return {\n            counters: get(json, 'entry[0].content.counters', []),\n            instances: get(json, 'entry[0].content.instances', []),\n        };\n    }\n    throw new Error(formatSplunkDError(json));\n};\n\nexport const fetchIndexes: IFetchIndexesFn = async () => {\n    const url = `${fetchIndexesUrl}?${stringify(fetchIndexesParams)}`;\n    const response = await fetch(url, { ...defaultFetchInit });\n    const json = await response.json();\n    if (response.status === 200) {\n        return [\n            defaultIndex,\n            ...(json.entry || []).map((index) => ({ label: index.name, value: index.name })),\n        ];\n    }\n    throw new Error(formatSplunkDError(json));\n};\n\nexport const fetchWinFwdPerfmonSettings = async (entity: string): Promise<$any> => {\n    return Promise.all([fetchDefaultSettings(entity), fetchAvailableObjects(), fetchIndexes()]);\n};\n\nexport const updateWinFwdPerfmonSettings = async (\n    entity: string,\n    formData: IWinFwdPerfmonFormData\n): Promise<void> => {\n    const url = `${defaultSettingsUrl}/${entity}`;\n\n    const body = stringify({\n        app_name: entityAcl.app,\n        counters: formData.counters.targetItemsList.join(';'),\n        index: formData.index?.value || '',\n        instances: formData.instances.targetItemsList.join(';'),\n        object: formData.availableObjects?.value || '',\n        output_mode: 'json',\n        interval: formData.pollingInterval,\n    });\n    const fetchConfig = { ...defaultFetchInit, method: 'POST', body };\n    const response = await fetch(url, { ...fetchConfig });\n    const json = await response.json();\n\n    if (response.status !== 200) {\n        throw new Error(formatSplunkDError(json));\n    }\n};\n","import { normalizeDataTestIds } from '@splunk/sui-forms-shared-utils';\nimport { remoteAppName } from '../../constants';\n\nconst TEST_IDS = {\n    CONTAINER: 'Container',\n    WAITSPINNER: 'WaitSpinner',\n    ERROR_MSG: 'ErrorMessage',\n};\n\nnormalizeDataTestIds({ remoteAppName, compName: 'WinFwdPerfmon', testIds: TEST_IDS });\nexport default TEST_IDS;\n","import { localizeMessages } from '@splunk/sui-forms-shared-utils';\n\nexport const MESSAGES = {\n    AVAILABLE_OBJECTS: {\n        LABEL: 'Available objects',\n        DESCRIPTION: 'Select an object to view and add available counters',\n    },\n    COUNTERS: {\n        LABEL: 'Counters',\n        SOURCE_LABEL: 'Available counters',\n        TARGET_LABEL: 'Selected counters',\n    },\n    INSTANCES: {\n        LABEL: 'Instances',\n        SOURCE_LABEL: 'Available instances',\n        TARGET_LABEL: 'Selected instances',\n    },\n    POLLING_INTERVAL: {\n        LABEL: 'Polling interval *',\n        DESCRIPTION: 'Seconds',\n    },\n    INDEX: {\n        LABEL: 'Index',\n        SELECT_LABEL: 'Set the destination index for this source',\n    },\n};\n\n// Localize messages\nlocalizeMessages(MESSAGES);\n","import styled from 'styled-components';\nimport { pick, variables } from '@splunk/themes';\n\nexport const WrapperDiv = styled.div`\n    max-width: 960px;\n    padding: 30px 20px 20px 20px;\n    background-color: ${pick({\n        enterprise: variables.backgroundColor,\n        prisma: variables.backgroundColorPopup,\n    })};\n    box-shadow: ${variables.overlayShadow};\n    margin: 0 auto 20px;\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const ActionAreaWrapper = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    border-top: 1px solid #ccc;\n    padding: 20px;\n`;\n\nexport const WaitSpinnerWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    margin-top: 40px;\n    margin-bottom: 40px;\n`;\n","import React, { FC, useEffect, useState } from 'react';\nimport { UISchemaElement } from '@jsonforms/core';\nimport { flowRight as compose, isEmpty } from 'lodash';\nimport WaitSpinner from '@splunk/react-ui/WaitSpinner';\nimport { $any, SUIFormRendererCompound, ISubmitHandler, Errors } from '@splunk/sui-form-renderer';\nimport {\n    fetchCountersInstances,\n    fetchWinFwdPerfmonSettings,\n    updateWinFwdPerfmonSettings,\n} from './WinFwdPerfmon.apiservice';\nimport {\n    fetchCountersInstancesFnReponse,\n    WinFwdPerfmonProps,\n    IWinFwdPerfmonFormData,\n} from './WinFwdPerfmon.interfaces';\nimport TEST_IDS from './WinFwdPerfmon.testids';\nimport {\n    withOSFilter,\n    withRBACFilter,\n    withSplunkEnvFilter,\n} from '../../shared/components/FilterHOCs/filterHOCs';\nimport { generateSchema } from './data/jsonforms/schema';\nimport { generateUISchema } from './data/jsonforms/uischema';\nimport { ActionAreaWrapper, WaitSpinnerWrapper, WrapperDiv } from './WinFwdPerfmon.styles';\nimport { LISTING_PAGE_URL } from '../../constants';\nimport { Pages } from '../../app.interfaces';\nimport LoadingMessage from '../../shared/components/LoadingMessage/LoadingMessage.component';\n\nconst WinFwdPerfmon: FC<WinFwdPerfmonProps> = ({ entity }) => {\n    const [isBootstrapping, setIsBootstrapping] = useState(true);\n    const [formData, setFormData] = useState<IWinFwdPerfmonFormData>(undefined);\n    const [schema, setSchema] = useState({});\n    const [uiSchema, setUISchema] = useState({});\n    const [errorMessages, setErrorMessages] = useState<string[]>([]);\n    const [isFetchingData, setIsFetchingData] = useState(false);\n\n    const handleSelectChange = async (availObj, { refreshDataSources }): Promise<void> => {\n        setErrorMessages([]);\n        setIsFetchingData(true);\n        let dataSourcesToBeRefreshed = [\n            ['counters', []],\n            ['instances', []],\n        ];\n        try {\n            const { counters, instances } = await fetchCountersInstances(availObj);\n            dataSourcesToBeRefreshed = [\n                ['counters', counters],\n                ['instances', instances],\n            ];\n        } catch (error) {\n            setErrorMessages([error.message]);\n        } finally {\n            refreshDataSources(dataSourcesToBeRefreshed);\n            setIsFetchingData(false);\n        }\n    };\n\n    useEffect(() => {\n        if (!entity) {\n            window.location.href = LISTING_PAGE_URL[Pages.WinFwdPerfmon];\n            return;\n        }\n\n        (async (): Promise<void> => {\n            let defaultSettings: IWinFwdPerfmonFormData | $any = {};\n            let availableObjects = [];\n            let indexes = [];\n            let countersInstances: fetchCountersInstancesFnReponse;\n            try {\n                [defaultSettings, availableObjects, indexes] = await fetchWinFwdPerfmonSettings(entity);\n                countersInstances = await fetchCountersInstances(defaultSettings.availableObjects?.value);\n            } catch (error) {\n                setErrorMessages([error.message]);\n            } finally {\n                setFormData({ name: entity, ...defaultSettings });\n                setSchema(generateSchema({ availableObjects, indexes }));\n                setUISchema(\n                    generateUISchema({\n                        countersSource: countersInstances?.counters || [],\n                        instancesSource: countersInstances?.instances || [],\n                        handleSelectChange,\n                    })\n                );\n                setIsBootstrapping(false);\n            }\n        })();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const dismissErrorMessage = (): void => setErrorMessages([]);\n\n    const handleSubmit: ISubmitHandler<$any> = async ({ data, successCb, failureCb }) => {\n        setErrorMessages([]);\n        setIsFetchingData(true);\n        try {\n            await updateWinFwdPerfmonSettings(entity, data);\n            successCb();\n        } catch (error) {\n            failureCb([error.message]);\n        } finally {\n            setIsFetchingData(false);\n        }\n    };\n    const renderForm = !isEmpty(schema) && !isEmpty(uiSchema);\n\n    return (\n        <>\n            {!isBootstrapping && (\n                <WrapperDiv data-test-name={TEST_IDS.CONTAINER}>\n                    {errorMessages.length > 0 && (\n                        <Errors errorMessages={errorMessages} onRequestRemove={dismissErrorMessage} />\n                    )}\n                    {renderForm && (\n                        <SUIFormRendererCompound>\n                            <div style={{ width: '100%', position: 'relative' }}>\n                                {isFetchingData && <LoadingMessage />}\n                                <main>\n                                    <SUIFormRendererCompound.ErrorView />\n                                    <SUIFormRendererCompound.Form\n                                        data={formData}\n                                        schema={schema}\n                                        uischema={uiSchema as UISchemaElement}\n                                    />\n                                </main>\n                                <footer>\n                                    <ActionAreaWrapper>\n                                        <SUIFormRendererCompound.ActionButtons onSubmit={handleSubmit} />\n                                    </ActionAreaWrapper>\n                                </footer>\n                            </div>\n                        </SUIFormRendererCompound>\n                    )}\n                </WrapperDiv>\n            )}\n            {isBootstrapping && (\n                <WaitSpinnerWrapper data-test-name={TEST_IDS.WAITSPINNER}>\n                    <WaitSpinner size=\"medium\" />\n                </WaitSpinnerWrapper>\n            )}\n        </>\n    );\n};\n\nconst WinFwdPerfmonPage = compose([\n    withOSFilter(['Windows']),\n    withSplunkEnvFilter(['cmp']),\n    withRBACFilter(['list_deployment_server', 'edit_deployment_server']),\n])(WinFwdPerfmon);\n\nexport default WinFwdPerfmonPage;\n","import { JsonSchema4 } from '@jsonforms/core';\nimport { MESSAGES } from '../../../WinFwdPerfmon.messages';\n\ninterface IGenerateSchemaArgs {\n    availableObjects: Array<{ label: string; value: string }>;\n    indexes: Array<{ label: string; value: string }>;\n}\n\nexport const generateSchema = ({ availableObjects = [], indexes = [] }: IGenerateSchemaArgs): JsonSchema4 => {\n    return {\n        type: 'object',\n        properties: {\n            name: {\n                type: 'string',\n            },\n            availableObjects: availableObjects.length\n                ? {\n                      type: 'object',\n                      enum: availableObjects,\n                      description: MESSAGES.AVAILABLE_OBJECTS.DESCRIPTION,\n                  }\n                : {},\n            counters: {\n                type: 'object',\n            },\n            instances: {\n                type: 'object',\n            },\n            pollingInterval: {\n                type: 'number',\n                description: MESSAGES.POLLING_INTERVAL.DESCRIPTION,\n            },\n            index: indexes.length\n                ? {\n                      type: 'object',\n                      enum: indexes,\n                  }\n                : {},\n        },\n        required: ['pollingInterval'],\n    };\n};\n","import { UISchemaElement } from '@jsonforms/core';\nimport {\n    getAlwaysDisableElementRule,\n    getControlGroupLabelWidthProps,\n} from '../../../../../shared/utils/helper';\nimport { MESSAGES } from '../../../WinFwdPerfmon.messages';\n\ninterface IGenerateUISchemaFnParam {\n    countersSource: string[];\n    instancesSource: string[];\n    handleSelectChange: (availObj: string, { refreshDataSources }) => Promise<void>;\n}\n\ninterface IGenerateUISchemaFn {\n    (param: IGenerateUISchemaFnParam): UISchemaElement;\n}\n\nexport const generateUISchema: IGenerateUISchemaFn = ({\n    countersSource,\n    instancesSource,\n    handleSelectChange,\n}) => {\n    return {\n        type: 'VerticalLayout',\n        elements: [\n            {\n                type: 'Control',\n                scope: '#/properties/name',\n                label: 'Name',\n                rule: { ...getAlwaysDisableElementRule() },\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                },\n            },\n            {\n                type: 'Select',\n                scope: '#/properties/availableObjects',\n                label: MESSAGES.AVAILABLE_OBJECTS.LABEL,\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                    customComponentProps: {\n                        onSelectValueChange: handleSelectChange,\n                    },\n                    suiComponentProps: {\n                        filter: false,\n                    },\n                },\n            },\n            {\n                type: 'TransferList',\n                scope: '#/properties/counters',\n                label: MESSAGES.COUNTERS.LABEL,\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                    customComponentProps: {\n                        source: {\n                            label: MESSAGES.COUNTERS.SOURCE_LABEL,\n                        },\n                        target: {\n                            label: MESSAGES.COUNTERS.TARGET_LABEL,\n                        },\n                        dataSource: countersSource,\n                    },\n                },\n            },\n            {\n                type: 'TransferList',\n                scope: '#/properties/instances',\n                label: MESSAGES.INSTANCES.LABEL,\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                    customComponentProps: {\n                        source: {\n                            label: MESSAGES.INSTANCES.SOURCE_LABEL,\n                        },\n                        target: {\n                            label: MESSAGES.INSTANCES.TARGET_LABEL,\n                        },\n                        dataSource: instancesSource,\n                    },\n                },\n            },\n            {\n                type: 'Control',\n                scope: '#/properties/pollingInterval',\n                label: MESSAGES.POLLING_INTERVAL.LABEL,\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                },\n            },\n            {\n                type: 'Label',\n                text: MESSAGES.INDEX.LABEL,\n            },\n            {\n                type: 'Select',\n                scope: '#/properties/index',\n                label: MESSAGES.INDEX.SELECT_LABEL,\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                    suiComponentProps: {\n                        filter: false,\n                    },\n                },\n            },\n        ],\n    };\n};\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { $any, SplunkInstanceTypes, SplunkExperienceTypes } from '../../../app.interfaces';\nimport { ServerInfoService } from '../../services/ServerInfoService';\nimport { UserContextService } from '../../services/UserContextService';\nimport { ExperienceService } from '../../services/ExperienceService';\nimport { IFilterHOCReturnType, OS, OSList } from './filterHOCs.interfaces';\nimport { MESSAGES } from '../../../messages';\n\nconst ErrorWrapper = styled.div`\n    margin: 25px;\n`;\n\nconst ErrorView: FC<{ msg: string }> = ({ msg = 'Error loading page' }) => {\n    return <h2>{msg}</h2>;\n};\n\nexport const withRBACFilter =\n    (permissionsNeeded = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const hasPermission = UserContextService.canReadPage(permissionsNeeded);\n        const RBACFilterComp: FC<$any> = (props) => {\n            return !hasPermission ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.RBAC_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return RBACFilterComp;\n    };\n\nexport const withSplunkEnvFilter =\n    (supportedEnvs: SplunkInstanceTypes[] = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsEnv = supportedEnvs.includes(ServerInfoService.getSplunkInstanceType());\n        const SplunkEnvFilterComp: FC<$any> = (props) => {\n            return !supportsEnv ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.SPLUNK_ENV_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return SplunkEnvFilterComp;\n    };\n\nexport const withOSFilter =\n    (supportedOS: OSList = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsOS = supportedOS.includes(ServerInfoService.getOS() as OS);\n        const OSFilterComp: FC<$any> = (props) => {\n            return !supportsOS ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.OS_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return OSFilterComp;\n    };\n\nexport const withExperienceFilter =\n    (supportedExperiences: SplunkExperienceTypes[] = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsExperience = supportedExperiences.includes(ExperienceService.getExperienceType());\n        const ExperienceFilterComp: FC<$any> = (props) => {\n            return !supportsExperience ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.SPLUNK_EXPERIENCE_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return ExperienceFilterComp;\n    };\n","import { normalizeDataTestIds } from '@splunk/sui-forms-shared-utils';\nimport { remoteAppName } from '../../../constants';\n\nconst TEST_IDS = {\n    LOADING_MSG: 'LoadingMessage',\n};\n\nnormalizeDataTestIds({ remoteAppName, compName: 'LoadingMessage', testIds: TEST_IDS });\nexport default TEST_IDS;\n","import styled from 'styled-components';\nimport P from '@splunk/react-ui/Paragraph';\n\nexport const LoadingMessageWrapper = styled.div`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    background-color: rgba(255, 255, 255, 0.5);\n    z-index: 500;\n`;\n\nexport const LoadingMessageContainer = styled.div`\n    margin: auto;\n    display: flex;\n`;\n\nexport const Message = styled(P)`\n    margin: auto;\n    font-size: 16px;\n    margin-bottom: 4px;\n    margin-left: 2px;\n`;\n","import React, { FC } from 'react';\nimport WaitSpinner from '@splunk/react-ui/WaitSpinner';\nimport TEST_IDS from './LoadingMessage.testids';\nimport { MESSAGES } from '../../../messages';\nimport { LoadingMessageWrapper, LoadingMessageContainer, Message } from './LoadingMessage.styles';\n\nconst LoadingMessage: FC = () => {\n    return (\n        <LoadingMessageWrapper data-test-name={TEST_IDS.LOADING_MSG}>\n            <LoadingMessageContainer>\n                <WaitSpinner size=\"medium\" />\n                <Message>{MESSAGES.COMMON.LOADING_MSG}</Message>\n            </LoadingMessageContainer>\n        </LoadingMessageWrapper>\n    );\n};\n\nexport default LoadingMessage;\n"],"names":["defaultSettingsUrl","createRESTURL","fetchWinFwdPerfmonCollectionUrl","fetchIndexesUrl","entityAcl","app","owner","fetchDefaultSettings","async","url","entity","stringify","output_mode","response","fetch","defaultFetchInit","json","status","object","counters","index","instances","interval","get","name","availableObjects","label","value","targetItemsList","split","filter","e","pollingInterval","Error","formatSplunkDError","fetchAvailableObjects","map","obj","fetchCountersInstances","params","availObj","fetchIndexes","fetchIndexesParams","defaultIndex","entry","TEST_IDS","CONTAINER","WAITSPINNER","ERROR_MSG","normalizeDataTestIds","remoteAppName","compName","testIds","MESSAGES","AVAILABLE_OBJECTS","LABEL","DESCRIPTION","COUNTERS","SOURCE_LABEL","TARGET_LABEL","INSTANCES","POLLING_INTERVAL","INDEX","SELECT_LABEL","localizeMessages","WrapperDiv","styled","pick","enterprise","variables","prisma","ActionAreaWrapper","WaitSpinnerWrapper","WinFwdPerfmonPage","compose","withOSFilter","withSplunkEnvFilter","withRBACFilter","isBootstrapping","setIsBootstrapping","useState","formData","setFormData","undefined","schema","setSchema","uiSchema","setUISchema","errorMessages","setErrorMessages","isFetchingData","setIsFetchingData","handleSelectChange","refreshDataSources","dataSourcesToBeRefreshed","error","message","useEffect","countersInstances","defaultSettings","indexes","Promise","all","fetchWinFwdPerfmonSettings","type","properties","length","enum","description","required","generateSchema","countersSource","instancesSource","elements","scope","rule","getAlwaysDisableElementRule","options","suiControlGroupProps","getControlGroupLabelWidthProps","customComponentProps","onSelectValueChange","suiComponentProps","source","target","dataSource","text","generateUISchema","window","location","href","LISTING_PAGE_URL","Pages","renderForm","isEmpty","Errors","onRequestRemove","SUIFormRendererCompound","style","width","position","data","uischema","onSubmit","successCb","failureCb","body","app_name","join","fetchConfig","method","updateWinFwdPerfmonSettings","size","ErrorWrapper","ErrorView","msg","permissionsNeeded","Comp","hasPermission","UserContextService","props","supportedEnvs","supportsEnv","includes","ServerInfoService","supportedOS","supportsOS","withExperienceFilter","supportedExperiences","supportsExperience","ExperienceService","LOADING_MSG","LoadingMessageWrapper","LoadingMessageContainer","Message","P"],"sourceRoot":""}