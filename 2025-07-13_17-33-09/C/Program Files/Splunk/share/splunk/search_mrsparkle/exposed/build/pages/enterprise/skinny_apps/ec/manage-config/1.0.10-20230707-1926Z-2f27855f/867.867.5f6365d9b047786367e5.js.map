{"version":3,"file":"867.867.5f6365d9b047786367e5.js","mappings":"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","sources":["webpack://remote-manage-config-page/./src/config-page/webhook-allow-list/WebhookAllowList.custom-validators.ts","webpack://remote-manage-config-page/./src/config-page/webhook-allow-list/data/jsonforms/schema/index.ts","webpack://remote-manage-config-page/./src/config-page/webhook-allow-list/data/jsonforms/uischema/index.ts","webpack://remote-manage-config-page/./src/config-page/webhook-allow-list/WebhookAllowList.constants.ts","webpack://remote-manage-config-page/./src/config-page/webhook-allow-list/WebhookAllowList.apiservice.ts","webpack://remote-manage-config-page/./src/config-page/webhook-allow-list/WebhookAllowList.testids.ts","webpack://remote-manage-config-page/./src/config-page/webhook-allow-list/WebhookAllowList.component.tsx","webpack://remote-manage-config-page/./src/shared/components/FilterHOCs/filterHOCs.tsx"],"sourcesContent":["import { validateWebhookDomainFormat, validateWebhookDomainKey } from '../../shared/utils/helper';\n\nexport const FORMATS = {\n    WEBHOOK_DOMAIN_KEY: 'webhook-domain-key',\n    WEBHOOK_DOMAIN_VALUE: 'webhook-domain-format',\n};\n\nexport const customValidators = {\n    [FORMATS.WEBHOOK_DOMAIN_KEY]: (value: string): boolean => {\n        const { isValid } = validateWebhookDomainKey(value);\n        return isValid;\n    },\n    [FORMATS.WEBHOOK_DOMAIN_VALUE]: (value: string): boolean => {\n        const { isValid } = validateWebhookDomainFormat(value);\n        return isValid;\n    },\n};\n","import { JsonSchema4 } from '@jsonforms/core';\nimport { FORMATS } from '../../../WebhookAllowList.custom-validators';\n\nexport const schema: JsonSchema4 = {\n    type: 'object',\n    properties: {\n        'webhook-values': {\n            type: 'array',\n            items: {\n                type: 'object',\n                properties: {\n                    name: {\n                        type: 'string',\n                        format: FORMATS.WEBHOOK_DOMAIN_KEY,\n                    },\n                    value: {\n                        type: 'string',\n                        format: FORMATS.WEBHOOK_DOMAIN_VALUE,\n                    },\n                },\n            },\n        },\n    },\n};\n","import { MESSAGES } from '../../../../../messages';\nimport { validateWebhookDomainFormat, validateWebhookDomainKey } from '../../../../../shared/utils/helper';\n\nexport const uiSchema = {\n    type: 'HorizontalLayout',\n    elements: [\n        {\n            type: 'FormRows',\n            scope: '#/properties/webhook-values',\n            options: {\n                customComponentProps: {\n                    validators: [validateWebhookDomainKey, validateWebhookDomainFormat],\n                    placeholder: ['e.g. Webhook_1', 'e.g. https:\\\\/\\\\/(.*\\\\.|)company.com\\\\/?.*'],\n                    headers: ['Name', 'Value'],\n                    labelsForScreenReader: ['Webhook name required', 'Webhook value required'],\n                    deleteConfirmationModal: {\n                        title: MESSAGES.WEBHOOK_ALLOW_LIST.DELETE_CONFIRMATION_MODAL_TITLE,\n                        content: MESSAGES.WEBHOOK_ALLOW_LIST.DELETE_CONFIRMATION_MODAL_CONTENT,\n                    },\n                },\n                suiComponentProps: {\n                    addLabel: MESSAGES.WEBHOOK_ALLOW_LIST.ADD_WEBHOOK_BTN_LABEL,\n                },\n            },\n        },\n    ],\n};\n","export const WEBHOOK_ALLOW_LIST_LOC_STR = 'learnmore.alert.action.webhook';\nexport const WEBHOOK_PREFIX = 'allowlist.';\n","import { createRESTURL } from '@splunk/splunk-utils/url';\nimport { differenceWith, isEqual, set as setPathValue } from 'lodash';\nimport querystring from 'querystring';\n\nimport { defaultFetchInit } from '@splunk/splunk-utils/fetch';\nimport { WEBHOOK_PREFIX } from './WebhookAllowList.constants';\nimport {\n    ParsedWebhookResponse,\n    WebhookAllowListFormData,\n    IGenerateDiffFn,\n    Webhook,\n} from './WebhookAllowList.interfaces';\nimport { TrackingService } from '../../shared/services/TrackingService';\n\nlet initialData = {\n    records: [],\n    errors: [],\n} as ParsedWebhookResponse;\n\nconst generateDiff: IGenerateDiffFn = ({ prevSubnets, currSubnets }) => {\n    return {\n        added: differenceWith(currSubnets, prevSubnets, isEqual),\n        removed: differenceWith(prevSubnets, currSubnets, isEqual),\n    };\n};\n\nconst generateErrorMessage = async (err: Response): Promise<ParsedWebhookResponse> => {\n    const errorResponse = await err.json();\n    if (errorResponse?.messages.length) {\n        errorResponse.messages\n            .filter((message) => message.type === 'ERROR')\n            .forEach((errorMessage) => {\n                if (errorMessage.text) {\n                    initialData.errors.push(errorMessage.text);\n                }\n            });\n    }\n    return initialData;\n};\n\n/*\n    In the response object, the keys prefixed with WEBHOOK_PREFIX = 'allowlist.' contains the webhook records.\n    So the normalizedObjectArray function helps segregating them and return an array of object(webhook records)\n */\nexport const normalizedObjectArray = (dataObject: { [key: string]: string }): Webhook[] => {\n    const normalizedArray = [];\n    Object.keys(dataObject)\n        .filter((key) => key.startsWith(WEBHOOK_PREFIX) && dataObject[key] !== '')\n        .forEach((key) => {\n            const name = key.split('.')[1];\n            normalizedArray.push({ name, value: dataObject[key] });\n        });\n    return normalizedArray;\n};\n\nconst handleResponse = async (response: Response): Promise<ParsedWebhookResponse> => {\n    if (response.status === 200) {\n        try {\n            const jsonResponse = await response.json();\n            const { content } = jsonResponse?.entry[0];\n            if (content) {\n                initialData = {\n                    records: [],\n                    errors: [],\n                };\n                initialData.records = normalizedObjectArray(content);\n            }\n            return initialData;\n        } catch (err) {\n            throw new Error(err);\n        }\n    } else {\n        return generateErrorMessage(response);\n    }\n};\n\nexport const fetchWebhookAllowList = async (): Promise<ParsedWebhookResponse> => {\n    const response = await fetch(\n        createRESTURL('configs/conf-alert_actions/webhook?output_mode=json', {\n            owner: 'admin',\n            app: 'alert_webhook',\n        }),\n        {\n            ...defaultFetchInit,\n        }\n    );\n    /* eslint-disable no-return-await */\n    return await handleResponse(response);\n};\n\nexport const addDelWebhook = async (\n    updatedData: WebhookAllowListFormData\n): Promise<ParsedWebhookResponse> => {\n    const { added, removed } = generateDiff({\n        prevSubnets: initialData.records,\n        currSubnets: updatedData['webhook-values'],\n    });\n    const modifiedData = {};\n    const trackingData = {};\n    let hasUpdates = false;\n    if (removed.length) {\n        hasUpdates = true;\n        removed.forEach((element) => {\n            modifiedData[`${WEBHOOK_PREFIX}${element.name}`] = '';\n        });\n        setPathValue(trackingData, `request.remove`, removed.length);\n    }\n    if (added.length) {\n        hasUpdates = true;\n        added.forEach((element) => {\n            modifiedData[`${WEBHOOK_PREFIX}${element.name}`] = element.value;\n        });\n        setPathValue(trackingData, `request.add`, added.length);\n    }\n    if (hasUpdates) {\n        try {\n            const response = await fetch(\n                createRESTURL('configs/conf-alert_actions/webhook', {\n                    owner: 'admin',\n                    app: 'alert_webhook',\n                }),\n                {\n                    ...defaultFetchInit,\n                    method: 'POST',\n                    body: querystring.encode({ ...modifiedData, output_mode: 'json' }),\n                }\n            );\n            const data = await handleResponse(response);\n            const { errors } = data;\n            if (!errors.length) {\n                if (added.length) {\n                    setPathValue(trackingData, `response.added`, added.length);\n                }\n                if (removed.length) {\n                    setPathValue(trackingData, `response.removed`, removed.length);\n                }\n            }\n            TrackingService.trackEvent({\n                type: 'manageConfigPage.submitBtnClicked',\n                data: trackingData,\n            });\n            if (errors.length) {\n                TrackingService.trackEvent({\n                    type: 'manageConfigPage.errorOnSubmit',\n                    data: {\n                        errorUseCases: data.errors.join(', '),\n                    },\n                });\n            }\n            return data;\n        } catch (err) {\n            return { records: null, errors: [err.message] };\n        }\n    } else {\n        return Promise.resolve({});\n    }\n};\n","import { normalizeDataTestIds } from '@splunk/sui-forms-shared-utils';\nimport { remoteAppName } from '../../constants';\n\nconst TEST_IDS = {\n    CONTAINER: 'Container',\n    LEARN_MORE_LINK: 'LearnmoreLink',\n    WAITSPINNER: 'Waitspinner',\n    ERROR_MSG: 'ErrorMessage',\n};\n\nnormalizeDataTestIds({ remoteAppName, compName: 'WebhookAllowList', testIds: TEST_IDS });\nexport default TEST_IDS;\n","import React, { FC, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { flowRight as compose } from 'lodash';\nimport { pick, variables } from '@splunk/themes';\nimport { createDocsURL } from '@splunk/splunk-utils/url';\nimport WaitSpinner from '@splunk/react-ui/WaitSpinner';\nimport Link from '@splunk/react-ui/Link';\nimport SUIFormRenderer, { ISubmitHandler, Errors } from '@splunk/sui-form-renderer';\nimport { schema } from './data/jsonforms/schema';\nimport { uiSchema } from './data/jsonforms/uischema';\nimport { addDelWebhook, fetchWebhookAllowList } from './WebhookAllowList.apiservice';\nimport { WebhookAllowListFormData } from './WebhookAllowList.interfaces';\nimport { WEBHOOK_ALLOW_LIST_LOC_STR } from './WebhookAllowList.constants';\nimport { customValidators } from './WebhookAllowList.custom-validators';\nimport { MESSAGES } from '../../messages';\nimport TEST_IDS from './WebhookAllowList.testids';\nimport { withRBACFilter, withSplunkEnvFilter } from '../../shared/components/FilterHOCs/filterHOCs';\n\nconst WrapperDiv = styled.div`\n    max-width: 960px;\n    padding: 30px 20px 20px 20px;\n    background-color: ${pick({\n        enterprise: variables.backgroundColor,\n        prisma: variables.backgroundColorPopup,\n    })};\n    box-shadow: ${variables.overlayShadow};\n    margin: 0 auto 20px;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst WaitSpinnerWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    margin-top: 40px;\n    margin-bottom: 40px;\n`;\n\nconst StyledLink = styled(Link)`\n    width: fit-content;\n    padding-right: 5px;\n`;\n\nconst WebhookAllowList: FC = () => {\n    const [formData, setFormData] = useState<WebhookAllowListFormData>({\n        'webhook-values': [],\n    });\n    const [isLoading, setIsLoading] = useState(true);\n    const [errorMessages, setErrorMessages] = useState<string[]>([]);\n\n    const handleSubmit: ISubmitHandler<WebhookAllowListFormData> = async ({ data, successCb, failureCb }) => {\n        const { records, errors } = await addDelWebhook(data);\n        // If no records were updated, do nothing.\n        if (!records && !errors?.length) {\n            return;\n        }\n\n        // Update records only if present. For error cases, we don't want to re-render the forms to preserve the user input that caused errors.\n        if (errors.length) {\n            failureCb(errors);\n        } else {\n            setFormData({\n                'webhook-values': records,\n            });\n            successCb();\n        }\n    };\n\n    useEffect(() => {\n        (async (): Promise<void> => {\n            const { records, errors } = await fetchWebhookAllowList();\n            if (records && records.length) {\n                setFormData({\n                    'webhook-values': records,\n                });\n            }\n            if (errors.length) {\n                setErrorMessages(errors);\n            }\n            setIsLoading(false);\n        })();\n    }, []);\n\n    return (\n        <>\n            {!isLoading && (\n                <WrapperDiv data-test-name={TEST_IDS.CONTAINER}>\n                    <p>\n                        {MESSAGES.WEBHOOK_ALLOW_LIST.DESCRIPTION}{' '}\n                        <StyledLink\n                            to={createDocsURL(WEBHOOK_ALLOW_LIST_LOC_STR)}\n                            openInNewContext\n                            data-test-name={TEST_IDS.LEARN_MORE_LINK}\n                        >\n                            {MESSAGES.COMMON.LEARN_MORE}\n                        </StyledLink>\n                    </p>\n                    {errorMessages.length > 0 && <Errors errorMessages={errorMessages} />}\n                    {!errorMessages.length && (\n                        <SUIFormRenderer\n                            schema={schema}\n                            uischema={uiSchema}\n                            data={formData}\n                            onSubmit={handleSubmit}\n                            customValidators={customValidators}\n                        />\n                    )}\n                </WrapperDiv>\n            )}\n            {isLoading && (\n                <WaitSpinnerWrapper data-test-name={TEST_IDS.WAITSPINNER}>\n                    <WaitSpinner size=\"medium\" />\n                </WaitSpinnerWrapper>\n            )}\n        </>\n    );\n};\n\nconst WebhookAllowListPage = compose([\n    withSplunkEnvFilter(['cloud']),\n    withRBACFilter(['edit_webhook_allow_list']),\n])(WebhookAllowList);\n\nexport default WebhookAllowListPage;\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { $any, SplunkInstanceTypes, SplunkExperienceTypes } from '../../../app.interfaces';\nimport { ServerInfoService } from '../../services/ServerInfoService';\nimport { UserContextService } from '../../services/UserContextService';\nimport { ExperienceService } from '../../services/ExperienceService';\nimport { IFilterHOCReturnType, OS, OSList } from './filterHOCs.interfaces';\nimport { MESSAGES } from '../../../messages';\n\nconst ErrorWrapper = styled.div`\n    margin: 25px;\n`;\n\nconst ErrorView: FC<{ msg: string }> = ({ msg = 'Error loading page' }) => {\n    return <h2>{msg}</h2>;\n};\n\nexport const withRBACFilter =\n    (permissionsNeeded = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const hasPermission = UserContextService.canReadPage(permissionsNeeded);\n        const RBACFilterComp: FC<$any> = (props) => {\n            return !hasPermission ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.RBAC_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return RBACFilterComp;\n    };\n\nexport const withSplunkEnvFilter =\n    (supportedEnvs: SplunkInstanceTypes[] = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsEnv = supportedEnvs.includes(ServerInfoService.getSplunkInstanceType());\n        const SplunkEnvFilterComp: FC<$any> = (props) => {\n            return !supportsEnv ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.SPLUNK_ENV_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return SplunkEnvFilterComp;\n    };\n\nexport const withOSFilter =\n    (supportedOS: OSList = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsOS = supportedOS.includes(ServerInfoService.getOS() as OS);\n        const OSFilterComp: FC<$any> = (props) => {\n            return !supportsOS ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.OS_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return OSFilterComp;\n    };\n\nexport const withExperienceFilter =\n    (supportedExperiences: SplunkExperienceTypes[] = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsExperience = supportedExperiences.includes(ExperienceService.getExperienceType());\n        const ExperienceFilterComp: FC<$any> = (props) => {\n            return !supportsExperience ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.SPLUNK_EXPERIENCE_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return ExperienceFilterComp;\n    };\n"],"names":["FORMATS","customValidators","value","isValid","validateWebhookDomainKey","validateWebhookDomainFormat","schema","type","properties","items","name","format","uiSchema","elements","scope","options","customComponentProps","validators","placeholder","headers","labelsForScreenReader","deleteConfirmationModal","title","MESSAGES","content","suiComponentProps","addLabel","WEBHOOK_PREFIX","initialData","records","errors","handleResponse","async","response","status","errorResponse","err","json","messages","length","filter","message","forEach","errorMessage","text","push","generateErrorMessage","jsonResponse","entry","dataObject","normalizedArray","Object","keys","key","startsWith","split","normalizedObjectArray","Error","TEST_IDS","CONTAINER","LEARN_MORE_LINK","WAITSPINNER","ERROR_MSG","normalizeDataTestIds","remoteAppName","compName","testIds","WrapperDiv","styled","pick","enterprise","variables","prisma","WaitSpinnerWrapper","StyledLink","Link","compose","withSplunkEnvFilter","withRBACFilter","formData","setFormData","useState","isLoading","setIsLoading","errorMessages","setErrorMessages","useEffect","fetch","createRESTURL","owner","app","defaultFetchInit","fetchWebhookAllowList","to","createDocsURL","openInNewContext","Errors","uischema","data","onSubmit","successCb","failureCb","added","removed","prevSubnets","currSubnets","differenceWith","isEqual","generateDiff","updatedData","modifiedData","trackingData","hasUpdates","element","setPathValue","Promise","resolve","method","body","querystring","encode","output_mode","TrackingService","errorUseCases","join","addDelWebhook","size","ErrorWrapper","ErrorView","msg","permissionsNeeded","Comp","hasPermission","UserContextService","props","supportedEnvs","supportsEnv","includes","ServerInfoService","withOSFilter","supportedOS","supportsOS","withExperienceFilter","supportedExperiences","supportsExperience","ExperienceService"],"sourceRoot":""}