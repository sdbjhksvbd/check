{"version":3,"file":"251.251.ec451022f033c04ca5ef.js","mappings":"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","sources":["webpack://remote-manage-config-page/./src/config-page/win-wmi-collections/WinWmiCollections.errors.ts","webpack://remote-manage-config-page/./src/config-page/win-wmi-collections/WinWmiCollections.messages.ts","webpack://remote-manage-config-page/./src/config-page/win-wmi-collections/WinWmiCollections.testids.ts","webpack://remote-manage-config-page/./src/config-page/win-wmi-collections/WinWmiCollections.styles.ts","webpack://remote-manage-config-page/./src/config-page/win-wmi-collections/WinWmiCollections.apiservice.ts","webpack://remote-manage-config-page/./src/config-page/win-wmi-collections/WinWmiCollections.component.tsx","webpack://remote-manage-config-page/./src/config-page/win-wmi-collections/data/jsonforms/schema/index.ts","webpack://remote-manage-config-page/./src/config-page/win-wmi-collections/data/jsonforms/uischema/index.ts","webpack://remote-manage-config-page/./src/shared/components/FilterHOCs/filterHOCs.tsx","webpack://remote-manage-config-page/./src/shared/components/LoadingMessage/LoadingMessage.testids.ts","webpack://remote-manage-config-page/./src/shared/components/LoadingMessage/LoadingMessage.styles.ts","webpack://remote-manage-config-page/./src/shared/components/LoadingMessage/LoadingMessage.component.tsx"],"sourcesContent":["const ERROR_CODES = {\n    FETCH_AVAILABLE_COUNTERS_NOT_FOUND: 'FETCH_AVAILABLE_COUNTERS_NOT_FOUND',\n    FETCH_AVAILABLE_INSTANCES_NOT_FOUND: 'FETCH_AVAILABLE_INSTANCES_NOT_FOUND',\n};\n\nexport default ERROR_CODES;\n","import { localizeMessages } from '@splunk/sui-forms-shared-utils';\nimport ERROR_CODES from './WinWmiCollections.errors';\n\nexport const MESSAGES = {\n    LOOKUP_HOST: {\n        LABEL: 'Select target host *',\n        DESCRIPTION: 'Enter a host name then click \"Query\" to find available classes.',\n        BUTTON_LABEL: 'Query...',\n    },\n    AVAILABLE_OBJECTS: {\n        LABEL: 'Available objects *',\n        DESCRIPTION: 'Select an object to view and add available counters.',\n    },\n    COUNTERS: {\n        LABEL: 'Counters',\n        SOURCE_LABEL: 'Available counters',\n        TARGET_LABEL: 'Selected counters',\n    },\n    INSTANCES: {\n        LABEL: 'Instances',\n        SOURCE_LABEL: 'Available instances',\n        TARGET_LABEL: 'Selected instances',\n    },\n    ADDITIONAL_HOSTS: {\n        LABEL: 'Collect the same set of metrics from additional hosts',\n        DESCRIPTION: 'Comma separated list',\n    },\n    POLLING_INTERVAL: {\n        LABEL: 'Polling interval *',\n        DESCRIPTION: 'Seconds',\n    },\n    INDEX: {\n        LABEL: 'Index',\n        SELECT_LABEL: 'Set the destination index for this source',\n    },\n    ERRORS: {\n        [ERROR_CODES.FETCH_AVAILABLE_COUNTERS_NOT_FOUND]: (value: string): string =>\n            `Failed to fetch data: Unable to get the available counters for class '${value}'. WMI error.`,\n        [ERROR_CODES.FETCH_AVAILABLE_INSTANCES_NOT_FOUND]: (value: string): string =>\n            `Failed to fetch data: Unable to get the available instances for class '${value}'. WMI error`,\n    },\n};\n// Localize messages\nlocalizeMessages(MESSAGES);\n","import { normalizeDataTestIds } from '@splunk/sui-forms-shared-utils';\nimport { remoteAppName } from '../../constants';\n\nconst TEST_IDS = {\n    CONTAINER: 'Container',\n    WAITSPINNER: 'WaitSpinner',\n    ERROR_MSG: 'ErrorMessage',\n};\n\nnormalizeDataTestIds({ remoteAppName, compName: 'WinELC', testIds: TEST_IDS });\nexport default TEST_IDS;\n","import styled from 'styled-components';\nimport { pick, variables } from '@splunk/themes';\n\nexport const WrapperDiv = styled.div`\n    max-width: 960px;\n    padding: 30px 20px 20px 20px;\n    background-color: ${pick({\n        enterprise: variables.backgroundColor,\n        prisma: variables.backgroundColorPopup,\n    })};\n    box-shadow: ${variables.overlayShadow};\n    margin: 0 auto 20px;\n    display: flex;\n    flex-direction: column;\n`;\n\nexport const ActionAreaWrapper = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    border-top: 1px solid #ccc;\n    padding: 20px;\n`;\n\nexport const WaitSpinnerWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    margin-top: 40px;\n    margin-bottom: 40px;\n`;\n","import { get } from 'lodash';\nimport { stringify } from 'query-string';\nimport { createRESTURL } from '@splunk/splunk-utils/url';\nimport { defaultFetchInit } from '@splunk/splunk-utils/fetch';\nimport { $any } from '@splunk/sui-form-renderer';\nimport {\n    IFetchAvailableObjectsFn,\n    IFetchCountersInstancesFn,\n    IFetchDefaultSettingsFn,\n    IFetchIndexesFn,\n    IUpdateWinWmiCollectionsSettingsFn,\n    ISplunkDACL,\n    ITransformWildcardFn,\n} from './WinWmiCollections.interfaces';\nimport {\n    defaultIndex,\n    fetchIndexesParams,\n    formatAvailableObject,\n    formatSplunkDError,\n    stripAvailableObjectsPrefix,\n} from '../../shared/utils/helper';\n\nexport const defaultWinWMIPath = 'data/inputs/win-wmi-collections';\nexport const defaultSettingsUrl = createRESTURL(defaultWinWMIPath);\nexport const fetchWinPerfmonCollectionUrl = createRESTURL('admin/win-wmi-find-collection');\nexport const fetchIndexesUrl = createRESTURL('data/indexes');\n\nconst entityAcl: ISplunkDACL = {\n    app: '',\n    owner: '',\n};\n\nexport const fetchDefaultSettings: IFetchDefaultSettingsFn = async (entity) => {\n    const url = `${defaultSettingsUrl}/${entity}?${stringify({ output_mode: 'json' })}`;\n    const response = await fetch(url, { ...defaultFetchInit });\n    const json = await response.json();\n\n    if (response.status === 200) {\n        /* eslint-disable camelcase */\n        const {\n            classes = '',\n            fields = [],\n            index = '',\n            instances = [],\n            interval = null,\n            lookup_host = '',\n            // Setting def value to null to match BE resp when the server setting is not configured\n            server = null,\n        } = get(json, 'entry[0].content', {});\n\n        const { app, owner } = get(json, 'entry[0].acl');\n        entityAcl.app = app;\n        entityAcl.owner = owner;\n\n        const availableObjects = stripAvailableObjectsPrefix(classes);\n\n        return {\n            lookupHost: lookup_host,\n            availableObjects: {\n                label: availableObjects,\n                value: availableObjects,\n            },\n            counters: {\n                targetItemsList: fields,\n            },\n            instances: {\n                targetItemsList: instances,\n            },\n            // Convert falsey value to emp str to prevent validation err\n            additionalHosts: server || '',\n            pollingInterval: interval,\n            index: {\n                label: index,\n                value: index,\n            },\n        };\n    }\n    throw new Error(formatSplunkDError(json));\n};\n\nexport const fetchAvailableObjects: IFetchAvailableObjectsFn = async (lookupHost = '') => {\n    const params = {\n        server: lookupHost,\n        output_mode: 'json',\n    };\n    const url = `${fetchWinPerfmonCollectionUrl}?${stringify(params)}`;\n    const response = await fetch(url, { ...defaultFetchInit });\n    const json = await response.json();\n    if (response.status === 200) {\n        return get(json, 'entry[0].content.classes', []).map((obj) => {\n            const objName = stripAvailableObjectsPrefix(obj);\n            return {\n                label: objName,\n                value: objName,\n            };\n        });\n    }\n    throw new Error(formatSplunkDError(json));\n};\n\nexport const fetchCountersInstances: IFetchCountersInstancesFn = async ({ availableObjects }) => {\n    const params = {\n        class: formatAvailableObject(availableObjects),\n        output_mode: 'json',\n    };\n\n    const url = `${fetchWinPerfmonCollectionUrl}?${stringify(params)}`;\n    const response = await fetch(url, { ...defaultFetchInit });\n    const json = await response.json();\n\n    if (response.status === 200) {\n        return {\n            counters: get(json, 'entry[0].content.fields', []),\n            instances: get(json, 'entry[0].content.instances', []),\n        };\n    }\n    throw new Error(formatSplunkDError(json));\n};\n\nexport const fetchIndexes: IFetchIndexesFn = async () => {\n    const url = `${fetchIndexesUrl}?${stringify(fetchIndexesParams)}`;\n    const response = await fetch(url, { ...defaultFetchInit });\n    const json = await response.json();\n    if (response.status === 200) {\n        return [\n            defaultIndex,\n            ...(json.entry || []).map((index) => ({ label: index.name, value: index.name })),\n        ];\n    }\n    throw new Error(formatSplunkDError(json));\n};\n\nexport const updateWinWmiCollectionsSettings: IUpdateWinWmiCollectionsSettingsFn = async ({\n    entity,\n    data,\n}): Promise<void> => {\n    const { app, owner } = entityAcl;\n    const url = createRESTURL(`${defaultWinWMIPath}/${entity}`, { app, owner });\n    const body = stringify({\n        lookup_host: data.lookupHost,\n        classes: data.availableObjects?.value || '',\n        fields: data.counters.targetItemsList,\n        index: data.index?.value || '',\n        instances: data.instances.targetItemsList,\n        output_mode: 'json',\n        interval: data.pollingInterval,\n        server: data.additionalHosts,\n    });\n    const fetchConfig = { ...defaultFetchInit, method: 'POST', body };\n    const response = await fetch(url, { ...fetchConfig });\n    const json = await response.json();\n\n    if (response.status !== 200) {\n        throw new Error(formatSplunkDError(json));\n    }\n};\n\nexport const fetchWinWmiCollectionsSettings = async (entity: string): Promise<$any> => {\n    return Promise.all([fetchDefaultSettings(entity), fetchAvailableObjects(), fetchIndexes()]);\n};\n\n// The WMI collection endpoint will return a * if all counters and instances are selected for a given available object\n// If there is a * in the resp, we will use the dataSource value as the targetItems value\nexport const transformWildcard: ITransformWildcardFn = ({ defaultSettings, countersInstances }) => {\n    if (defaultSettings.counters?.targetItemsList?.includes('*')) {\n        defaultSettings.counters.targetItemsList = countersInstances.counters;\n    }\n    if (defaultSettings.instances?.targetItemsList?.includes('*')) {\n        defaultSettings.instances.targetItemsList = countersInstances.instances;\n    }\n    return defaultSettings;\n};\n","import React, { FC, useEffect, useState } from 'react';\nimport { flowRight as compose, isEmpty } from 'lodash';\nimport { $any, ISubmitHandler, SUIFormRendererCompound, Errors } from '@splunk/sui-form-renderer';\nimport WaitSpinner from '@splunk/react-ui/WaitSpinner';\nimport { UISchemaElement } from '@jsonforms/core';\nimport {\n    withOSFilter,\n    withRBACFilter,\n    withSplunkEnvFilter,\n} from '../../shared/components/FilterHOCs/filterHOCs';\nimport { generateSchema } from './data/jsonforms/schema';\nimport { generateUISchema } from './data/jsonforms/uischema';\nimport TEST_IDS from './WinWmiCollections.testids';\nimport { ActionAreaWrapper, WaitSpinnerWrapper, WrapperDiv } from './WinWmiCollections.styles';\nimport {\n    fetchAvailableObjects,\n    fetchCountersInstances,\n    fetchWinWmiCollectionsSettings,\n    transformWildcard,\n    updateWinWmiCollectionsSettings,\n} from './WinWmiCollections.apiservice';\nimport LoadingMessage from '../../shared/components/LoadingMessage/LoadingMessage.component';\nimport {\n    IParsedFetchAvailableCountersFnResponse,\n    IWinWmiCollectionsFormData,\n    WinWmiCollectionsProps,\n} from './WinWmiCollections.interfaces';\nimport { LISTING_PAGE_URL } from '../../constants';\nimport { Pages } from '../../app.interfaces';\n\nconst WinWmiCollections: FC<WinWmiCollectionsProps> = ({ entity }) => {\n    const [isBootstrapping, setIsBootstrapping] = useState(true);\n    const [formData, setFormData] = useState<IWinWmiCollectionsFormData>(undefined);\n    const [schema, setSchema] = useState({});\n    const [uiSchema, setUISchema] = useState({});\n    const [errorMessages, setErrorMessages] = useState<string[]>([]);\n    const [isFetchingData, setIsFetchingData] = useState(false);\n\n    const handleQueryButtonClick = async (lookupHost, { refreshDataSources }): Promise<void> => {\n        const dataSourcesToBeRefreshed = [\n            ['counters', []],\n            ['instances', []],\n        ];\n        try {\n            setErrorMessages([]);\n            setIsFetchingData(true);\n            const availableObjects = await fetchAvailableObjects(lookupHost);\n            dataSourcesToBeRefreshed.push(['availableObjects', availableObjects]);\n        } catch (error) {\n            setErrorMessages([error.message]);\n            dataSourcesToBeRefreshed.push(['availableObjects', []]);\n        } finally {\n            setIsFetchingData(false);\n            refreshDataSources(dataSourcesToBeRefreshed);\n        }\n    };\n\n    const handleAvailableObjectsSelectChange = async (\n        availableObjects,\n        { refreshDataSources }\n    ): Promise<void> => {\n        let dataSourcesToBeRefreshed = [\n            ['counters', []],\n            ['instances', []],\n        ];\n        try {\n            setErrorMessages([]);\n            setIsFetchingData(true);\n            const { counters, instances } = await fetchCountersInstances({ availableObjects });\n            dataSourcesToBeRefreshed = [\n                ['counters', counters],\n                ['instances', instances],\n            ];\n        } catch (error) {\n            setErrorMessages([error.message]);\n        } finally {\n            refreshDataSources(dataSourcesToBeRefreshed);\n            setIsFetchingData(false);\n        }\n    };\n\n    useEffect(() => {\n        if (!entity) {\n            window.location.href = LISTING_PAGE_URL[Pages.WinWmiCollections];\n            return;\n        }\n        (async (): Promise<void> => {\n            let defaultSettings: IWinWmiCollectionsFormData | $any = {};\n            let availableObjects = [];\n            let indexes = [];\n            let countersInstances: IParsedFetchAvailableCountersFnResponse;\n            try {\n                [defaultSettings, availableObjects, indexes] = await fetchWinWmiCollectionsSettings(entity);\n                countersInstances = await fetchCountersInstances({\n                    availableObjects: defaultSettings.availableObjects?.value,\n                });\n                defaultSettings = transformWildcard({ defaultSettings, countersInstances });\n            } catch (error) {\n                setErrorMessages([error.message]);\n            } finally {\n                setIsBootstrapping(false);\n                setFormData({ name: entity, ...defaultSettings });\n                setSchema(generateSchema({ availableObjects, indexes }));\n                setUISchema(\n                    generateUISchema({\n                        countersDataSource: countersInstances?.counters || [],\n                        instancesDataSource: countersInstances?.instances || [],\n                        handleQueryButtonClick,\n                        handleAvailableObjectsSelectChange,\n                    })\n                );\n            }\n        })();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    const dismissErrorMessage = (): void => setErrorMessages([]);\n\n    const handleSubmit: ISubmitHandler<$any> = async ({ data, successCb, failureCb }) => {\n        setErrorMessages([]);\n        setIsFetchingData(true);\n        try {\n            await updateWinWmiCollectionsSettings({ entity, data });\n            successCb();\n        } catch (error) {\n            failureCb([error.message]);\n        } finally {\n            setIsFetchingData(false);\n        }\n    };\n\n    const renderForm = !isEmpty(schema) && !isEmpty(uiSchema);\n\n    return (\n        <>\n            {!isBootstrapping && (\n                <WrapperDiv data-test-name={TEST_IDS.CONTAINER}>\n                    {errorMessages.length > 0 && (\n                        <Errors errorMessages={errorMessages} onRequestRemove={dismissErrorMessage} />\n                    )}\n                    {renderForm && (\n                        <SUIFormRendererCompound>\n                            <div style={{ width: '100%', position: 'relative' }}>\n                                {isFetchingData && <LoadingMessage />}\n                                <main>\n                                    <SUIFormRendererCompound.ErrorView />\n                                    <SUIFormRendererCompound.Form\n                                        data={formData}\n                                        schema={schema}\n                                        uischema={uiSchema as UISchemaElement}\n                                    />\n                                </main>\n                                <footer>\n                                    <ActionAreaWrapper>\n                                        <SUIFormRendererCompound.ActionButtons onSubmit={handleSubmit} />\n                                    </ActionAreaWrapper>\n                                </footer>\n                            </div>\n                        </SUIFormRendererCompound>\n                    )}\n                </WrapperDiv>\n            )}\n            {isBootstrapping && (\n                <WaitSpinnerWrapper data-test-name={TEST_IDS.WAITSPINNER}>\n                    <WaitSpinner size=\"medium\" />\n                </WaitSpinnerWrapper>\n            )}\n        </>\n    );\n};\n\nconst WinWmiCollectionsFiltered = compose([\n    withOSFilter(['Windows']),\n    withSplunkEnvFilter(['cmp']),\n    withRBACFilter(['edit_win_wmiconf']),\n])(WinWmiCollections);\n\nexport default WinWmiCollectionsFiltered;\n","import { JsonSchema4 } from '@jsonforms/core';\nimport { MESSAGES } from '../../../WinWmiCollections.messages';\n\ninterface IGenerateSchemaFnParams {\n    availableObjects: Array<{ label: string; value: string }>;\n    indexes: Array<{ label: string; value: string }>;\n}\n\ninterface IGenerateSchemaFn {\n    (param: IGenerateSchemaFnParams): JsonSchema4;\n}\n\nexport const generateSchema: IGenerateSchemaFn = ({ availableObjects = [], indexes = [] }) => {\n    return {\n        type: 'object',\n        properties: {\n            name: {\n                type: 'string',\n            },\n            lookupHost: {\n                type: 'string',\n                description: MESSAGES.LOOKUP_HOST.DESCRIPTION,\n            },\n            availableObjects: availableObjects.length\n                ? {\n                      type: 'object',\n                      enum: availableObjects,\n                      description: MESSAGES.AVAILABLE_OBJECTS.DESCRIPTION,\n                  }\n                : {},\n            counters: {\n                type: 'object',\n            },\n            instances: {\n                type: 'object',\n            },\n            additionalHosts: {\n                type: 'string',\n                description: MESSAGES.ADDITIONAL_HOSTS.DESCRIPTION,\n            },\n            pollingInterval: {\n                type: 'number',\n                description: MESSAGES.POLLING_INTERVAL.DESCRIPTION,\n            },\n            index: indexes.length\n                ? {\n                      type: 'object',\n                      enum: indexes,\n                  }\n                : {},\n        },\n        required: ['lookupHost', 'availableObjects', 'pollingInterval'],\n    };\n};\n","import { UISchemaElement } from '@jsonforms/core';\nimport {\n    getAlwaysDisableElementRule,\n    getControlGroupLabelWidthProps,\n} from '../../../../../shared/utils/helper';\nimport { MESSAGES } from '../../../WinWmiCollections.messages';\n\ninterface IGenerateUISchemaFnParam {\n    countersDataSource: string[];\n    instancesDataSource: string[];\n    handleQueryButtonClick: (lookupHost: string, { refreshDataSources }) => Promise<void>;\n    handleAvailableObjectsSelectChange: (value: string, { refreshDataSources }) => Promise<void>;\n}\n\ninterface IGenerateUISchemaFn {\n    (param: IGenerateUISchemaFnParam): UISchemaElement;\n}\n\nexport const generateUISchema: IGenerateUISchemaFn = ({\n    countersDataSource,\n    instancesDataSource,\n    handleQueryButtonClick,\n    handleAvailableObjectsSelectChange,\n}) => {\n    return {\n        type: 'VerticalLayout',\n        elements: [\n            {\n                type: 'Control',\n                scope: '#/properties/name',\n                label: 'Name',\n                rule: { ...getAlwaysDisableElementRule() },\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                },\n            },\n            {\n                type: 'InputButtonGroup',\n                scope: '#/properties/lookupHost',\n                label: MESSAGES.LOOKUP_HOST.LABEL,\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                    customComponentProps: {\n                        inputProps: {},\n                        buttonProps: {\n                            label: MESSAGES.LOOKUP_HOST.BUTTON_LABEL,\n                            onClick: handleQueryButtonClick,\n                        },\n                    },\n                },\n            },\n            {\n                type: 'Select',\n                scope: '#/properties/availableObjects',\n                label: MESSAGES.AVAILABLE_OBJECTS.LABEL,\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                    suiComponentProps: {\n                        filter: false,\n                    },\n                    customComponentProps: {\n                        onSelectValueChange: handleAvailableObjectsSelectChange,\n                    },\n                },\n            },\n            {\n                type: 'TransferList',\n                scope: '#/properties/counters',\n                label: MESSAGES.COUNTERS.LABEL,\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                    customComponentProps: {\n                        source: {\n                            label: MESSAGES.COUNTERS.SOURCE_LABEL,\n                        },\n                        target: {\n                            label: MESSAGES.COUNTERS.TARGET_LABEL,\n                        },\n                        dataSource: countersDataSource,\n                    },\n                },\n            },\n            {\n                type: 'TransferList',\n                scope: '#/properties/instances',\n                label: MESSAGES.INSTANCES.LABEL,\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                    customComponentProps: {\n                        source: {\n                            label: MESSAGES.INSTANCES.SOURCE_LABEL,\n                        },\n                        target: {\n                            label: MESSAGES.INSTANCES.TARGET_LABEL,\n                        },\n                        dataSource: instancesDataSource,\n                    },\n                },\n            },\n            {\n                type: 'Control',\n                label: MESSAGES.ADDITIONAL_HOSTS.LABEL,\n                scope: '#/properties/additionalHosts',\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                },\n            },\n            {\n                type: 'Control',\n                label: MESSAGES.POLLING_INTERVAL.LABEL,\n                scope: '#/properties/pollingInterval',\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                },\n            },\n            {\n                type: 'Label',\n                text: MESSAGES.INDEX.LABEL,\n            },\n            {\n                type: 'Select',\n                scope: '#/properties/index',\n                label: MESSAGES.INDEX.SELECT_LABEL,\n                options: {\n                    suiControlGroupProps: { ...getControlGroupLabelWidthProps() },\n                    suiComponentProps: {\n                        filter: false,\n                    },\n                },\n            },\n        ],\n    };\n};\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { $any, SplunkInstanceTypes, SplunkExperienceTypes } from '../../../app.interfaces';\nimport { ServerInfoService } from '../../services/ServerInfoService';\nimport { UserContextService } from '../../services/UserContextService';\nimport { ExperienceService } from '../../services/ExperienceService';\nimport { IFilterHOCReturnType, OS, OSList } from './filterHOCs.interfaces';\nimport { MESSAGES } from '../../../messages';\n\nconst ErrorWrapper = styled.div`\n    margin: 25px;\n`;\n\nconst ErrorView: FC<{ msg: string }> = ({ msg = 'Error loading page' }) => {\n    return <h2>{msg}</h2>;\n};\n\nexport const withRBACFilter =\n    (permissionsNeeded = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const hasPermission = UserContextService.canReadPage(permissionsNeeded);\n        const RBACFilterComp: FC<$any> = (props) => {\n            return !hasPermission ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.RBAC_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return RBACFilterComp;\n    };\n\nexport const withSplunkEnvFilter =\n    (supportedEnvs: SplunkInstanceTypes[] = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsEnv = supportedEnvs.includes(ServerInfoService.getSplunkInstanceType());\n        const SplunkEnvFilterComp: FC<$any> = (props) => {\n            return !supportsEnv ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.SPLUNK_ENV_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return SplunkEnvFilterComp;\n    };\n\nexport const withOSFilter =\n    (supportedOS: OSList = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsOS = supportedOS.includes(ServerInfoService.getOS() as OS);\n        const OSFilterComp: FC<$any> = (props) => {\n            return !supportsOS ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.OS_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return OSFilterComp;\n    };\n\nexport const withExperienceFilter =\n    (supportedExperiences: SplunkExperienceTypes[] = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsExperience = supportedExperiences.includes(ExperienceService.getExperienceType());\n        const ExperienceFilterComp: FC<$any> = (props) => {\n            return !supportsExperience ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.SPLUNK_EXPERIENCE_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return ExperienceFilterComp;\n    };\n","import { normalizeDataTestIds } from '@splunk/sui-forms-shared-utils';\nimport { remoteAppName } from '../../../constants';\n\nconst TEST_IDS = {\n    LOADING_MSG: 'LoadingMessage',\n};\n\nnormalizeDataTestIds({ remoteAppName, compName: 'LoadingMessage', testIds: TEST_IDS });\nexport default TEST_IDS;\n","import styled from 'styled-components';\nimport P from '@splunk/react-ui/Paragraph';\n\nexport const LoadingMessageWrapper = styled.div`\n    position: absolute;\n    width: 100%;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    background-color: rgba(255, 255, 255, 0.5);\n    z-index: 500;\n`;\n\nexport const LoadingMessageContainer = styled.div`\n    margin: auto;\n    display: flex;\n`;\n\nexport const Message = styled(P)`\n    margin: auto;\n    font-size: 16px;\n    margin-bottom: 4px;\n    margin-left: 2px;\n`;\n","import React, { FC } from 'react';\nimport WaitSpinner from '@splunk/react-ui/WaitSpinner';\nimport TEST_IDS from './LoadingMessage.testids';\nimport { MESSAGES } from '../../../messages';\nimport { LoadingMessageWrapper, LoadingMessageContainer, Message } from './LoadingMessage.styles';\n\nconst LoadingMessage: FC = () => {\n    return (\n        <LoadingMessageWrapper data-test-name={TEST_IDS.LOADING_MSG}>\n            <LoadingMessageContainer>\n                <WaitSpinner size=\"medium\" />\n                <Message>{MESSAGES.COMMON.LOADING_MSG}</Message>\n            </LoadingMessageContainer>\n        </LoadingMessageWrapper>\n    );\n};\n\nexport default LoadingMessage;\n"],"names":["MESSAGES","LOOKUP_HOST","LABEL","DESCRIPTION","BUTTON_LABEL","AVAILABLE_OBJECTS","COUNTERS","SOURCE_LABEL","TARGET_LABEL","INSTANCES","ADDITIONAL_HOSTS","POLLING_INTERVAL","INDEX","SELECT_LABEL","ERRORS","value","localizeMessages","TEST_IDS","CONTAINER","WAITSPINNER","ERROR_MSG","normalizeDataTestIds","remoteAppName","compName","testIds","WrapperDiv","styled","pick","enterprise","variables","prisma","ActionAreaWrapper","WaitSpinnerWrapper","defaultWinWMIPath","defaultSettingsUrl","createRESTURL","fetchWinPerfmonCollectionUrl","fetchIndexesUrl","entityAcl","app","owner","fetchDefaultSettings","async","url","entity","stringify","output_mode","response","fetch","defaultFetchInit","json","status","classes","fields","index","instances","interval","lookup_host","server","get","availableObjects","stripAvailableObjectsPrefix","lookupHost","label","counters","targetItemsList","additionalHosts","pollingInterval","Error","formatSplunkDError","fetchAvailableObjects","params","map","obj","objName","fetchCountersInstances","class","formatAvailableObject","fetchIndexes","fetchIndexesParams","defaultIndex","entry","name","compose","withOSFilter","withSplunkEnvFilter","withRBACFilter","isBootstrapping","setIsBootstrapping","useState","formData","setFormData","undefined","schema","setSchema","uiSchema","setUISchema","errorMessages","setErrorMessages","isFetchingData","setIsFetchingData","handleQueryButtonClick","refreshDataSources","dataSourcesToBeRefreshed","push","error","message","handleAvailableObjectsSelectChange","useEffect","countersInstances","defaultSettings","indexes","Promise","all","fetchWinWmiCollectionsSettings","includes","transformWildcard","type","properties","description","length","enum","required","generateSchema","countersDataSource","instancesDataSource","elements","scope","rule","getAlwaysDisableElementRule","options","suiControlGroupProps","getControlGroupLabelWidthProps","customComponentProps","inputProps","buttonProps","onClick","suiComponentProps","filter","onSelectValueChange","source","target","dataSource","text","generateUISchema","window","location","href","LISTING_PAGE_URL","Pages","renderForm","isEmpty","Errors","onRequestRemove","SUIFormRendererCompound","style","width","position","data","uischema","onSubmit","successCb","failureCb","body","fetchConfig","method","updateWinWmiCollectionsSettings","size","ErrorWrapper","ErrorView","msg","permissionsNeeded","Comp","hasPermission","UserContextService","props","supportedEnvs","supportsEnv","ServerInfoService","supportedOS","supportsOS","withExperienceFilter","supportedExperiences","supportsExperience","ExperienceService","LOADING_MSG","LoadingMessageWrapper","LoadingMessageContainer","Message","P"],"sourceRoot":""}