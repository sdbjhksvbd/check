##
## Simple XML RelaxNG Schema
##
start = (Dashboard | Form)

##
## Dashboard
##
Dashboard = (
    element dashboard {
        BaseViewAttributes
        & SearchNode*
        & Row*
        & element label { text }?
        & element description { text }?
        & element tags { text }?
        & InitEventHandler?
    }
)

BaseViewAttributes = (
    attribute refresh { xsd:integer }?
    & attribute onunloadCancelJobs { Boolean }?
    & attribute isVisible { Boolean }?
    & attribute isDashboard { Boolean }?
    # Comma separated lists of custom scripts to load
    & attribute script { text }?
    # Comma separated lists of custom stylesheets to load
    & attribute stylesheet { text }?
    # when truthy the header won't show up.
    & attribute hideChrome { Boolean }?
    # when truthy the splunk bar won't show up.
    & attribute hideSplunkBar { Boolean }?
    # when truthy the app bar (nav) won't show up.
    & attribute hideAppBar { Boolean }?
    # when truthy the title and descript won't show up.
    & attribute hideTitle { Boolean }?
    # when truthy the edit won't show up.
    & attribute hideEdit { Boolean }?
    # when truthy the export won't show up.
    & attribute hideExport { Boolean }?
    # when truthy the global fieldset will be hidden.
    & attribute hideFilters { Boolean }?
    # dashboard theme, defaults to light
    & attribute theme ( "dark" | "light" )
)

TokenDependencies = (
    attribute depends { text }?
    & attribute rejects { text }?
)

Row = (
    element row {
        attribute id { Identifier }?
        # Deprecated. Use Panel instead.
        & attribute grouping { text }?
        & TokenDependencies
        & ( Element* | Panel* )
    }
)

##
## Dashboard Panel
##
Panel = ( InlinePanel | PanelRef )

InlinePanel = (
    element panel {
        # Optional panel-level title (in addition to the element-level title)
        attribute id { Identifier }
        & element title { text }?
        & element description { text }?
        & SearchNode*
        & TokenDependencies
        # Inline panel elements
        & Element*
    }
)

PanelRef = (
    element panel {
        # Name of the referenced panel
        attribute ref { text }
        # Optionally override the app the panel definition is loaded from. By default it's loaded from the app
        # the dashboard is defined in.
        & attribute app { text }?
        & TokenDependencies
    }
)

##
## Dashboard Elements
##
Element = ( Chart | Table | Single | Map | Event | Html )

BaseElementAttributes = (
    attribute id { Identifier }?
    & TokenDependencies
)

ElementTitle = (
    element title { text }
)

##
## Searches. Deprecated. Use SearchNode instead.
##
ElementSearch = ( InlineSearch | InlineSearchTemplate | PostProcessSearch | SavedSearch )

InlineSearch = (
    element searchString { SearchString }
    & element earliestTime { RelativeTimeExpression }?
    & element latestTime { RelativeTimeExpression }?
)

InlineSearchTemplate = (
    element searchTemplate { SearchString }
    & element earliestTime { RelativeTimeExpression }?
    & element latestTime { RelativeTimeExpression }?
)

PostProcessSearch = (
    element searchPostProcess { SearchString }
)

SavedSearch = (
    element searchName { text }
)

SearchNodeInline = element search {
    attribute id { Identifier }?
    # attribute type is required for the secondary search
    & attribute type { "primary" | "annotation" }?
    # SPL search query
    & element query {text}
    # earliest time of search
    & element earliest { RelativeTimeExpression }
    # latest time of search
    & element latest { RelativeTimeExpression }
    # search sampling ratio
    & element sampleRatio { xsd:integer }?
    # periodic search refresh
    & element refresh { RelativeTimeExpression }?
    # type of periodic search refresh
    & element refreshType { "interval" | "delay" }?
    # event handlers
    & SearchEventHandler*
    & TokenDependencies
}
SearchNodeSaved = element search {
    attribute id { Identifier }?
    # attribute type is required for the secondary search
    & attribute type { "primary" | "annotation" }?
    # the name of a saved search to load
    & attribute ref { text }
    # optional app namespace to find the search
    & attribute app { text }
    # earliest time of search
    & element earliest { RelativeTimeExpression }
    # latest time of search
    & element latest { RelativeTimeExpression }
    # override cache setting
    & element cache { "scheduled" | Boolean | xsd:integer }
    # periodic search refresh
    & element refresh { RelativeTimeExpression }?
    # type of periodic search refresh
    & element refreshType { "interval" | "delay" }?
    # event handlers
    & SearchEventHandler*
    & TokenDependencies
}
SearchNodePostProcess = element search {
    attribute id { Identifier }?
    # the id of another search to post process
    & attribute base { Identifier }
    # attribute type is required for the secondary search
    & attribute type { "primary" | "annotation" }?
    # the query to alter the original search
    & element query {text}
    # event handlers
    & SearchEventHandler*
}

SearchNode = SearchNodeInline | SearchNodePostProcess | SearchNodeSaved

##
## Search Event Handlers
##

SearchCondition = (
    element condition {
        attribute match { text } ?
        & (LinkAction | SetToken | UnsetToken | EvalToken)*
    }
)

SearchProgressHandler = (
    # Execute token actions on search:progress events
    element progress {
        ( (LinkAction | SetToken | UnsetToken | EvalToken)* | SearchCondition* )?
    }
)

SearchDoneHandler = (
    # Execute token actions on search:done events
    element done {
        ( (LinkAction | SetToken | UnsetToken | EvalToken)* | SearchCondition* )?
    }
)

SearchPreviewHandler = (
    # Execute token actions when search preview data is available
    element preview {
        ( (LinkAction | SetToken | UnsetToken | EvalToken)* | SearchCondition* )?
    }
)

SearchFinalizedHandler = (
    # Execute token actions when the search is finished and data is available
    element finalized {
        ( (LinkAction | SetToken | UnsetToken | EvalToken)* | SearchCondition* )?
    }
)

SearchErrorHandler = (
    # Execute token actions on search errors
    element error {
        ( (LinkAction | SetToken | UnsetToken | EvalToken)* | SearchCondition* )?
    }
)

SearchFailHandler = (
    # Execute token actions when a search fails
    element fail {
        ( (LinkAction | SetToken | UnsetToken | EvalToken)* | SearchCondition* )?
    }
)

SearchCancelledHandler = (
    # Execute token actions when a search is cancelled
    element cancelled {
        ( (LinkAction | SetToken | UnsetToken | EvalToken)* | SearchCondition* )?
    }
)

SearchEventHandler = (
    SearchProgressHandler
    | SearchDoneHandler
    | SearchPreviewHandler
    | SearchFinalizedHandler
    | SearchErrorHandler
    | SearchFailHandler
    | SearchCancelledHandler
)

##
## Drilldown
##
Drilldown = (
    element drilldown {
        attribute target { text }?,
        ( (LinkAction | SetToken | UnsetToken | EvalToken)* | Condition* )?
    }
)

Condition = (
    element condition {
        (
            # The field attribute specifies the field to scope the actions to for this condition. If not specified, a
            # wildcard (field="*") is assumed.
            attribute field { text }
            # The match attribute is an eval expression. If it evaluates to true (boolean), then the actions in the
            # condition are executed.
            | attribute match { text }
        )?,
        ( LinkAction | SetToken | UnsetToken | EvalToken )*
    }
)

LinkAction = (
    element link {
        # DEPRECATED: the link and the series attribute, which wrap the link action into an implicit <condition>
        # are deprecated
        ( attribute field { text } | attribute series { text } )?
        # 'target' determines where drilldown results will open (set target to '_blank' to open in new window).
        & attribute target { text }?
        # 'link' value must be in one of the following formats:
            # 1.) relative path to connect to a dashboard: [path/viewname]
            # 2.) relative path to connect to a form with token: [path/viewname?form.token=$dest_value$]
            # 3.) pass earliest/latest time range: [path/viewname?form.token=$dest_value$&earliest=$earliest$&latest=$latest$]
            # 4.) URL and query argument to pass value to destination page: [URL?q=$dest_value$]
        & text
    }
)

SetToken = (
    element set {
        attribute token { TokenName }
        & attribute prefix { text }?
        & attribute suffix { text }?
        & text
    }
)

UnsetToken = (
    element unset {
        attribute token { TokenName }
    }
)

EvalToken = (
    element eval {
        attribute token { TokenName } & text
    }
)

Selection = (
    element selection {
        ( LinkAction | SetToken | UnsetToken | EvalToken )*
    }
)

##
## Dashboard Init Event Handler
##
InitEventHandler = (
    element init{
        ( (LinkAction | SetToken | UnsetToken | EvalToken)* | Condition* )?
    }
)

##
## Trellis Options
##
TrellisOption = (
    # Enable or disable the trellis feature.  Defaults to false.
    element option {
        attribute name { "trellis.enabled" },
        Boolean
    }
    # Enable or disable the trellis shared scales.  Defaults to true.
    | element option {
        attribute name { "trellis.scales.shared" },
        Boolean
    }
    # Indicates which size of facet to display.  Defaults to medium.
    | element option {
        attribute name { "trellis.size" },
        ( "small" | "medium" | "large" )
    }
    # Specifies a field to split the dataset.
    | element option {
        attribute name { "trellis.splitBy" },
        text
    }
)

##
## Chart Element
##
Chart = (
    element chart {
        BaseElementAttributes
        & ElementTitle?
        & (
             ElementSearch
             | SearchNode
         ) *
        & ( ChartOption | TrellisOption | RefreshTimeOption | RefreshDisplayOption | LinkOption )*
        & Drilldown?
        # Selection supports for "charting.chart": "area", "line", "column".
        & Selection?
    }
)

ChartOption = (
    # The height of the chart
    # Default value is 250, must be between 100 and 10000.
    element option {
        # Deprecated. Use xsd:integer instead.
        attribute name { "height" },
        text
    }
    | element option {
        attribute name { "height" },
        xsd:integer

    }
    | Charting.Chart
    | Charting.Axis
    | Charting.AxisLabels
    | Charting.GridLines
    | Charting.Legend
    | Charting.Data
    # Specifies the title of the X-Axis
    | element option {
        attribute name { "charting.axisTitleX.text" },
        text
    }
    # Specifies the title of the Y-Axis
    # It is not supported for bubble and scatter charts.
    | element option {
        attribute name { "charting.axisTitleY.text" },
        text
    }
    # Specifies the title of the second Y-Axis
    # It is not supported for bubble and scatter charts.
    | element option {
        attribute name { "charting.axisTitleY2.text" },
        text
    }
    # Indicates whether to show the title of the X-Axis. Defaults to visible.
    | element option {
        attribute name { "charting.axisTitleX.visibility" },
        ( "visible" | "collapsed" )
    }
    # Indicates whether to show the title of the Y-Axis. Defaults to visible.
    | element option {
        attribute name { "charting.axisTitleY.visibility" },
        ( "visible" | "collapsed" )
    }
    # Indicates whether to show the title of the second Y-Axis. Defaults to collapsed.
    # It applies to Area, Bar, Column, and Line charts
    | element option {
        attribute name { "charting.axisTitleY2.visibility" },
        ( "visible" | "collapsed" )
    }
    # Colors used for the series.
    # The format is a JSON array like: [0xFF0000,0xFFFF00,0x00FF00]
    | element option {
        attribute name { "charting.seriesColors" },
        text
    }
    # Colors used for background.
    | element option {
        attribute name { "charting.backgroundColor" },
        text
    }
    # Colors used for foreground.
    | element option {
        attribute name { "charting.foregroundColor" },
        text
    }
    # Colors used for font (axis labels, legends.
    | element option {
        attribute name { "charting.fontColor" },
        text
    }
    # The default used depends on your browser and the chart type being used.
    # If your browser is IE version 8 or less, the default value is 2000 objects.
    # If your browser is IE version 9 or greater, Chrome, Firefox or Safari, the default value is 20000 objects.
    # Deprecated. Use charting.chart.resultTruncationLimit instead.
    | element option {
        attribute name { "charting.resultTruncationLimit" },
        xsd:integer
    }
    # Same as "charting.resultTruncationLimit".
    | element option {
        attribute name { "charting.chart.resultTruncationLimit" },
        xsd:integer
    }
    # This is a special switch that splits a multi-series chart into separate charts
    # that are stacked from top to bottom, one for each series.
    # It applies to Area, Bar, Column, and Line charts
    # (it may produce confusing results with other chart types). Defaults to false.
    | element option {
        attribute name { "charting.layout.splitSeries" },
        Boolean
    }
    # Specifies whether to allow split series charts to have independent y-ranges. Defaults to false.
    # By default y-ranges are clamped to the same global min and max;
    # setting this option to true gives each series it's own y-range.
    # It applies to Area, Bar, Column, and Line charts
    | element option {
        attribute name { "charting.layout.splitSeries.allowIndependentYRanges" },
        Boolean
    }
    # A list of hexadecimal color values from which the range band colors are generated.
    # Colors display in the order indicated in the array.
    # For example, you can reverse the default green-yellow-red sequence by changing the
    # gaugeColors value to [0x53A051,0xF8BE34,0xDC4E41].
    # You can specify any number of colors.
    # If your gauge has more or less range intervals
    # (either specified via the search language or the rangeValues parameter)
    # than the number of rangeColors, Splunk will interpolate the colors as necessary.
    | element option {
        attribute name { "charting.gaugeColors" },
        text
    }
    # A map of hexadecimal color values to use for each field, where the map is a comma-delimited list of key/value pairs, enclosed in curly braces.
    | element option {
        attribute name { "charting.fieldColors" },
        text
    }
    # Dash style for all line series in the chart. Defaults to solid.
    # Applies for line chart.
    | element option {
        attribute name { "charting.lineDashStyle" },
        ( "solid" | "shortDash" | "shortDot" | "shortDashDot" | "shortDashDotDot" | "dot" | "dash" | "longDash" | "dashDot" | "longDashDot" | "longDashDotDot" )
    }
    # A map of dash styles to use for each field, where the map is a JSON object, key = field name and value is one of the allowed values from charting.lineDashStyle.
    | element option {
        attribute name { "charting.fieldDashStyles" },
        text
    }
    # Line width for all line series in the chart. Defaults to 2 (pixels).
    # Applies for line chart.
    | element option {
        attribute name { "charting.lineWidth" },
        ( xsd:integer | xsd:float )
    }
    # A map of category to hexadecimal color values.
    | element option {
        attribute name{ "charting.annotation.categoryColors" },
        text
    }
)

Charting.Data = (
    # The number of results to retrieve. Set 0 to get all results.
    element option {
        attribute name { "charting.data.count" },
        xsd:integer
    }
    # The order in which to apply the fieldShowList and fieldHideList filters. Defaults to hide_show.
    # It is not supported for bubble and scatter charts.
    | element option {
        attribute name { "charting.data.fieldListMode" },
        ( "show_hide" | "hide_show" )
    }
    # The list of fields to explicitly show in the results. JSON array format
    # It is not supported for bubble and scatter charts.
    | element option {
        attribute name { "charting.data.fieldShowList" },
        text
    }
    # The list of fields to explicitly hide from the results
    # It is not supported for bubble and scatter charts.
    | element option {
        attribute name { "charting.data.fieldHideList" },
        text
    }
)

Charting.Axis = (
    # ------------------------Numeric Axis ---------------------------- #
    # Enables a second Y-Axis for chart overlays. Defaults to false.
    element option {
        attribute name { "charting.axisY2.enabled" },
        Boolean
    }
    # Specify a field or a space/comma-delimited list of fields that should be mapped to the second Y-Axis.
    | element option {
        attribute name { "charting.axisY2.fields" },
        text
    }
    # Enables the abbreviations of large Y with the closest SI prefix.
    | element option {
        attribute name { "charting.axisY.abbreviation" },
        ( "none" | "auto" )
    }
    # Enables the abbreviations of large Y2 with the closest SI prefix.
    # It is not supported for bubble and scatter charts.
    | element option {
        attribute name { "charting.axisY2.abbreviation" },
        ( "none" | "auto" )
    }
    # Enables the abbreviations of large X with the closest SI prefix.
    | element option {
        attribute name { "charting.axisX.abbreviation" },
        ( "none" | "auto" )
    }
    # For numeric axes, this represents the type of scale that Splunk applies to a numerical axis.
    # Applies for line, area, column and bar charts.
    # Use a linear or logarithmic scale for a Y-axis. Defaults to linear.
    | element option {
        attribute name { "charting.axisY.scale" },
        ( "linear" | "log" )
    }
    # Second Y-Axis can set its own scale or inherit its scale from the first Y-axis. Defaults to inherit.
    # Applies for line, area, column and bar charts.
    | element option {
        attribute name { "charting.axisY2.scale" },
        ( "inherit" | "linear" | "log" )
    }
    # Sets the minimum number for the visible Y-Axis range.
    | element option {
        attribute name { "charting.axisY.minimumNumber" },
        ( xsd:integer | "auto" )
    }
    # Sets the minimum number for the visible second Y-Axis range.
    | element option {
        attribute name { "charting.axisY2.minimumNumber" },
        ( xsd:integer | "auto" )
    }
    # Sets the maximum number for the visible Y-Axis range.
    | element option {
        attribute name { "charting.axisY.maximumNumber" },
        ( xsd:integer | "auto" )
    }
    # Sets the maximum number for the visible second Y-Axis range.
    | element option {
        attribute name { "charting.axisY2.maximumNumber" },
        ( xsd:integer | "auto" )
    }
    # For numeric axes, this represents the type of scale that Splunk applies to a numerical axis.
    # Use a linear or logarithmic scale for a X-axis. Defaults to linear.
    # Applies for scatter and bubble charts.
    | element option {
        attribute name { "charting.axisX.scale" },
        ( "linear" | "log" )
    }
    # Sets the minimum number for the visible X-Axis range.
    | element option {
        attribute name { "charting.axisX.minimumNumber" },
        ( xsd:integer | "auto" )
    }
    # Sets the maximum number for the visible X-Axis range.
    | element option {
        attribute name { "charting.axisX.maximumNumber" },
        ( xsd:integer | "auto" )
    }
    # Determines whether chart's X-Axis range includes zero. Defaults to false.
    | element option {
        attribute name { "charting.axisX.includeZero" },
        Boolean
    }
    # Determines whether chart's Y-Axis range includes zero. Defaults to false.
    | element option {
        attribute name { "charting.axisY.includeZero" },
        Boolean
    }
    # Determines whether chart's second Y-Axis range includes zero. Defaults to false.
    | element option {
        attribute name { "charting.axisY2.includeZero" },
        Boolean
    }
)

Charting.AxisLabels = (
    # Controls the visibility of the major tick mark labels. Valid values are auto (automatically shows or hides
    # individual major labels to maintain readability in the available space without overlapping), show (forces all
    # major labels to be visible even when there isn't enough space to display them without overlapping), and hide
    # (hides all major labels). Set majorLabelVisibility to show if you always want labels to appear, even when a large
    # number of results are displayed. Defaults to auto.
    element option {
        attribute name { "charting.axisLabelsX.majorLabelVisibility" },
        ( "auto" | "show" | "hide" )
    }
    # Determines the rotation of the axis label in degrees. Defaults to 0.
    | element option {
        attribute name { "charting.axisLabelsX.majorLabelStyle.rotation" },
        ( "-90" | "-45" | "0" | "45" | "90" )
    }
    # Determines whether the axis label is ellipsized to the tick spacing. Defaults to ellipsisNone.
    | element option {
        attribute name { "charting.axisLabelsX.majorLabelStyle.overflowMode" },
        ( "ellipsisMiddle" | "ellipsisNone")
    }
    # -------------------------------- Numeric Axis Labels --------------------------------------- #
    # Indicates whether the major unit should be rounded to the nearest integer. Defaults to false.
    | element option {
        attribute name { "charting.axisLabelsX.integerUnits" },
        Boolean
    }
    # Controls the visibility of the major tick mark labels. Valid values are auto (automatically shows or hides
    # individual major labels to maintain readability in the available space without overlapping),
    # show (forces all major labels to be visible even when there isn't enough space to display them without overlapping),
    # and hide (hides all major labels).
    # Set majorLabelVisibility to show if you always want labels to appear,
    # even when a large number of results are displayed. Defaults to auto.
    # Deprecated.
    | element option {
        attribute name { "charting.axisLabelsY.majorLabelVisibility" },
        ( "auto" | "show" | "hide" )
    }
    # It is not supported for bubble and scatter charts.
    | element option {
        attribute name { "charting.axisLabelsY2.majorLabelVisibility" },
        ( "auto" | "show" | "hide" )
    }
    # -------------------------------- Numeric Axis Labels --------------------------------------- #
    # The spacing unit at which to place major tick marks along the numeric axis.
    # By default, this value is automatically calculated based on the scale of the related axis.
    | element option {
        attribute name { "charting.axisLabelsY.majorUnit" },
        ( xsd:integer | "auto" )
    }
    # It is not supported for bubble and scatter charts.
    | element option {
        attribute name { "charting.axisLabelsY2.majorUnit" },
        ( xsd:integer | "auto" )
    }
    # -------------------------------- Numeric Axis Labels --------------------------------------- #
    # The spacing unit at which to place major tick marks along the numeric axis.
    # By default, this value is automatically calculated based on the scale of the related axis.
    | element option {
        attribute name { "charting.axisLabelsX.majorUnit" },
        ( xsd:integer | "auto" )
    }
    # Determines whether or not X-Axis line is visible.
    # Defaults to hide for numeric axes and show for all other axes.
    | element option {
        attribute name { "charting.axisLabelsX.axisVisibility" },
        ( "show" | "hide" )
    }
    # Determines whether or not Y-Axis line is visible.
    # Defaults to hide for numeric axes and show for all other axes.
    | element option {
        attribute name { "charting.axisLabelsY.axisVisibility" },
        ( "show" | "hide" )
    }
    # Determines whether or not Y2-Axis line is visible.
    # It applies to Area, Bar, Column, and Line charts
    # Defaults to hide for numeric axes and show for all other axes.
    | element option {
        attribute name { "charting.axisLabelsY2.axisVisibility" },
        ( "show" | "hide" )
    }
    # Determines whether major tick marks on the X-Axis are visible.
    # Auto hides labels for numeric axes and only shows a major tick if the corresponding label is visible for all other axes.
    # Show always shows all major ticks and hide hides all major ticks. Defaults to auto.
    | element option {
        attribute name { "charting.axisLabelsX.majorTickVisibility" },
        ( "auto" | "show" | "hide" )
    }
    # Determines whether major tick marks on the Y-Axis are visible.
    # Auto hides labels for numeric axes and only shows a major tick if the corresponding label is visible for all other axes.
    # Show always shows all major ticks and hide hides all major ticks. Defaults to auto.
    | element option {
        attribute name { "charting.axisLabelsY.majorTickVisibility" },
        ( "auto" | "show" | "hide" )
    }
    # Determines whether major tick marks on the Y2-axis are visible.
    # Auto hides labels for numeric axes and only shows a major tick if the corresponding label is visible for all other axes.
    # Show always shows all major ticks and hide hides all major ticks. Defaults to auto.
    # It applies to Area, Bar, Column, and Line charts
    | element option {
        attribute name { "charting.axisLabelsY2.majorTickVisibility" },
        ( "auto" | "show" | "hide" )
    }
    # Determines whether minor tick marks on the X-axis are visible, where auto only shows a minor tick if the corresponding label is visible.
    # Show always shows all minor ticks and hide hides all minor ticks. Defaults to auto.
    | element option {
        attribute name { "charting.axisLabelsX.minorTickVisibility" },
        ( "auto" | "show" | "hide" )
    }
    # Determines whether minor tick marks on the Y-Axis are visible, where auto only shows a minor tick if the corresponding label is visible
    # Show always shows all minor ticks and hide hides all minor ticks. Defaults to auto.
    | element option {
        attribute name { "charting.axisLabelsY.minorTickVisibility" },
        ( "auto" | "show" | "hide" )
    }
    # Determines whether minor tick marks on the Y2-axis are visible.
    # Auto hides labels for numeric axes and only shows a major tick if the corresponding label is visible for all other axes.
    # Show always shows all major ticks and hide hides all major ticks. Defaults to auto.
    # It applies to Area, Bar, Column, and Line charts
    | element option {
        attribute name { "charting.axisLabelsY2.minorTickVisibility" },
        ( "auto" | "show" | "hide" )
    }
    # Determines the size in pixels of major tick marks on the X-Axis. Defaults to 6.
    | element option {
        attribute name { "charting.axisLabelsX.majorTickSize" },
        xsd:integer
    }
    # Deprecated.
    # Determines the size in pixels of major tick marks on the Y-Axis. Defaults to 6.
    | element option {
        attribute name { "charting.axisLabelsY.majorTickSize" },
        xsd:integer
    }
    # Determines the size in pixels of major tick marks on the second Y-Axis. Defaults to 6.
    # It is not supported for bubble and scatter charts.
    | element option {
        attribute name { "charting.axisLabelsY2.majorTickSize" },
        xsd:integer
    }
    # Determines the size in pixels of minor tick marks on the X-Axis. Defaults to 6.
    # It is not supported for bubble and scatter charts.
    | element option {
        attribute name { "charting.axisLabelsX.minorTickSize" },
        xsd:integer
    }
    # Determines the size in pixels of minor tick marks on the Y-Axis. Defaults to 6.
    | element option {
        attribute name { "charting.axisLabelsY.minorTickSize" },
        xsd:integer
    }
    # Determines the size in pixels of minor tick marks on the second Y-Axis. Defaults to 6.
    # It is not supported for bubble and scatter charts.
    | element option {
        attribute name { "charting.axisLabelsY2.minorTickSize" },
        xsd:integer
    }
    # Determines the visibility of major tick mark labels on the X-axis. Defaults to auto.
    | element option {
        attribute name { "charting.axisLabelsX.majorLabelVisibility" },
        ( "auto" | "show" | "hide" )
    }
    # Deprecated.
    # Determines the visibility of major tick mark labels on the Y-axis. Defaults to auto.
    | element option {
        attribute name { "charting.axisLabelsY.majorLabelVisibility" },
        ( "auto" | "show" | "hide" )
    }
    # Determines the visibility of major tick mark labels on the second Y-axis. Defaults to auto.
    | element option {
        attribute name { "charting.axisLabelsY2.majorLabelVisibility" },
        ( "auto" | "show" | "hide" )
    }
    # Determines whether the Y-Axis should be extended to snap to whole major tick marks. Defaults to true.
    | element option {
        attribute name { "charting.axisLabelsY.extendsAxisRange" },
        Boolean
    }
    # Determines whether the major unit of Y-Axis is rounded to the nearest integer. Defaults to false.
    | element option {
        attribute name { "charting.axisLabelsY.integerUnits" },
        Boolean
    }
    # Determines whether the major unit of second Y-Axis is rounded to the nearest integer. Defaults to false.
    # It applies to Bar and Line charts
    | element option {
        attribute name { "charting.axisLabelsY2.integerUnits" },
        Boolean
    }
    # Extend the axis range of the X-Axis to show the first tickmark out of range.
    # Only applies for numeric axis values. Defaults to true.
    | element option {
        attribute name { "charting.axisLabelsX.extendsAxisRange" },
        ( Boolean )
    }
)

Charting.GridLines = (
    # Determines whether major grid lines on X-Axis are visible. Defaults to false.
    # It is not supported for bubble and scatter charts.
    element option {
        attribute name { "charting.gridLinesX.showMajorLines" },
        Boolean
    }
    # Determines whether major grid lines on Y-Axis are visible. Defaults to true.
    | element option {
        attribute name { "charting.gridLinesY.showMajorLines" },
        Boolean
    }
    # Determines whether major grid lines on the second Y-Axis are visible. Defaults to false.
    # It is not supported for bubble and scatter charts.
    | element option {
        attribute name { "charting.gridLinesY2.showMajorLines" },
        Boolean
    }
    # Determines whether minor grid lines are visible on the X-axis. Defaults to false.
    # It is not supported for bubble and scatter charts.
    | element option {
        attribute name { "charting.gridLinesX.showMinorLines" },
        Boolean
    }
    # Determines whether minor grid lines are visible on the Y-axis. Defaults to false.
    | element option {
        attribute name { "charting.gridLinesY.showMinorLines" },
        Boolean
    }
    # Determines whether minor grid lines are visible on the second Y-Axis. Defaults to false.
    | element option {
        attribute name { "charting.gridLinesY2.showMinorLines" },
        Boolean
    }
)

Charting.Legend = (
    # Determine the visual and behavior of the chart
    # It applies to Area and Line charts
    element option {
        attribute name { "charting.legend.mode" },
        ("standard" | "seriesCompare")
    }
    # A list of labels with which to pre-populate the legend.
    | element option {
        attribute name { "charting.legend.labels" },
        text
    }
    # Location of legend on the panel. Defaults to right.
    | element option {
        attribute name { "charting.legend.placement" },
        ("top" | "left" | "bottom" | "right" | "none")
    }
    # Determines how to display labels of legend that overflow layout bounds by replacing elided text with an ellipsis (...).
    # Defaults to ellipsisMiddle.
    | element option {
        attribute name { "charting.legend.labelStyle.overflowMode" },
        ("ellipsisEnd" | "ellipsisMiddle" | "ellipsisStart" | "ellipsisNone")
    }
    # If set to "null" or empty, disables color synchronization of the chart
    # (i.e. the same chart legend value is by default the same color across charts,
    # but any charts with masterLegend set to "null" does not maintain those same chart legend colors)
    | element option {
        attribute name { "charting.legend.masterLegend" },
        ( "null" )
    }
)

Charting.Chart = (
    # Set the chart type. Defaults to column.
    element option {
        attribute name { "charting.chart" },
        ("area" | "bar" | "column" | "fillerGauge" | "line" | "markerGauge" | "pie" | "radialGauge" | "scatter" | "bubble")
    }
    # Enable or disable drilldown for the chart. Defaults to all.
    | element option {
        attribute name { "charting.drilldown" },
        ("all" | "none")
    }
    # Indicates whether or not lines should be painted in area charts. Defaults to true.
    | element option {
        attribute name { "charting.chart.showLines" },
        Boolean
    }
    # Used to set up stacked for area, bar, and column charts. Defaults to default.
    | element option {
        attribute name { "charting.chart.stackMode" },
        ("default" | "stacked" | "stacked100")
    }
    # Determines how the area and line charts handles null values. Defaults to gaps.
    | element option {
        attribute name { "charting.chart.nullValueMode" },
        ("gaps" | "zero" | "connect")
    }
    # Specifies, in pixels, the spacing between bars in a bar chart.
    | element option {
        attribute name { "charting.chart.barSpacing" },
        xsd:integer
    }
    # Specifies, in pixels, the spacing between columns in a column chart.
    | element option {
        attribute name { "charting.chart.columnSpacing" },
        xsd:integer
    }
    # Enables the choice between two basic gauge appearances.
    # The shiny style is a graphically stylized version of the gauge with chrome, shading, and so on
    # so that it mimics those in the real world.
    # The minimal style is a stripped-down "just the basics" version of the gauge.
    # Defaults to shiny.
    | element option {
        attribute name { "charting.chart.style" },
        ("minimal" | "shiny")
    }
    # A numeric array that represents the overall numerical range represented by the gauge, and the relative size of the
    # color-coded subranges within that overall range. For example, a range of [0,30,70,100] would indicate that the
    # gauge starts at zero, ends at 100, and has three subranges that are each identified by another filler color. If
    # the search returns a value of 71, the filler rises to that value on the gauge and takes on the color assigned to
    # the top range (71-100).
    | element option {
        attribute name { "charting.chart.rangeValues" },
        text
    }
    # Determines whether the pie chart or gauge should display labels. Defaults to true.
    | element option {
        attribute name { "charting.chart.showLabels" },
        ("true" | "false")
    }
    # Determines whether the bar, line, area or column charts should display labels or display only the min and max point's label.
    # Defaults to none.
    | element option {
        attribute name { "charting.chart.showDataLabels" },
        ("all" | "none" | "minmax")
    }
    # Determines whether the gauge should show its value. Defaults to true for radialGauge and fillerGauge, defaults to false for markerGauge.
    | element option {
        attribute name { "charting.chart.showValue" },
        Boolean
    }
    # Indicates whether or not markers should be painted in line chart. Defaults to false
    | element option {
        attribute name { "charting.chart.showMarkers" },
        Boolean
    }
    # Determines the scatter chart's marker size. Defaults to 4.
    | element option {
        attribute name { "charting.chart.markerSize" },
        xsd:integer
    }
    # Determines whether the gauge uses percentage range. Defaults to false.
    | element option {
        attribute name { "charting.chart.usePercentageRange" },
        Boolean
    }
    # Determines whether the gauge uses percentage value. Defaults to false.
    | element option {
        attribute name { "charting.chart.usePercentageValue" },
        Boolean
    }
    # Determines the radial gauge's range start angle. Defaults to 45.
    | element option {
        attribute name { "charting.chart.rangeStartAngle" },
        xsd:integer
    }
    # Determines the radial gauge's range arc angle. Defaults to 270.
    | element option {
        attribute name { "charting.chart.rangeArcAngle" },
        xsd:integer
    }
    # Determines whether the gauge shows a color band for radial and marker gauges. Defaults to true.
    | element option {
        attribute name { "charting.chart.showRangeBand" },
        Boolean
    }
    # Determines the gauge's major unit
    | element option {
        attribute name { "charting.chart.majorUnit" },
        xsd:integer
    }
    # Determines whether the gauge shows major ticks. Defaults to true.
    | element option {
        attribute name { "charting.chart.showMajorTicks" },
        Boolean
    }
    # Determines whether the gauge shows minor ticks.
    # Defaults to false for radial gauge and true for filler and marker gauges.
    | element option {
        attribute name { "charting.chart.showMinorTicks" },
        Boolean
    }
    # Determines the markerGauge or fillerGauge orientation. Defaults to y.
    | element option {
        attribute name { "charting.chart.orientation" },
        ( "x" | "y" )
    }
    # Determines in pixels the spacing between clustered series in column and bar charts
    | element option {
        attribute name { "charting.chart.seriesSpacing" },
        xsd:integer
    }
    # Determines the pie chart's threshold at which smaller slices collapse into a consolidated slice.
    # Valid values are between 0 (no collapsing) and 1 (all slices are collapsed into a single pie).
    # Defaults to 0.01, which collapses slices smaller than 1% of the whole pie.
    | element option {
        attribute name { "charting.chart.sliceCollapsingThreshold" },
        ( xsd:integer | xsd:float )
    }
    # Determines the pie chart's label for the consolidated slice. Defaults to Other.
    | element option {
        attribute name { "charting.chart.sliceCollapsingLabel" },
        text
    }
    # Determines whether to display percentage values with the labels. Defaults to false.
    | element option {
        attribute name { "charting.chart.showPercent" },
        Boolean
    }
    # Specify a field or a space/comma-delimited list of fields that should be overlaid.
    | element option {
        attribute name { "charting.chart.overlayFields" },
        text
    }
    # The opacity of the filled region in an area chart.
    # Values can range from 0 (transparent) to 1 (opaque). Defaults to 0.75.
    | element option {
        attribute name { "charting.areaFillOpacity" },
        ( xsd:integer | xsd:float )
    }
    # Determines the maximum size of each bubble. Defaults to 50.
    | element option {
        attribute name { "charting.chart.bubbleMaximumSize" },
        xsd:integer
    }
    # Determines the minimum size of each bubble. Defaults to 10.
    | element option {
        attribute name { "charting.chart.bubbleMinimumSize" },
        xsd:integer
    }
    # Determines whether bubble size is set by area or diameter. Defaults to area.
    | element option {
        attribute name { "charting.chart.bubbleSizeBy" },
        ( "area" | "diameter" )
    }
)

##
## Table Element
##
Table = (
    element table {
        BaseElementAttributes
        & ElementTitle?
        & (
             ElementSearch
             | SearchNode
         ) ?
        & (TableOption | RefreshTimeOption | RefreshDisplayOption | LinkOption | AnyOption)*
        & ElementFieldList?
        & TableFormat*
        & Drilldown?
    }
)

TableOption = (
    # Number of rows to display. Defaults to 10.
    element option {
        attribute name { "count" },
        xsd:integer
    }
    # Enable or disable the row numbers column in the results table. Defaults to false.
    | element option {
        attribute name { "rowNumbers" },
        Boolean
    }
    # Enable or disable wrapping of text in the results table. Defaults to true.
    | element option {
        attribute name { "wrap" },
        Boolean
    }
    # Indicates which type of overlay to display. Defaults to none.
    | element option {
        attribute name { "dataOverlayMode" },
        ("heatmap" | "highlow" | "none")
    }
    # Enable the paginator. Defaults to true.
    | element option {
        attribute name { "showPager" },
        Boolean
    }
    # Enables drilldown on row or cell level, or disables drilldown. Defaults to cell.
    | element option {
        attribute name { "drilldown" },
        ( "cell" | "row" | "none" )
    }
    # Deprecated: the list of fields to display in the table. Use the <fields> element instead.
    | element option {
        attribute name { "fields" },
        text
    }
    # Enable or disable the totals summary row in the results table. Defaults to false.
    | element option {
        attribute name { "totalsRow" },
        Boolean
    }
    # Enable or disable the percentages summary row in the results table. Defaults to false.
    | element option {
        attribute name { "percentagesRow" },
        Boolean
    }
)

TableFormat = (
    # {formatter}.field: Optional. A single field name (corresponding to a table column) to apply the formatter to.
    # If no field or fields option is given, the formatter will apply to the whole table.
    # {formatter}.fields: Optional. A list of field names (corresponding to table columns) to apply the formatter to.
    # [<string>,...,<string>]
    element format {
        attribute type { "sparkline" }
        & ( attribute field { text } | attribute fields {text} )
        & SparklineFormatOptions*
    }
    | element format {
        attribute type {"color"}
        & ( attribute field { text } | attribute fields {text} )
        & ColorPaletteOptions
        & ColorScaleOptions?
        & FlattenedColorOptions*
    }
    | element format {
        attribute type { "number" }
        & ( attribute field { text } | attribute fields {text} )
        & NumberFormatOptions*
    }
)

# Optional. The scale type to use for interpreting data.
ColorScaleOptions = (
    # linear: Maps numeric data on a linear scale.
    element scale {
        attribute type { "linear" }
    }
    # log: Maps numeric data on a logarithmic scale.
    | element scale {
        attribute type { "log" }
    }
    # sharedCategory: Maps string data on an ordinal scale that is shared across all visualizations on a page.
    | element scale {
        attribute type { "sharedCategory" }
    }
    # threshold: Distributes numeric data into a fixed number of 'bins' as specified by the 'thresholds' attribute.
    | element scale {
        attribute type { "threshold" },
        # [{Number},...,{Number}] Required.
        # Specifies the threshold 'boundaries' that define bins (ex: [10,35,70,200] defines 5 bins between the given boundaries).
        # All values less than the first threshold are put in the first bin.
        # All values greater than or equal to the last threshold are put in the last bin.
        # The threshold values should be any finite number (floating point supported) and should be listed in ascending order.
        # Values not in ascending order will be ignored.
        text

    }
    # category: Maps string data on an ordinal scale.
    | element scale {
        attribute type { "category" },
        # [{String},...,{String}] Optional.
        # Allows manually pre-populating the scale with a list of categories
        # (as opposed to automatically extracting all categories from the data).
        # Additional categories that occur in the data will be added after the specified categories.
        text
    }
    # Maps numeric data on a continuous range based on a minimum, midpoint, and maximum value.
    | element scale {
        attribute type { "minMidMax" }

        # minType/midType/maxType: Optional. Determine how to interpret the minValue/midValue/maxValue attribute.
        # "number" interprets the value as-is,
        # "percent" interprets the value as a percentage of the range of data,
        # "percentile" interprets the value as a percentage of the distribution of data.
        # The default value is "number".
        & attribute minType { "number" | "percent" | "percentile" }
        & attribute midType { "number" | "percent" | "percentile" }
        & attribute maxType { "number" | "percent" | "percentile" }

        # minValue/midValue/maxValue: Optional. The value of the minimum/midpoint/maximum of the range.
        # When the corresponding type is "number", this can be any valid floating point number.
        # When the corresponding type is "percent" or "percentile", this should be a number between 0 and 100.
        # The default value is NaN, which indicates to use the lowest value from the data.
        & attribute minValue { xsd:integer | xsd:float }
        # The default value is NaN, which indicates to use a value halfway between the start and end of the range.
        & attribute midValue { xsd:integer | xsd:float }
        # The default value is NaN, which indicates to use the highest value from the data.
        & attribute maxValue { xsd:integer | xsd:float }
    }
)

# Required. The color palette type to use for generating colors.
ColorPaletteOptions = (
    # Generates colors based on an dashboard eval expression
    element colorPalette {
        attribute type { "expression" },
        # Contains the eval expression
        text
    }
    # Specifies a map of string values to colors.
    | element colorPalette {
        attribute type { "map" },
        # A map of value:color pairs
        text
    }
    # A fixed list of predefined colors that are shared across all visualizations on a page.
    | element colorPalette {
        attribute type { "sharedList" }
    }
    # Specifies a list of colors.
    | element colorPalette {
        (attribute type { "list" }
        # interpolate: Optional. Whether to generate a smooth gradient of colors by interpolating adjacent colors from the given list.
        # The default value is false.
        & attribute interpolate { Boolean }?),
        # Required. The list of colors that define the palette.
        text
    }
    # Specifies a map of string values to colors.
    | element colorPalette {
        attribute type { "minMidMax" }
        # Optional. The color to start the gradient. The default value is #00CC00.
        & attribute minColor {text}
        # Optional. An optional color at the middle of the gradient. The default value is none.
        & attribute midColor {text}
        # Optional. The color to end the gradient. The default value is #CC0000.
        & attribute maxColor {text}
    }
)

FlattenedColorOptions = (
    # Flatten way to define color
    # The scale type to use for interpreting data.
    element option {
        attribute name { "scale" },
        ( "threshold" | "sharedCategory" | "category" | "linear" | "log" | "minMidMax")
    }
    # category: Maps string data on an ordinal scale.
    | element option {
        attribute name { "scale.categories" },
        # [{String},...,{String}] Optional.
        # Allows manually pre-populating the scale with a list of categories
        # (as opposed to automatically extracting all categories from the data).
        # Additional categories that occur in the data will be added after the specified categories.
        text
    }
    # Determine how to interpret the maxValue attribute.
    | element option {
        attribute name { "scale.maxType" },
        text
    }
    # The value of the maximum of the range.
    | element option {
        attribute name { "scale.maxValue" },
        text
    }
    # Determine how to interpret the midValue attribute.
    | element option {
        attribute name { "scale.midType" },
        text
    }
    # The value of the midpoint of the range.
    | element option {
        attribute name { "scale.midValue" },
        text
    }
    # Determine how to interpret the minValue attribute.
    | element option {
        attribute name { "scale.minType" },
        text
    }
    # The value of the minimum of the range.
    | element option {
        attribute name { "scale.minValue" },
        text
    }
    # threshold: Distributes numeric data into a fixed number of 'bins' as specified by the 'thresholds' attribute.
    | element option {
        attribute name { "scale.thresholds" },
        # [{Number},...,{Number}] Required.
        # Specifies the threshold 'boundaries' that define bins (ex: [10,35,70,200] defines 5 bins between the given boundaries).
        # All values less than the first threshold are put in the first bin.
        # All values greater than or equal to the last threshold are put in the last bin.
        # The threshold values should be any finite number (floating point supported) and should be listed in ascending order.
        # Values not in ascending order will be ignored.
        text
    }
    # The color palette type to use for generating colors.
    | element option {
        attribute name { "colorPalette" },
        ( "expression" | "list" | "map" | "minMidMax" | "sharedList" )
    }
    # the eval expression of color palette
    | element option {
        attribute name { "colorPalette.rule" },
        text
    }
    # Specifies a map of string values to colors.
    | element option {
        attribute name { "colorPalette.colors" },
        text
    }
    # Whether to generate a smooth gradient of colors by interpolating adjacent colors from the given list.
    | element option {
        attribute name { "colorPalette.interpolate" },
        # The default value is false.
        Boolean
    }
    # The color to start the gradient. The default value is #00CC00.
    | element option {
        attribute name { "colorPalette.minColor" },
        text
    }
    # An optional color at the middle of the gradient. The default value is none.
    | element option {
        attribute name { "colorPalette.midColor" },
        text
    }
    # The color to end the gradient. The default value is #CC0000.
    | element option {
        attribute name { "colorPalette.maxColor" },
        text
    }
)

NumberFormatOptions = (
    # Optional. The number of decimal places to format to. Valid values are integers between 0 and 20.
    # The default value is 2.
    element option {
        attribute name { "precision" },
        xsd:integer
    }
    # Optional. Whether to insert commas (or equivalent, depending on language/region) between every three digits.
    # The default value is true.
    | element option {
        attribute name { "useThousandSeparators" },
        Boolean
    }
    # Optional. A unit label to place before or after the value.
    # The default value is none.
    | element option {
        attribute name { "unit" },
        text
    }
    # Optional. Where to place the unit label.
    # The default value is "after".
    | element option {
        attribute name {"unitPosition"}, ( "before" | "after" )
    }
)

SparklineFormatOptions = (
    # === Common Options ===
    # Specifies the type of sparkline. Defaults to line.
    element option {
        attribute name { "type" },
        ("line" | "bar" | "tristate" | "discrete" | "bullet" | "pie" | "pie" | "box")
    }
    # Width of the chart. Defaults to auto. May be any valid css width - 1.5em, 20px, etc.
    # Applies for line, box, discrete, bullet.
    | element option {
        attribute name { "width" },
        text
    }
    # Height of the chart. Defaults to auto. Applies for line, box, pie, bar, bullet, tristate, tristate.
    | element option {
        attribute name { "height" },
        # Deprecated. Use xsd:integer instead.
        text
    }
    | element option {
        attribute name { "height" },
        xsd:integer
    }
    # Used by line and discrete charts to specify the color of the line drawn as a CSS values string.
    # Applies for line and discrete.
    | element option {
        attribute name { "lineColor" },
        text
    }
    # Specify the color used to fill the area under the graph as a CSS value.
    # Applies for line, bar, tristate and discrete.
    | element option {
        attribute name { "fillColor" },
        text
    }
    # Specify the minimum value to use for the range of Y values of the chart.
    | element option {
        attribute name { "chartRangeMin" },
        text
    }
    # Specify the maximum value to use for the range of Y values of the chart.
    | element option {
        attribute name { "chartRangeMax" },
        text
    }
    # If true then don't erase any existing chart attached to the tag, but draw another chart over the top.
    # Note that width and height are ignored if an existing chart is detected.
    # Note: You'll usually want to lock the axis on both charts using chartRangeMin and chartRangeMax if you want the same value on each chart to occupy the same point.
    | element option {
        attribute name { "composite" },
        text
    }
    # If true then options can be specified as attributes on each tag to be transformed into a sparkline, as well as passed to the sparkline() function. See also tagOptionPrefix
    | element option {
        attribute name { "enableTagOptions" },
        text
    }
    # String that each option passed as an attribute on a tag must begin with. Defaults to spark.
    | element option {
        attribute name { "tagOptionPrefix" },
        text
    }
    # The name of the tag attribute to fetch values from, if present. Defaults to values.
    | element option {
        attribute name { "tagValuesAttribute" },
        text
    }
    # Set to true to disable checking for hidden sparklines.
    # This can be beneficial if you know you'll never attempt to draw a sparkline into a hidden parent element
    # as it avoids a browser reflow for the test, increasing rendering performance.
    | element option {
        attribute name { "disableHiddenCheck" },
        text
    }
    # === Line Charts ===
    # Defaults to 3 pixels of width for each value in the chart.
    | element option {
        attribute name { "defaultPixelsPerValue" },
        text
    }
    # The CSS color of the final value marker. Set to false or an empty string to hide it.
    | element option {
        attribute name { "spotColor" },
        text
    }
    # The CSS color of the marker displayed for the mimum value.
    | element option {
        attribute name { "minSpotColor" },
        text
    }
    # The CSS color of the marker displayed for the maximum value.
    | element option {
        attribute name { "maxSpotColor" },
        text
    }
    # Radius of all spot markers.
    | element option {
        attribute name { "spotRadius" },
        text
    }
    # Specifies which points to draw spots on, and with which color. Accepts a range.
    # For example, to render green spots on all values less than 50 and red on values higher use {':49': 'green, '50:': 'red'}.
    | element option {
        attribute name { "valueSpots" },
        AnyOption*
    }
    # Specifies a color for the spot that appears on a value when moused over.
    | element option {
        attribute name { "highlightSpotColor" },
        text
    }
    # Specifies a color for the vertical line that appears through a value when moused over.
    | element option {
        attribute name { "highlightLineColor" },
        text
    }
    # Specify al line width.
    | element option {
        attribute name { "lineWidth" },
        text
    }
    # Specify threshold values between which to draw a bar to denote the "normal" or expected range of values.
    # For example the green bar here 80,85,84,88,98,114,116,104,95,85,84 might denote a normal operating temperature range.
    | element option {
        attribute name { "normalRangeMin, normalRangeMax" },
        text
    }
    # By default the normal range is drawn behind the fill area of the chart.
    | element option {
        attribute name { "drawNormalOnTop" },
        text
    }
    # See below
    | element option {
        attribute name { "xvalues" },
        text
    }
    # If true then the y values supplied to plot will be clipped to fall between chartRangeMin and chartRangeMax.
    # By default chartRangeMin/Max just ensure that the chart spans at least that range of values, but does not constrain it.
    | element option {
        attribute name { "chartRangeClip" },
        text
    }
    # Specifies the minimum value to use for the X value of the chart.
    | element option {
        attribute name { "chartRangeMinX" },
        text
    }
    # Specifies the maximum value to use for the X value of the chart.
    | element option {
        attribute name { "chartRangeMaxX" },
        text
    }
    # === Bar Charts ===
    # CSS color used for positive values.
    | element option {
        attribute name { "barColor" },
        text
    }
    # CSS color used for negative values.
    | element option {
        attribute name { "negBarColor" },
        text
    }
    # CSS color used for values equal to zero.
    | element option {
        attribute name { "zeroColor" },
        text
    }
    # CSS color used for values equal to null.
    # By default null values are omitted entirely, but setting this adds a thin marker for the entry.
    # This can be useful if your chart is pretty sparse; perhaps try setting it to a light grey or something equally unobtrusive.
    | element option {
        attribute name { "nullColor" },
        text
    }
    # Width of each bar.
    | element option {
        attribute name { "barWidth" },
        text
    }
    # Space between each bar.
    | element option {
        attribute name { "barSpacing" },
        text
    }
    # Centers the y-axis at zero.
    | element option {
        attribute name { "zeroAxis" },
        text
    }
    # A range map to map specific values to selected colors.
    # For example if you want all values of -2 to appear yellow, use colorMap: { '-2': '# ff0' }.
    | element option {
        attribute name { "colorMap" },
        AnyOption*
    }
    # An array of colors to use for stacked bar charts.
    # The first series will use the first value in the array, the second series will use the second, etc.
    | element option {
        attribute name { "stackedBarColor" },
        text
    }
    # === Tristate Charts ===
    # CSS color for positive (win) values.
    | element option {
        attribute name { "posBarColor" },
        text
    }
    # CSS color for negative (lose) values.
    | element option {
        attribute name { "negBarColor" },
        text
    }
    # CSS color for zero (draw) values.
    | element option {
        attribute name { "zeroBarColor" },
        text
    }
    # Width of each bar.
    | element option {
        attribute name { "barWidth" },
        text
    }
    # Space between each bar.
    | element option {
        attribute name { "barSpacing" },
        text
    }
    # A range map to map specific values to selected colors.
    # For example if you want all values of -2 to appear yellow, use colorMap: { '-2': '# ff0' }.
    # As of version 1.5 you may also pass an array of values here instead of a mapping to specify a color for each individual bar.
    # For example if your chart has three values 1,3,1 you can set colorMap=["red", "green", "blue"].
    | element option {
        attribute name { "colorMap" },
        text
    }
    # === Discrete Charts ===
    # Height of each line.
    | element option {
        attribute name { "lineHeight" },
        text
    }
    # Values less than this value will be drawn using thresholdColor instead of lineColor.
    | element option {
        attribute name { "thresholdValue" },
        text
    }
    # Color to use in combination with thresholdValue.
    | element option {
        attribute name { "thresholdColor" },
        text
    }
    # === Bullet Graphs ===
    # The CSS color of the vertical target marker.
    | element option {
        attribute name { "targetColor" },
        text
    }
    # The width of the target marker.
    | element option {
        attribute name { "targetWidth" },
        text
    }
    # The CSS color of the performance measure horizontal bar.
    | element option {
        attribute name { "performanceColor" },
        text
    }
    # Colors to use for each qualitative range background color.
    # This must be a javascript array. eg ['red','green', '# 22f'].
    | element option {
        attribute name { "rangeColors" },
        text
    }
    # === Pie Charts ===
    # An array of CSS colors to use for pie slices.
    | element option {
        attribute name { "sliceColors" },
        text
    }
    # Angle in degrees to offset the first slice. Try -90 or +90.
    | element option {
        attribute name { "offset" },
        text
    }
    # Width of the border to draw around the whole pie chart.
    | element option {
        attribute name { "borderWidth" },
        text
    }
    # CSS color to use to draw the pie border.
    | element option {
        attribute name { "borderColor" },
        text
    }
    # === Box Plots ===
    # If set to false (default) then the values supplied are used to calculate the box data points for you.
    # If true then you must pre-calculate the points (see below).
    | element option {
        attribute name { "raw" },
        text
    }
    # If true (default) then outliers (values > 1.5x the IQR) are marked with circles and the whiskers are placed at Q1 and Q3 instead of the least and greatest value.
    | element option {
        attribute name { "showOutliers" },
        text
    }
    # Set the inter-quartile range multipler used to calculate values that qualify as an outlier.
    # Defaults to 1.5
    | element option {
        attribute name { "outlierIQR" },
        text
    }
    # CSS line color used to outline the box.
    | element option {
        attribute name { "boxLineColor" },
        text
    }
    # CSS fill color used for the box.
    | element option {
        attribute name { "boxFillColor" },
        text
    }
    # CSS color used to draw the whiskers.
    | element option {
        attribute name { "whiskerColor" },
        text
    }
    # CSS color used to draw the outlier circles.
    | element option {
        attribute name { "outlierLineColor" },
        text
    }
    # CSS color used to fill the outlier circles.
    | element option {
        attribute name { "outlierFillColor" },
        text
    }
    # Radius in pixels to draw the outlier circles.
    | element option {
        attribute name { "spotRadius" },
        text
    }
    # CSS color used to draw the median line.
    | element option {
        attribute name { "medianColor" },
        text
    }
    # If set to a value, then a small crosshair is drawn at that point to represent a target value.
    | element option {
        attribute name { "target" },
        text
    }
    # CSS color used to draw the target crosshair, if set.
    | element option {
        attribute name { "targetColor" },
        text
    }
    # If minvalue and maxvalue are set then the scale of the plot is fixed. By default minValue and maxValue are deduced from the values supplied.
    | element option {
        attribute name { "minValue" },
        text
    }
    # See minValue.
    | element option {
        attribute name { "maxValue" },
        text
    }
    # === Interactive Sparklines ===
    # Set to true to disable all sparkline interactivity, making the plugin behave in much the same way as it did in 1.x Defaults to false.
    | element option {
        attribute name { "disableInteraction" },
        text
    }
    # Set to true to disable mouseover tooltips. Defaults to false.
    | element option {
        attribute name { "disableTooltips" },
        text
    }
    # Set to true to disable the highlighting of individual values when mousing over a sparkline. Defaults to false.
    | element option {
        attribute name { "disableHighlight" },
        text
    }
    # Controls the amount to lighten or darken a value when moused over. A value of 1.5 will lighten by 50%, 0.5 will darken by 50%. Defaults to 1.4.
    | element option {
        attribute name { "highlightLighten" },
        text
    }
    # If specified, then values that are moused over will be changed to this color instead of being lightened.
    | element option {
        attribute name { "highlightColor" },
        text
    }
    # Specifies the DOM element that tooltips should be rendered into. Defaults to document.body.
    | element option {
        attribute name { "tooltipContainer" },
        text
    }
    # Specifies a CSS class name to apply to tooltips to override the default built-in style.
    | element option {
        attribute name { "tooltipClassname" },
        text
    }
    # Specifies how many pixels away from the mouse pointer to render the tooltip on the X-Axis.
    | element option {
        attribute name { "tooltipOffsetX" },
        text
    }
    # Specifies how many pixels away from the mouse pointer to render the tooltip on the Y-Axis.
    | element option {
        attribute name { "tooltipOffsetY" },
        text
    }
    # Pass a javascript function to use as a callback to override the HTML used to generate tooltips.
    # The callback will be passed arguments of (sparkline, options, fields).
    # "sparkline" is the sparkline object being rendered,
    # "options" is the key:value mapping of options set for this sparkline
    # use options.get(key, default) to fetch an individual option.
    # "fields" is an array of fields to render for the sparkline.
    # This will be a single element array unless its a box plot.
    | element option {
        attribute name { "tooltipFormatter" },
        text
    }
    # If specified then the tooltip uses the string specified by this setting as a title.
    | element option {
        attribute name { "tooltipChartTitle" },
        text
    }
    # A format string or spformat object (or an array thereof for multiple entries) to control the format of the tooltip.
    | element option {
        attribute name { "tooltipFormat" },
        text
    }
    # A string to prepend to each field displayed in a tooltip.
    | element option {
        attribute name { "tooltipPrefix" },
        text
    }
    # A string to append to each field displayed in a tooltip.
    | element option {
        attribute name { "tooltipSuffix" },
        text
    }
    # If true then null values will not have a tooltip displayed Defaults to true.
    | element option {
        attribute name { "tooltipSkipNull" },
        text
    }
    # An object or range map to map field values to tooltip strings.
    # For example you may want to map -1, 0 and 1 to the strings "Lost", "Draw", "Won".
    | element option {
        attribute name { "tooltipValueLookups" },
        text
    }
    # An array of values specifying which fields to display in a tooltip and in what order.
    # Currently only useful for box plots. See below for more details.
    | element option {
        attribute name { "tooltipFormatFieldlist" },
        text
    }
    # Specifies which key holds the field name to reference above.
    # For box plots this should be "field".
    | element option {
        attribute name { "tooltipFormatFieldlistKey" },
        text
    }
    # Pass a javascript function to control how numbers are formatted in tooltips.
    # The callback will be passwd a number to format and must return a string.
    # Default behavior is to format numbers to western conventions.
    | element option {
        attribute name { "numberFormatter" },
        text
    }
    # Character to use for group separator in numbers "1,234" for l10n purposes. Defaults to the comma - ","
    | element option {
        attribute name { "numberDigitGroupSep" },
        text
    }
    # Character to use for the decimal point in numbers for l10n purposes. Defaults to the period - ".".
    | element option {
        attribute name { "numberDecimalMark" },
        text
    }
    # Number of digits between the group separator in numbers for l10n purposes. Defaults to 3.
    | element option {
        attribute name { "numberDigitGroupCount" },
        text
    }
)

##
## Single Value Element
##
Single = (
    element single {
        BaseElementAttributes
        & ElementTitle?
        & (
             ElementSearch
             | SearchNode
         ) ?
        & ( SingleOption | TrellisOption | RefreshTimeOption | RefreshDisplayOption | LinkOption )*
        & Drilldown?
    }
)

SingleOption = (
    # Deprecated.
    # Static class added to containing div.
    element option {
        attribute name { "additionalClass" },
        text
    }
    # Deprecated.
    # Target view which user is redirected to when clicking on the result.
    | element option {
        attribute name { "linkView" },
        text
    }
    # Field that holds the value to display
    | element option {
        attribute name { "field" },
        text
    }
    # Deprecated.
    # CSV list containing: result, beforeLabel, underLabel, afterLabel turning that portion into a link.
    | element option {
        attribute name { "linkFields" },
        text
    }
    # Deprecated.
    # Additional class added to containing div based on the field specified.
    | element option {
        attribute name { "classField" },
        text
    }
    # Deprecated.
    # Label that appears to the left of the value.
    | element option {
        attribute name { "beforeLabel" },
        text
    }
    # Deprecated.
    # Label that appears to the right of the value.
    | element option {
        attribute name { "afterLabel" },
        text
    }
    # Label that appears to the left or right of the value
    | element option {
        attribute name {"unit"},
        text
    }
    # Specify whether unit should appear before or after the value. Defaults to after.
    | element option {
        attribute name { "unitPosition" },
        ("before" | "after")
    }
    # Label that appears below the value.
    | element option {
        attribute name { "underLabel" },
        text
    }
    # Deprecated.
    # Optional search that is passed to the linked view.
    | element option {
        attribute name { "linkSearch" },
        text
    }
    # Enable or disable automatic drilldown for the single value visualization. Defaults to none.
    | element option {
        attribute name { "drilldown" },
        ("all" | "none")
    }
    # Specify what part of the viz background will be colored based on rangemap severity.
    # Defaults to none.
    | element option {
        attribute name { "colorMode" },
        ("block" | "none")
    }
    # A numeric array that specifies the range limits for viz coloring.
    | element option {
        attribute name { "rangeValues" },
        text
    }
    # A string array that specifies the hex values for viz coloring in range order.
    | element option {
        attribute name { "rangeColors" },
        text
    }
    # Time range in the past from which to calculate a delta from the most recent data point in the same metric.
    | element option {
        attribute name { "trendInterval" },
        text
    }
    # Specify whether a field value that is > 0 is a positive (standard) or negative (inverse) development.
    # Defaults to standard.
    | element option {
        attribute name { "trendColorInterpretation" },
        ("standard" | "inverse")
    }
    # Determines the single value's height in pixels.
    # Defaults to 115, must be between 50 and 10000.
    | element option {
        attribute name { "height" },
        # Deprecated. Use xsd:integer instead.
        text
    }
    | element option {
        attribute name { "height" },
        xsd:integer
    }
    # Specify whether the single value hides its delta value, if available.
    # Defaults to true.
    | element option {
        attribute name { "showTrendIndicator" },
        Boolean
    }
    # Specify whether the single value hides its sparkline, if available.
    # Defaults to true
    | element option {
        attribute name { "showSparkline" },
        Boolean
    }
    # Specify whether the delta amount is displayed as a percentage or an absolute count.
    # Defaults to absolute.
    | element option {
        attribute name { "trendDisplayMode" },
        ("percent" | "absolute")
    }
    # Specify whether all single value components are colored by delta value's color, or by value's severity color.
    # Defaults to value.
    | element option {
        attribute name { "colorBy" },
        ("value" | "trend")
    }
    # Specify whether all single value components are colored or not.
    # Defaults to false.
    | element option {
        attribute name { "useColors" },
        Boolean
    }
    # Specify how many decimal places to display. Defaults to 0.
    | element option {
        attribute name { "numberPrecision" },
        ("0" | "0.0" | "0.00" | "0.000" | "0.0000")
    }
    # Specify whether or not to format the result value with thousand separators.
    # Defaults to true.
    | element option {
        attribute name { "useThousandSeparators" },
        Boolean
    }
)

##
## Map Element
##
Map = (
    element map {
        BaseElementAttributes
        & ElementTitle?
        & (
            ElementSearch
            | SearchNode
        ) ?
        & ( MapOption | TrellisOption | RefreshTimeOption | RefreshDisplayOption | LinkOption )*
        & Drilldown?
    }
)

MapOption = (
    # The type of map to render.  Default is marker.
    element option {
        attribute name { "mapping.type" },
        ("marker" | "choropleth")
    }
    # The maximum number of clusters to render.
    # Use caution when setting this property, as rendering a large number of clusters can significantly degrade performance.
    # It's recommended to use values below 1000. Default to 100.
    | element option {
        attribute name { "mapping.data.maxClusters" },
        xsd:integer
    }
    # {<field>:<hex>,...,<field>:<hex>}
    # A map of field names to hexadecimal color values (0xRRGGBB) to define colors for specific series.
    | element option {
        attribute name { "mapping.fieldColors" },
        text
    }
    # [<hex>,...,<hex>]
    # A list of hexadecimal color values (0xRRGGBB) from which to sample colors for series with no
    # specific colors assigned via the fieldColors property.
    | element option {
        attribute name { "mapping.seriesColors" },
        text
    }
    # (<latitude>,<longitude>) - The initial center point of the map.
    # Latitude values can range from -85 to 85, with values outside of this range being clipped.
    # Longitude values can range from -180 to 180, with values outside of this range being wrapped to fall within it.
    | element option {
        attribute name { "mapping.map.center" },
        text
    }
    # The initial zoom level of the map. Default to 2.
    | element option {
        attribute name { "mapping.map.zoom" },
        xsd:integer
    }
    # Whether the map zooms on scroll. Default to false.
    | element option {
        attribute name { "mapping.map.scrollZoom" },
        Boolean
    }
    # Whether the map pans when dragged. Default to true.
    | element option {
        attribute name { "mapping.map.panning" },
        Boolean
    }
    # (<south-latitude>,<west-longitude>,<north-latitude>,<east-longitude>)
    # The initial bounds to fit within the map view area.
    # Latitude values can range from -85 to 85, with values outside of this range being clipped.
    # Longitude values can range from -180 to 180, with values outside of this range being wrapped to fall within it.
    # Values assigned to this property effectively override any values assigned to the center or zoom properties.
    | element option {
        attribute name { "mapping.map.fitBounds" },
        text
    }
    # Determines whether the map tiles are shown.  Default to true.
    | element option {
        attribute name { "mapping.showTiles" },
        Boolean
    }
    # The opacity of the tiles. Values can range from 0 (transparent) to 1 (opaque). Defaults to 1.
    | element option {
        attribute name { "mapping.tileLayer.tileOpacity" },
        ( xsd:integer | xsd:float )
    }
    # The url template to use for requesting tiles.
    # The template can contain {x}, {y}, {z}, and {s} tokens to be replaced with the x coordinate,
    # y coordinate, zoom level, and subdomain, respectively, for each tile.
    | element option {
        attribute name { "mapping.tileLayer.url" },
        text
    }
    # [<string>,...,<string>] - A list of subdomains to distribute tile requests over.
    # More subdomains allows more tiles to be requested simultaneously. Defaults to [a,b,c].
    | element option {
        attribute name { "mapping.tileLayer.subdomains" },
        text
    }
    # The minimum zoom level of the tileset. Defaults to 0.
    | element option {
        attribute name { "mapping.tileLayer.minZoom" },
        xsd:integer
    }
    # The maximum zoom level of the tileset. Defaults to 7.
    | element option {
        attribute name { "mapping.tileLayer.maxZoom" },
        xsd:integer
    }
    # Whether to invert the y coordinate for tile requests (TMS servers use inverse y-axis numbering).
    # Default value to false.
    | element option {
        attribute name { "mapping.tileLayer.invertY" },
        Boolean
    }
    # A copyright attribution to be displayed in the bottom right corner of the map.
    | element option {
        attribute name { "mapping.tileLayer.attribution" },
        text
    }
    # The color mode to use for the choropleth shapes.
    # If set to "auto", the mode will be chosen by inspecting the data. Defaults to auto.
    | element option {
        attribute name { "mapping.choroplethLayer.colorMode" },
        ("auto" | "sequential" | "divergent" | "categorical")
    }
    # The color to use for the highest value shapes. Defaults to 0xDB5800.
    | element option {
        attribute name { "mapping.choroplethLayer.maximumColor" },
        text
    }
    # Only used when the color mode is divergent. The color to use for the lowest value shapes. Defaults to 0x2F25BA.
    | element option {
        attribute name { "mapping.choroplethLayer.minimumColor" },
        text
    }
    # The number of color bins to use. Defaults to 5.
    | element option {
        attribute name { "mapping.choroplethLayer.colorBins" },
        xsd:integer
    }
    # Only used when the color mode is divergent.
    # The value where the color palette should switch from using the minimum color to the maximum color. Defaults to 0.
    | element option {
        attribute name { "mapping.choroplethLayer.neutralPoint" },
        ( xsd:integer | xsd:float )
    }
    # The opacity of the shapes. Values can range from 0 (transparent) to 1 (opaque). Defaults to 0.75.
    | element option {
        attribute name { "mapping.choroplethLayer.shapeOpacity" },
        ( xsd:integer | xsd:float )
    }
    # Whether to show borders around each shape. Default to true.
    | element option {
        attribute name { "mapping.choroplethLayer.showBorder" },
        Boolean
    }
    # The opacity of the markers. Values can range from 0 (transparent) to 1 (opaque). Defaults to 0.8.
    | element option {
        attribute name { "mapping.markerLayer.markerOpacity" },
        ( xsd:integer | xsd:float )
    }
    # The minimum size of the markers, in pixels. Defaults to 10.
    | element option {
        attribute name { "mapping.markerLayer.markerMinSize" },
        xsd:integer
    }
    # The maximum size of the markers, in pixels. Defaults to 50.
    | element option {
        attribute name { "mapping.markerLayer.markerMaxSize" },
        xsd:integer
    }
    # The placement of the map legend. Defaults to 'bottomright'.
    | element option {
        attribute name { "mapping.legend.placement" },
        ("bottomright" | "none")
    }
    # Enable drilldown for the map. Defaults to all.
    | element option {
        attribute name { "drilldown" },
        ( "all" | "none" | Boolean )
    }
    # Determines the map's height in pixels.
    # Defaults to 400, must be between 200 and 10000.
    | element option {
        attribute name { "height" },
        # Deprecated. Use xsd:integer instead.
        text
    }
    | element option {
        attribute name { "height" },
        xsd:integer
    }
)

##
## Viz Element
##
Viz = (
    element viz {
        BaseElementAttributes
        # The exernal visualization type. This should be the visualization id
        # which is in the form <app_name>.<viz_name>. If unspecified, an error is presented
        & attribute type { text }?
        & ElementTitle?
        & (
            ElementSearch
            | SearchNode
        ) ?
        & ( VizOption | RefreshTimeOption | RefreshDisplayOption | LinkOption | AnyOption )*
        & Drilldown?
    }
)

VizOption = (
    # A visualization property to set the value of. 'name' should be the namespaced property name
    # in the form <app_name>.<viz_name>.<property_name>
    element option {
        attribute name { text },
        text
    }
    # Enable drilldown for the external visualization. Defaults to all.
    | element option {
        attribute name { "drilldown" },
        ( "all" | "none" | Boolean )
    }
    # Determines viz's height in pixels.
    # Defaults to 250
    | element option {
        attribute name { "height" },
        # Deprecated. Use xsd:integer instead.
        text
    }
    | element option {
        attribute name { "height" },
        xsd:integer
    }
)

##
## Event Element
##
Event = (
    element event {
        BaseElementAttributes
        & ElementTitle?
        & (
             ElementSearch
             | SearchNode
         ) ?
        & ( EventOption | RefreshTimeOption | LinkOption | AnyOption )*
        & ElementFieldList?
        & Drilldown?
    }
)

EventOption = (
    # The maximum number of rows to display. Defaults to 10.
    element option {
        attribute name { "count" },
        xsd:integer
    }
    # Toggle display of row numbers to the left of results. Defaults to false.
    # Supports for "type": "list" and "table"
    | element option {
        attribute name { "rowNumbers" },
        Boolean
    }
    # Deprecated.
    # Toggle whether to show events or results.
    # Defaults to events.
    | element option {
        attribute name { "entityName" },
        ("events" | "results")
    }
    # The maximum number of lines to display for each result/event. Defaults to 5.
    | element option {
        attribute name { "maxLines" },
        xsd:integer
    }
    # Toggle pagination on or off. Defaults to true.
    | element option {
        attribute name { "showPager" },
        Boolean
    }
    # Deprecated. Use list.drilldown and raw.drilldown instead.
    # Set the segmentation of events displayed. This affects what you can and can't click on within the event.
    # This only applies to raw and list event panel types.
    | element option {
        attribute name { "segmentation" },
        ("none" | "inner" | "outer" | "full")
    }
    # Deprecated. Use list.wrap and table.wrap instead.
    # Enables wrapping of events. Defaults to true.
    | element option {
        attribute name { "softWrap" },
        Boolean
    }
    # Indicates the format for displaying events. Defaults to list.
    | element option {
        attribute name { "type" },
        ("list" | "raw" | "table")
    }
    # Deprecated. Use raw.drilldown, list.drilldown and table.drilldown instead.
    # A "virtual" option to bulk-set all of the type-specific drilldown options.
    # Enabling this causes the default values for the following settings to change
    # (<segmentation> is the value of the segementation option):
    # * raw.drilldown = <segmentation>|"full"
    # * list.drilldown = <segmentation>|"full"
    # * table.drilldown = "1"
    # Type-specific options take precedence if they are provided as well.
    | element option {
        attribute name { "drilldown" },
        ("all"|"none")
    }
    # Specifies how drilldown operates in the raw event listing. Defaults to full.
    | element option {
        attribute name { "raw.drilldown" },
        ("full" | "inner" | "outer" | "none")
    }
    # Indicates whether to wrap the contents of the event listing. Defaults to true.
    | element option {
        attribute name { "list.wrap" },
        Boolean
    }
    # Specifies how drilldown operates in the event listing. Defaults to full.
    | element option {
        attribute name { "list.drilldown" },
        ("full" | "inner" | "outer" | "none")
    }
    # Indicates whether text in the table wraps. Defaults to true.
    | element option {
        attribute name { "table.wrap" },
        Boolean
    }
    # Indicates whether drilldown functionality is enabled for the table. Defaults to all.
    | element option {
        attribute name { "table.drilldown" },
        ("all" | "none")
    }
    # Indicates the sort direction for items in the table. Defaults to asc.
    | element option {
        attribute name { "table.sortDirection" },
        ("asc" | "desc")
    }
    # Specifies the column on which to sort for the table.
    | element option {
        attribute name { "table.sortColumn" },
        text
    }
)

##
## HTML Element
##
Html = (
    element html {
        BaseElementAttributes
        # Filename to load the HTML content from (from appserver/static of the same app).
        # If specified, the content of the node is ignored.
        & attribute src { text }?
        # If enabled, the text content of the node is interpreted as the HTML source.
        & attribute encoded { Boolean }?
        # Disable token replacement for the HTML element by setting tokens="false". Defaults to true.
        & attribute tokens { Boolean }?
        & Anything*
    }
)

##
## Common Element Configuration
##
ElementFieldList = (
    # A list of fields to display in the given visualization. This list is a JSON encoded array, or as a fallback a
    # comma separated list of optionally quoted field names.
    element fields {
        text
    }
)

AnyOption = (
    element option {
        attribute name { text },
        text
    }
)

LinkOption = (
    # Show the link buttons at the bottom of the panel. Defaults to "true"
    element option {
        attribute name { "link.visible" },
        Boolean
    }
    # Show the "Open in Search" button at the bottom of the panel. Defaults to the value of link.visible
    | element option {
        attribute name { "link.openSearch.visible" },
        Boolean
    }
    # Show the "Open in Pivot" button at the bottom of the panel. Defaults to the value of link.visible
    | element option {
        attribute name { "link.openPivot.visible" },
        Boolean
    }
    # The label for the "Open in Search" button. Defaults to "Open in Search"
    | element option {
        attribute name { "link.openSearch.text" },
        text
    }
    # The target view used when clicking on the "Open in Search" button. Defaults to "search"
    | element option {
        attribute name { "link.openSearch.viewTarget" },
        text
    }
    # An alternative search to use when clicking on the "Open in Search" button. Defaults to the search used by this panel
    | element option {
        attribute name { "link.openSearch.search" },
        text
    }
    # The earliest time to use for the alternative search specified by link.openSearch.search. Defaults to the earliest time used by this panel
    | element option {
        attribute name { "link.openSearch.searchEarliestTime" },
        text
    }
    # The latest time to use for the alternative search specified by link.openSearch.search. Defaults to the latest time used by this panel
    | element option {
        attribute name { "link.openSearch.searchLatestTime" },
        text
    }
    # Show the "Export" button at the bottom of the panel. Defaults to the value of link.visible
    | element option {
        attribute name { "link.exportResults.visible" },
        Boolean
    }
    # Show the "Inspect" button at the bottom of the panel. Defaults to the value of link.visible
    | element option {
        attribute name { "link.inspectSearch.visible" },
        Boolean
    }
    # Show the "Stop" button at the bottom of the panel. Defaults to the value of link.visible
    | element option {
        attribute name { "link.stopSearch.visible" },
        Boolean
    }
)

RefreshTimeOption = (
   # Show the refresh time indicator: default True
   element option {
       attribute name { "refresh.time.visible" },
       Boolean
   }
   # Show the refresh link: default True
   | element option {
       attribute name { "refresh.link.visible" },
       Boolean
   }
   # Deprecated.
   # Time in seconds to refresh this panel.  If not a positive integer panel will not refresh. Defaults to 0
   | element option {
       attribute name { "refresh.auto.interval" },
       xsd:integer
   }
)

RefreshDisplayOption = (
   # Define how search refresh is displayed to the user in terms of showing preview data, messaging and the progressbar
   # Default is "progressbar"
   element option {
       attribute name { "refresh.display" },
       ("preview" | "progressbar" | "none")
   }
)

##
## Forms
##
Form = (
    element form {
        BaseViewAttributes
        & attribute class { text }?
        & element label { text }?
        & element description { text }?
        & element tags { text }?
        & ( # Deprecated. Use SearchNode instead.
            InlineSearchTemplate
            | (SearchNode
                & element fieldForValue { text }?
                & element fieldFormLabel { text }?
            )
        )?
        & Fieldset?
        & Row*
        & InitEventHandler?
    }
)

Fieldset = (
    element fieldset {
        # Indicates whether to run the search when the page loads. Defaults to false
        attribute autoRun { Boolean }?,
        # Indicates whether to display a Submit button. Defaults to true
        attribute submitButton { Boolean }?,
        ( Input | Html )*
    }
)

##
## Input types
##
Input = ( TextInput | DropdownInput | RadioInput | LinkInput | MultiSelectInput | CheckboxInput | TimeInput )

BaseInputAttributes = (
    attribute token { TokenName },
    attribute id { Identifier },
    # Specifies to run the search when the selection changes. Defaults to false
    attribute searchWhenChanged { Boolean }?,
    TokenDependencies
)

InputLabel = (
    # Text displayed with the input element.
    element label { text }
)

InputSearch = (
        # Deprecated. Use SearchNode instead.
        PopulatingSearch | PopulatingSavedSearch
       | (SearchNode
       # The field to use for the label and value when using the <search> element to dynamically populate choices for the input.
        & element fieldForValue { text }
        & element fieldForLabel { text }
    )
)

InputChoice = (
    element choice {
        attribute value { text }?
        & text
    }
)


PopulatingSearch = (
    element populatingSearch {
        attribute fieldForValue { text }
        & attribute fieldForLabel { text }
        & attribute earliest { text }?
        & attribute latest { text }?
        & text
    }
)

PopulatingSavedSearch = (
    element populatingSavedSearch {
        attribute fieldForValue { text }
        & attribute fieldForLabel { text }
        & text
    }
)

InputMetadata = (
    # Specifies a default value for an input element.
    element default { text }
    # String prefixed to the value of the input element. Can be a regular expression.
    | element prefix { text }
    # String appended to the value of the input element. Can be a regular expression.
    | element suffix { text }
    # Deprecated. Use initialValue instead.
    | element seed { text }
    # The initial value of the input element. The value for <default> overrides the value for <initialValue>.
    | element initialValue { text }
)

MultiValueInputMetadata = (
    InputMetadata
    # String prefixed to the value of the input element. Can be a regular expression.
    | element valuePrefix { text }
    # String appended to the value of the input element. Can be a regular expression.
    | element valueSuffix { text }
    # A string that will be placed between each selected value.
    # Typically, you specify " OR " or " AND " using upper case, do not specify the quote marks, but specify a space character before and after the text.
    | element delimiter { text }
)

InputChangeHandler = (
    element change {
        ( (LinkAction | SetToken | UnsetToken | EvalToken)* | InputChangeCondition* )?
    }
)

InputChangeCondition = (
    element condition {
        ( attribute value { text } | attribute label { text } | attribute match { text } )?,
        ( LinkAction | SetToken | UnsetToken | EvalToken )*
    }
)

TextInput = (
    element input {
        BaseInputAttributes
        & attribute type { "text" }?
        & InputLabel?
        & InputMetadata*
        & InputChangeHandler?
    }
)

DropdownInput = (
    element input {
        BaseInputAttributes
        & attribute type { "dropdown" }
        # The first element is automatically selected. Overrides any choice made with <seed>. Defaults to false
        & element selectFirstChoice { Boolean }?
        # It enables the selection of custom values typed into the text field for the input. Defaults to false
        & element allowCustomValues { Boolean }?
        # Indicates if the clear button is present. Defaults to true
        & element showClearButton { Boolean }?
        & InputLabel?
        & InputSearch?
        & InputChoice*
        & InputMetadata*
        & InputChangeHandler?
    }
)

LinkInput = (
    element input {
        BaseInputAttributes
        & attribute type { "link" }
        # The first element is automatically selected. Overrides any choice made with <seed>. Defaults to false
        & element selectFirstChoice { Boolean }?
        & InputLabel?
        & InputSearch?
        & InputChoice*
        & InputMetadata*
        & InputChangeHandler?
    }
)

RadioInput = (
    element input {
        BaseInputAttributes
        & attribute type { "radio" }
        # The first element is automatically selected. Overrides any choice made with <seed>. Defaults to false
        & element selectFirstChoice { Boolean }?
        & InputLabel?
        & InputSearch?
        & InputChoice*
        & InputMetadata*
        & InputChangeHandler?
    }
)

MultiSelectInput = (
    element input {
        attribute type { "multiselect" }
        # It enables the selection of custom values typed into the text field for the input. Defaults to false
        & element allowCustomValues { Boolean }?
        & BaseInputAttributes
        & InputSearch?
        & InputLabel?
        & MultiValueInputMetadata*
        & InputChangeHandler?
    }
)

CheckboxInput = (
    element input {
        attribute type { "checkbox" }
        & BaseInputAttributes
        & InputSearch?
        & InputLabel?
        & MultiValueInputMetadata*
        & InputChangeHandler?
    }
)

TimeInput = (
    element input {
        attribute type { "time" }
        & attribute token { TokenName }?
        # Specifies to run the search when the selection changes. Defaults to false
        & attribute searchWhenChanged { Boolean }?
        & TokenDependencies
        & InputLabel?
        & element default {
            (   # Deprecated. Use earliest instead.
                element earliestTime { RelativeTimeExpression }
                # Deprecated. Use latest instead.
                & element latestTime { RelativeTimeExpression }
            )
            | (
                element earliest { RelativeTimeExpression }
                & element latest { RelativeTimeExpression }
            )
            | text
        }?
        & InputChangeHandler?
    }
)

##
## Common data type definitions
##
Anything = (
    ( element * { attribute * { text }*, Anything } | text )*
)

Boolean = ( "true" | "false" | "True" | "False" | "1" | "0" )

# Identifier defines allowed characters for the id attributes
Identifier = ( xsd:string { pattern = "[a-zA-Z][a-zA-Z0-9_]*" } )

TokenName = ( string )

RelativeTimeExpression = ( text )

SearchString = ( text )
