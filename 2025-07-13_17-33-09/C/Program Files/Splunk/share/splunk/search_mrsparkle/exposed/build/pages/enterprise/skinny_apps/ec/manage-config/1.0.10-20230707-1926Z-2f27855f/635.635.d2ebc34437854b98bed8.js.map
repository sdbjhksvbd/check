{"version":3,"file":"635.635.d2ebc34437854b98bed8.js","mappings":"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","sources":["webpack://remote-manage-config-page/./src/config-page/ip-allow-list/IPAllowList.custom-validators.ts","webpack://remote-manage-config-page/./src/config-page/ip-allow-list/data/jsonforms/schema/index.ts","webpack://remote-manage-config-page/./src/config-page/ip-allow-list/data/jsonforms/uischema/index.ts","webpack://remote-manage-config-page/./src/config-page/ip-allow-list/IPAllowList.config.ts","webpack://remote-manage-config-page/./src/config-page/ip-allow-list/IPAllowList.apiservice.ts","webpack://remote-manage-config-page/./src/config-page/ip-allow-list/IPAllowList.constants.ts","webpack://remote-manage-config-page/./src/config-page/ip-allow-list/IPAllowList.css?cf4f","webpack://remote-manage-config-page/./src/config-page/ip-allow-list/IPAllowList.testids.ts","webpack://remote-manage-config-page/./src/config-page/ip-allow-list/IPAllowList.component.tsx","webpack://remote-manage-config-page/./src/shared/components/FilterHOCs/filterHOCs.tsx","webpack://remote-manage-config-page/./src/shared/components/TokenAuthDisabled/TokenAuthDisabled.testids.ts","webpack://remote-manage-config-page/./src/shared/components/TokenAuthDisabled/TokenAuthDisabled.component.tsx","webpack://remote-manage-config-page/./src/shared/services/UserService/UserService.ts","webpack://remote-manage-config-page/./src/config-page/ip-allow-list/IPAllowList.css"],"sourcesContent":["import { validateIPAddress } from '../../shared/utils/helper';\n\nexport const FORMATS = {\n    IP_ADDRESS: 'ip-address',\n};\n\nexport const customValidators = {\n    [FORMATS.IP_ADDRESS]: (value: string): boolean => {\n        const { isValid } = validateIPAddress(value);\n        return isValid;\n    },\n};\n","import { JsonSchema4 } from '@jsonforms/core';\nimport { FORMATS } from '../../../IPAllowList.custom-validators';\n\nexport const schema: JsonSchema4 = {\n    type: 'object',\n    properties: {\n        'search-api': {\n            type: 'array',\n            items: {\n                type: 'string',\n                format: FORMATS.IP_ADDRESS,\n            },\n        },\n        hec: {\n            type: 'array',\n            items: {\n                type: 'string',\n                format: FORMATS.IP_ADDRESS,\n            },\n        },\n        s2s: {\n            type: 'array',\n            items: {\n                type: 'string',\n                format: FORMATS.IP_ADDRESS,\n            },\n        },\n        'search-ui': {\n            type: 'array',\n            items: {\n                type: 'string',\n                format: FORMATS.IP_ADDRESS,\n            },\n        },\n        'idm-ui': {\n            type: 'array',\n            items: {\n                type: 'string',\n                format: FORMATS.IP_ADDRESS,\n            },\n        },\n        'idm-api': {\n            type: 'array',\n            items: {\n                type: 'string',\n                format: FORMATS.IP_ADDRESS,\n            },\n        },\n    },\n};\n","import { validateIPAddress } from '../../../../../shared/utils/helper';\nimport { MESSAGES } from '../../../../../messages';\nimport { FeatureType } from '../../../IPAllowList.interfaces';\n\nexport const uiSchema = {\n    type: 'TabBar',\n    elements: [\n        {\n            type: 'Category',\n            label: MESSAGES.IP_ALLOW_LIST.TAB_NAMES[FeatureType.HEC],\n            elements: [\n                {\n                    type: 'HorizontalLayout',\n                    elements: [\n                        {\n                            type: 'FormRows',\n                            scope: '#/properties/hec',\n                            options: {\n                                customComponentProps: {\n                                    validators: [validateIPAddress],\n                                    placeholder: ['192.0.0.0/24'],\n                                    labelsForScreenReader: ['Subnet record'],\n                                    deleteConfirmationModal: {\n                                        title: MESSAGES.IP_ALLOW_LIST.DELETE_CONFIRMATION_MODAL_TITLE,\n                                        content: MESSAGES.IP_ALLOW_LIST.DELETE_CONFIRMATION_MODAL_CONTENT,\n                                    },\n                                },\n                                suiComponentProps: {\n                                    addLabel: MESSAGES.IP_ALLOW_LIST.ADD_SUBNET_BTN_LABEL,\n                                },\n                            },\n                        },\n                        {\n                            type: 'HorizontalLayout',\n                            elements: [],\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            type: 'Category',\n            label: MESSAGES.IP_ALLOW_LIST.TAB_NAMES[FeatureType.S2S],\n            elements: [\n                {\n                    type: 'HorizontalLayout',\n                    elements: [\n                        {\n                            type: 'FormRows',\n                            scope: '#/properties/s2s',\n                            options: {\n                                customComponentProps: {\n                                    validators: [validateIPAddress],\n                                    placeholder: ['192.0.0.0/24'],\n                                    labelsForScreenReader: ['Subnet record'],\n                                    deleteConfirmationModal: {\n                                        title: MESSAGES.IP_ALLOW_LIST.DELETE_CONFIRMATION_MODAL_TITLE,\n                                        content: MESSAGES.IP_ALLOW_LIST.DELETE_CONFIRMATION_MODAL_CONTENT,\n                                    },\n                                },\n                                suiComponentProps: {\n                                    addLabel: MESSAGES.IP_ALLOW_LIST.ADD_SUBNET_BTN_LABEL,\n                                },\n                            },\n                        },\n                        {\n                            type: 'HorizontalLayout',\n                            elements: [],\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            type: 'Category',\n            label: MESSAGES.IP_ALLOW_LIST.TAB_NAMES[FeatureType.SearchAPI],\n            elements: [\n                {\n                    type: 'HorizontalLayout',\n                    elements: [\n                        {\n                            type: 'FormRows',\n                            scope: '#/properties/search-api',\n                            options: {\n                                customComponentProps: {\n                                    validators: [validateIPAddress],\n                                    placeholder: ['192.0.0.0/24'],\n                                    labelsForScreenReader: ['Subnet record'],\n                                    deleteConfirmationModal: {\n                                        title: MESSAGES.IP_ALLOW_LIST.DELETE_CONFIRMATION_MODAL_TITLE,\n                                        content: MESSAGES.IP_ALLOW_LIST.DELETE_CONFIRMATION_MODAL_CONTENT,\n                                    },\n                                },\n                                suiComponentProps: {\n                                    addLabel: MESSAGES.IP_ALLOW_LIST.ADD_SUBNET_BTN_LABEL,\n                                },\n                            },\n                        },\n                        {\n                            type: 'HorizontalLayout',\n                            elements: [],\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            type: 'Category',\n            label: MESSAGES.IP_ALLOW_LIST.TAB_NAMES[FeatureType.IDMAPI],\n            elements: [\n                {\n                    type: 'HorizontalLayout',\n                    elements: [\n                        {\n                            type: 'FormRows',\n                            scope: '#/properties/idm-api',\n                            options: {\n                                customComponentProps: {\n                                    validators: [validateIPAddress],\n                                    placeholder: ['192.0.0.0/24'],\n                                    labelsForScreenReader: ['Subnet record'],\n                                    deleteConfirmationModal: {\n                                        title: MESSAGES.IP_ALLOW_LIST.DELETE_CONFIRMATION_MODAL_TITLE,\n                                        content: MESSAGES.IP_ALLOW_LIST.DELETE_CONFIRMATION_MODAL_CONTENT,\n                                    },\n                                },\n                                suiComponentProps: {\n                                    addLabel: MESSAGES.IP_ALLOW_LIST.ADD_SUBNET_BTN_LABEL,\n                                },\n                            },\n                        },\n                        {\n                            type: 'HorizontalLayout',\n                            elements: [],\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            type: 'Category',\n            label: MESSAGES.IP_ALLOW_LIST.TAB_NAMES[FeatureType.IDMUI],\n            elements: [\n                {\n                    type: 'HorizontalLayout',\n                    elements: [\n                        {\n                            type: 'FormRows',\n                            scope: '#/properties/idm-ui',\n                            options: {\n                                customComponentProps: {\n                                    validators: [validateIPAddress],\n                                    placeholder: ['192.0.0.0/24'],\n                                    labelsForScreenReader: ['Subnet record'],\n                                    deleteConfirmationModal: {\n                                        title: MESSAGES.IP_ALLOW_LIST.DELETE_CONFIRMATION_MODAL_TITLE,\n                                        content: MESSAGES.IP_ALLOW_LIST.DELETE_CONFIRMATION_MODAL_CONTENT,\n                                    },\n                                },\n                                suiComponentProps: {\n                                    addLabel: MESSAGES.IP_ALLOW_LIST.ADD_SUBNET_BTN_LABEL,\n                                },\n                            },\n                        },\n                        {\n                            type: 'HorizontalLayout',\n                            elements: [],\n                        },\n                    ],\n                },\n            ],\n        },\n        {\n            type: 'Category',\n            label: MESSAGES.IP_ALLOW_LIST.TAB_NAMES[FeatureType.SearchUI],\n            elements: [\n                {\n                    type: 'HorizontalLayout',\n                    elements: [\n                        {\n                            type: 'FormRows',\n                            scope: '#/properties/search-ui',\n                            options: {\n                                customComponentProps: {\n                                    validators: [validateIPAddress],\n                                    placeholder: ['192.0.0.0/24'],\n                                    labelsForScreenReader: ['Subnet record'],\n                                    deleteConfirmationModal: {\n                                        title: MESSAGES.IP_ALLOW_LIST.DELETE_CONFIRMATION_MODAL_TITLE,\n                                        content: MESSAGES.IP_ALLOW_LIST.DELETE_CONFIRMATION_MODAL_CONTENT,\n                                    },\n                                },\n                                suiComponentProps: {\n                                    addLabel: MESSAGES.IP_ALLOW_LIST.ADD_SUBNET_BTN_LABEL,\n                                },\n                            },\n                        },\n                        {\n                            type: 'HorizontalLayout',\n                            elements: [],\n                        },\n                    ],\n                },\n            ],\n        },\n    ],\n};\n","import { IFormConfig } from '../../app.interfaces';\nimport { schema } from './data/jsonforms/schema';\nimport { uiSchema } from './data/jsonforms/uischema';\n\nconst formConfig: IFormConfig = {\n    schema,\n    uischema: uiSchema,\n};\n\nexport default formConfig;\n","import 'core-js/proposals/promise-all-settled';\nimport { difference, set as setPathValue } from 'lodash';\nimport formConfig from './IPAllowList.config';\nimport { IFormConfig } from '../../app.interfaces';\n\nimport {\n    ACSJson,\n    AddDelSubnetParams,\n    FeatureType,\n    FetchIPAllowListParams,\n    IGenerateDiffFn,\n    IIPAllowListFnReturnType,\n    IIPAllowListFormData,\n    ParsedACSResponse,\n} from './IPAllowList.interfaces';\n\nimport { FED_SEARCH_SUBNET_PREFIX } from './IPAllowList.constants';\nimport { filterErrorMessages } from '../../shared/utils/helper';\nimport { TrackingService } from '../../shared/services/TrackingService';\nimport { UserService } from '../../shared/services/UserService';\n\nexport const fetchFormConfig = async (): Promise<IFormConfig> => {\n    return Promise.resolve(formConfig);\n};\n\nexport const featureTypes: FeatureType[] = [\n    FeatureType.HEC,\n    FeatureType.S2S,\n    FeatureType.SearchAPI,\n    FeatureType.SearchUI,\n    FeatureType.IDMAPI,\n    FeatureType.IDMUI,\n];\n\nexport const constructIPAllowListURL = (feature: FeatureType): string => {\n    return `${UserService.getACSBaseURL()}/access/${feature}/ipallowlists`;\n};\n\nexport const handleACSResponse = async (response: Response): Promise<ParsedACSResponse> => {\n    if (response.status === 200) {\n        try {\n            const rawText = await response.text();\n            if (rawText === '') {\n                // The ACS Add/Del subnet endpoints return empty string on success.\n                // Given there is no content in the response, we just return empty obj\n                return {};\n            }\n            // All other ACS endpoints return JSON on success\n            return JSON.parse(rawText);\n        } catch (err) {\n            throw new Error(err.message);\n        }\n    } else {\n        const err = await response.json();\n        throw new Error(err.message);\n    }\n};\n\nexport const addDelSubnet = async (args: AddDelSubnetParams): Promise<ParsedACSResponse> => {\n    const { feature, method, subnets } = args;\n    const body = JSON.stringify({ subnets });\n    try {\n        const response = await UserService.withJwtTokenRetry(() =>\n            fetch(constructIPAllowListURL(feature), {\n                method,\n                headers: UserService.getACSHeaders(),\n                body,\n            })\n        );\n        return await handleACSResponse(response);\n    } catch (err) {\n        console.log(err);\n        throw err;\n    }\n};\n\nlet initialData: IIPAllowListFormData = featureTypes.reduce((acc, curr, index) => {\n    acc[featureTypes[index]] = [];\n    return acc;\n}, {} as IIPAllowListFormData);\n\nconst generateDiff: IGenerateDiffFn = ({ prevSubnets, currSubnets }) => {\n    return {\n        added: difference(currSubnets, prevSubnets),\n        removed: difference(prevSubnets, currSubnets),\n    };\n};\n\nconst generateErrorMessage = (records: PromiseSettledResult<ParsedACSResponse>[]): string[] => {\n    return records.map((resp) => (resp.status === 'rejected' ? (resp.reason.message as string) : ''));\n};\n\n/**\n * SPL-233804: The subnet with format `sg-*****`. Since this is non-CIDR, it will fail validation and prevent user from\n * making changes to IP Allow List. Users should not be able to see/edit these subnets either, so we will filter them out from the UI.\n */\nexport const removeFedSearch = (acsResponse: ParsedACSResponse): ACSJson => {\n    const filteredResp = acsResponse;\n    filteredResp.subnets = acsResponse.subnets.filter(\n        (subnet) => subnet.indexOf(FED_SEARCH_SUBNET_PREFIX) !== 0\n    );\n    return filteredResp;\n};\n\nexport const fetchIPAllowList = async (args: FetchIPAllowListParams): Promise<ParsedACSResponse> => {\n    const { feature } = args;\n    try {\n        const response = await UserService.withJwtTokenRetry(() =>\n            fetch(constructIPAllowListURL(feature), {\n                headers: UserService.getACSHeaders(),\n            })\n        );\n        const parsedResponse = await handleACSResponse(response);\n        return removeFedSearch(parsedResponse);\n    } catch (err) {\n        throw new Error(err.message);\n    }\n};\n\nexport const fetchConfigSettings = async (): Promise<IIPAllowListFnReturnType> => {\n    const responses = await Promise.allSettled(featureTypes.map((feature) => fetchIPAllowList({ feature })));\n    const formData: IIPAllowListFormData = responses.reduce<IIPAllowListFormData>((acc, curr, index) => {\n        acc[featureTypes[index]] =\n            curr.status === 'fulfilled'\n                ? ((curr.value as ACSJson).subnets || []).sort()\n                : initialData[featureTypes[index]];\n        return acc;\n    }, {});\n    initialData = formData;\n    return {\n        records: initialData,\n        error: generateErrorMessage(responses),\n    };\n};\n\nexport const manageIPAllowList = async (\n    updatedData: IIPAllowListFormData\n): Promise<IIPAllowListFnReturnType> => {\n    const promises: Promise<ParsedACSResponse>[] = [];\n    const trackingData = {};\n    let hasUpdates = false;\n    for (let i = 0; i < featureTypes.length; i += 1) {\n        const prevSubnets = initialData[featureTypes[i]];\n        const currSubnets = updatedData[featureTypes[i]];\n        const { added, removed } = generateDiff({ prevSubnets, currSubnets });\n        if (!added.length && !removed.length) {\n            promises.push(Promise.resolve({}));\n        } else if (added.length && removed.length) {\n            hasUpdates = true;\n            setPathValue(trackingData, `${featureTypes[i]}.request.add`, added.length);\n            // First add, then remove to avoid \"cannot remove all access to stack's hec\" error from ACS\n            promises.push(\n                addDelSubnet({\n                    feature: featureTypes[i],\n                    method: 'post',\n                    subnets: added,\n                })\n                    .then(async () => {\n                        setPathValue(trackingData, `${featureTypes[i]}.response.added`, added.length);\n\n                        setPathValue(trackingData, `${featureTypes[i]}.request.remove`, removed.length);\n                        try {\n                            const resp = await addDelSubnet({\n                                feature: featureTypes[i],\n                                method: 'delete',\n                                subnets: removed,\n                            });\n                            setPathValue(trackingData, `${featureTypes[i]}.response.removed`, removed.length);\n                            return resp;\n                        } catch (error) {\n                            setPathValue(trackingData, `${featureTypes[i]}.response.removed`, 0);\n                            return error;\n                        }\n                    })\n                    .catch((error) => {\n                        setPathValue(trackingData, `${featureTypes[i]}.response.added`, 0);\n                        return Promise.reject(error);\n                    })\n            );\n        } else if (added.length) {\n            hasUpdates = true;\n            setPathValue(trackingData, `${featureTypes[i]}.request.add`, added.length);\n            promises.push(\n                addDelSubnet({\n                    feature: featureTypes[i],\n                    method: 'post',\n                    subnets: added,\n                })\n                    .then((resp) => {\n                        setPathValue(trackingData, `${featureTypes[i]}.response.added`, added.length);\n                        return resp;\n                    })\n                    .catch((error) => {\n                        setPathValue(trackingData, `${featureTypes[i]}.response.added`, 0);\n                        return Promise.reject(error);\n                    })\n            );\n        } else if (removed.length) {\n            hasUpdates = true;\n            setPathValue(trackingData, `${featureTypes[i]}.request.remove`, removed.length);\n            promises.push(\n                addDelSubnet({\n                    feature: featureTypes[i],\n                    method: 'delete',\n                    subnets: removed,\n                })\n                    .then((resp) => {\n                        setPathValue(trackingData, `${featureTypes[i]}.response.removed`, removed.length);\n                        return resp;\n                    })\n                    .catch((error) => {\n                        setPathValue(trackingData, `${featureTypes[i]}.response.removed`, 0);\n                        return Promise.reject(error);\n                    })\n            );\n        }\n    }\n    if (!hasUpdates) {\n        return {};\n    }\n\n    const responses = await Promise.allSettled(promises);\n    TrackingService.trackEvent({\n        type: 'manageConfigPage.submitBtnClicked',\n        data: trackingData,\n    });\n    const errorMessages = generateErrorMessage(responses);\n\n    if (filterErrorMessages(errorMessages).length) {\n        const errorUseCases = [];\n        errorMessages.forEach((curr, index) => {\n            if (curr !== '') {\n                errorUseCases.push(featureTypes[index]);\n            }\n        });\n        TrackingService.trackEvent({\n            type: 'manageConfigPage.errorOnSubmit',\n            data: {\n                errorUseCases: errorUseCases.join(', '),\n            },\n        });\n        const { records } = await fetchConfigSettings();\n        // Reset initialData to the last saved data\n        initialData = records;\n        return {\n            error: errorMessages,\n        };\n    }\n\n    initialData = updatedData;\n    return {\n        records: initialData,\n    };\n};\n","export const IP_ALLOW_LIST_LOC_STR = 'learnmore.ip_allow_list_ui';\nexport const FED_SEARCH_SUBNET_PREFIX = 'sg-';\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!./IPAllowList.css\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { normalizeDataTestIds } from '@splunk/sui-forms-shared-utils';\nimport { remoteAppName } from '../../constants';\n\nconst TEST_IDS = {\n    CONTAINER: 'Container',\n    LEARN_MORE_LINK: 'LearnmoreLink',\n    WAITSPINNER: 'Waitspinner',\n};\n\nnormalizeDataTestIds({ remoteAppName, compName: 'IPAllowList', testIds: TEST_IDS });\nexport default TEST_IDS;\n","import React, { FC, useState, useEffect } from 'react';\nimport SUIFormRenderer, {\n    ISubmitHandler,\n    IValueChangeHandler,\n    Errors,\n    ErrorMessagesType,\n} from '@splunk/sui-form-renderer';\nimport Link from '@splunk/react-ui/Link';\nimport { pick, variables } from '@splunk/themes';\nimport { createDocsURL } from '@splunk/splunk-utils/url';\nimport WaitSpinner from '@splunk/react-ui/WaitSpinner';\nimport styled from 'styled-components';\nimport { flowRight as compose, upperFirst } from 'lodash';\n\nimport { IFormConfig } from '../../app.interfaces';\nimport TokenAuthDisabled from '../../shared/components/TokenAuthDisabled/TokenAuthDisabled.component';\nimport {\n    fetchFormConfig,\n    fetchConfigSettings,\n    featureTypes,\n    manageIPAllowList,\n} from './IPAllowList.apiservice';\nimport { IIPAllowListFormData } from './IPAllowList.interfaces';\nimport { MESSAGES } from '../../messages';\nimport './IPAllowList.css';\nimport { UserService } from '../../shared/services/UserService';\nimport { IP_ALLOW_LIST_LOC_STR } from './IPAllowList.constants';\nimport { customValidators } from './IPAllowList.custom-validators';\nimport TEST_IDS from './IPAllowList.testids';\nimport ERRORS_CODES from '../../shared/services/UserService/errors';\nimport { withRBACFilter, withSplunkEnvFilter } from '../../shared/components/FilterHOCs/filterHOCs';\n\nconst WrapperDiv = styled.div`\n    max-width: 960px;\n    padding: 30px 20px 20px 20px;\n    background-color: ${pick({\n        enterprise: variables.backgroundColor,\n        prisma: variables.backgroundColorPopup,\n    })};\n    box-shadow: ${variables.overlayShadow};\n    margin: 0 auto 20px;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst WaitSpinnerWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    margin-top: 40px;\n    margin-bottom: 40px;\n`;\n\nconst IPAllowListComponent: FC = () => {\n    const [formConfig, setFormConfig] = useState<IFormConfig>();\n    const [formData, setFormData] = useState<IIPAllowListFormData>({});\n    const [isLoading, setIsLoading] = useState(true);\n    const [errorMessages, setErrorMessages] = useState<ErrorMessagesType>([]);\n    const [tokenAuthEnabled, setTokenAuthEnabled] = useState(false);\n\n    const updateErrMsgWithTabName = (errorMsgs: string[] = []): ErrorMessagesType => {\n        const nonEmptyErrorMsgs: ErrorMessagesType = [];\n        errorMsgs.forEach((errorMsg, index) => {\n            if (!errorMsg) {\n                return;\n            }\n            nonEmptyErrorMsgs.push({\n                key: MESSAGES.IP_ALLOW_LIST.TAB_NAMES[featureTypes[index]],\n                value: upperFirst(errorMsg),\n            });\n        });\n        return nonEmptyErrorMsgs;\n    };\n\n    useEffect(() => {\n        const initFormConfig = async (): Promise<void> => {\n            setFormConfig(await fetchFormConfig());\n        };\n\n        const initConfigSettings = async (): Promise<void> => {\n            const { records, error } = await fetchConfigSettings();\n            setFormData(records);\n            setErrorMessages(updateErrMsgWithTabName(error));\n        };\n\n        const exec = async (): Promise<void> => {\n            try {\n                // Init UserService singleton to start ACS related page bootstrap\n                await UserService.init('v1');\n                setTokenAuthEnabled(true);\n                await Promise.all([initFormConfig(), initConfigSettings()]);\n            } catch (err) {\n                const errorCodes = new Set([\n                    ERRORS_CODES.STACK_ID_INVALID,\n                    ERRORS_CODES.ACS_ENVIRONMENT_NOT_FOUND,\n                    ERRORS_CODES.CANNOT_CREATE_JWT_TOKEN,\n                ]);\n                if (errorCodes.has(err.message)) {\n                    setTokenAuthEnabled(true);\n                    setErrorMessages([MESSAGES.USER_CONTEXT.ERRORS[err.message]]);\n                } else if (err.message === ERRORS_CODES.TOKEN_AUTH_DISABLED) {\n                    setTokenAuthEnabled(false);\n                } else {\n                    setErrorMessages([err.message]);\n                }\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        exec();\n    }, []);\n\n    const handleFormUpdate: IValueChangeHandler<IIPAllowListFormData> = (): void => {};\n\n    const handleSubmit: ISubmitHandler<IIPAllowListFormData> = async ({ data, successCb, failureCb }) => {\n        const { records, error = [] } = await manageIPAllowList(data);\n        // If no records were updated, do nothing.\n        if (!records && !error.length) {\n            return;\n        }\n        // Update records only if present. For error cases, we don't want to re-render the forms to preserve the user input that caused errors.\n        if (records) {\n            setFormData(records);\n        }\n        if (error.length) {\n            failureCb(updateErrMsgWithTabName(error));\n        } else {\n            successCb();\n        }\n    };\n\n    return (\n        <>\n            {tokenAuthEnabled && !isLoading && (\n                <WrapperDiv data-test={TEST_IDS.CONTAINER}>\n                    <p>\n                        {MESSAGES.IP_ALLOW_LIST.DESCRIPTION}{' '}\n                        <Link\n                            to={createDocsURL(IP_ALLOW_LIST_LOC_STR)}\n                            openInNewContext\n                            data-test-name={TEST_IDS.LEARN_MORE_LINK}\n                        >\n                            {MESSAGES.COMMON.LEARN_MORE}\n                        </Link>\n                    </p>\n                    {errorMessages.length > 0 && <Errors errorMessages={errorMessages} />}\n                    {!errorMessages.length && (\n                        <SUIFormRenderer<IIPAllowListFormData>\n                            schema={formConfig.schema}\n                            uischema={formConfig.uischema}\n                            data={formData}\n                            onChange={handleFormUpdate}\n                            onSubmit={handleSubmit}\n                            customValidators={customValidators}\n                        />\n                    )}\n                </WrapperDiv>\n            )}\n            {!tokenAuthEnabled && !isLoading && <TokenAuthDisabled />}\n            {isLoading && (\n                <WaitSpinnerWrapper data-test-name={TEST_IDS.WAITSPINNER}>\n                    <WaitSpinner size=\"medium\" />\n                </WaitSpinnerWrapper>\n            )}\n        </>\n    );\n};\n\nconst IPAllowListPage = compose([withSplunkEnvFilter(['cloud']), withRBACFilter(['edit_ip_allow_list'])])(\n    IPAllowListComponent\n);\n\nexport default IPAllowListPage;\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { $any, SplunkInstanceTypes, SplunkExperienceTypes } from '../../../app.interfaces';\nimport { ServerInfoService } from '../../services/ServerInfoService';\nimport { UserContextService } from '../../services/UserContextService';\nimport { ExperienceService } from '../../services/ExperienceService';\nimport { IFilterHOCReturnType, OS, OSList } from './filterHOCs.interfaces';\nimport { MESSAGES } from '../../../messages';\n\nconst ErrorWrapper = styled.div`\n    margin: 25px;\n`;\n\nconst ErrorView: FC<{ msg: string }> = ({ msg = 'Error loading page' }) => {\n    return <h2>{msg}</h2>;\n};\n\nexport const withRBACFilter =\n    (permissionsNeeded = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const hasPermission = UserContextService.canReadPage(permissionsNeeded);\n        const RBACFilterComp: FC<$any> = (props) => {\n            return !hasPermission ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.RBAC_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return RBACFilterComp;\n    };\n\nexport const withSplunkEnvFilter =\n    (supportedEnvs: SplunkInstanceTypes[] = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsEnv = supportedEnvs.includes(ServerInfoService.getSplunkInstanceType());\n        const SplunkEnvFilterComp: FC<$any> = (props) => {\n            return !supportsEnv ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.SPLUNK_ENV_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return SplunkEnvFilterComp;\n    };\n\nexport const withOSFilter =\n    (supportedOS: OSList = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsOS = supportedOS.includes(ServerInfoService.getOS() as OS);\n        const OSFilterComp: FC<$any> = (props) => {\n            return !supportsOS ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.OS_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return OSFilterComp;\n    };\n\nexport const withExperienceFilter =\n    (supportedExperiences: SplunkExperienceTypes[] = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsExperience = supportedExperiences.includes(ExperienceService.getExperienceType());\n        const ExperienceFilterComp: FC<$any> = (props) => {\n            return !supportsExperience ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.SPLUNK_EXPERIENCE_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return ExperienceFilterComp;\n    };\n","import { normalizeDataTestIds } from '@splunk/sui-forms-shared-utils';\nimport { remoteAppName } from '../../../constants';\n\nconst TEST_IDS = {\n    CONTAINER: 'Container',\n    LEARN_MORE_LINK: 'LearnmoreLink',\n    TOKEN_AUTH_BTN: 'TokenAuthBtn',\n};\n\nnormalizeDataTestIds({ remoteAppName, compName: 'TokenAuthDisabled', testIds: TEST_IDS });\nexport default TEST_IDS;\n","import React, { FC } from 'react';\nimport Button from '@splunk/react-ui/Button';\nimport Link from '@splunk/react-ui/Link';\nimport P from '@splunk/react-ui/Paragraph';\nimport { createURL, createDocsURL } from '@splunk/splunk-utils/url';\nimport styled from 'styled-components';\nimport { MESSAGES } from '../../../messages';\nimport TEST_IDS from './TokenAuthDisabled.testids';\n\nconst WrapperDiv = styled.div`\n    padding: 0px 20px 0;\n`;\n\nconst StyledLink = styled(Link)`\n    margin-left: 5px;\n`;\n\nconst TokenAuthDisabled: FC = () => {\n    return (\n        <WrapperDiv data-test-name={TEST_IDS.CONTAINER}>\n            <P>\n                {MESSAGES.TOKEN_AUTH_DISABLED.PAGE_CONTENT}\n                <StyledLink\n                    to={createDocsURL(MESSAGES.TOKEN_AUTH_DISABLED.TOKEN_AUTH_LEARN_MORE)}\n                    openInNewContext\n                    data-test-name={TEST_IDS.LEARN_MORE_LINK}\n                >\n                    {MESSAGES.COMMON.LEARN_MORE}\n                </StyledLink>\n            </P>\n            <Button\n                label={MESSAGES.TOKEN_AUTH_DISABLED.TOKEN_AUTH_BTN_LABEL}\n                appearance=\"primary\"\n                to={createURL(MESSAGES.TOKEN_AUTH_DISABLED.TOKEN_AUTH_URL)}\n                openInNewContext\n                data-test-name={TEST_IDS.TOKEN_AUTH_BTN}\n            />\n        </WrapperDiv>\n    );\n};\n\nexport default TokenAuthDisabled;\n","import { get } from 'lodash';\nimport querystring from 'querystring';\nimport { defaultFetchInit, handleResponse } from '@splunk/splunk-utils/fetch';\nimport { createRESTURL } from '@splunk/splunk-utils/url';\nimport { UserContextService } from '../UserContextService';\nimport { ACSEnvironments, ACSVersion, IWithJwtTokenRetryFn } from './UserService.interfaces';\nimport ERRORS_CODES from './errors';\n\nclass UserServiceSingleton {\n    private isInitialized = false;\n\n    private acsVersion = 'v1';\n\n    private isTokenAuthDisabled = false;\n\n    private jwtToken = '';\n\n    private stackID = '';\n\n    private acsBaseURL = '';\n\n    private checkIfTokenAuthIsEnabledURL = createRESTURL('admin/Token-auth/tokens_auth?output_mode=json');\n\n    private createJWTTokenURL = createRESTURL('authorization/tokens?output_mode=json');\n\n    private stackIDUrl = createRESTURL('properties/web/remoteUI?output_mode=json', {\n        app: '100-whisper-searchhead',\n    });\n\n    public init = async (version: ACSVersion): Promise<void> => {\n        if (this.isInitialized) {\n            return;\n        }\n        this.acsVersion = version;\n\n        // These next 4 methods must be called in this order\n        await this.fetchIsTokenAuthDisabled();\n        await this.fetchStackID();\n        await this.createJwtToken();\n        await this.fetchACSEnv();\n        this.isInitialized = true;\n    };\n\n    public getStackID = (): string => {\n        return this.stackID;\n    };\n\n    public getACSBaseURL = (): string => {\n        return this.acsBaseURL;\n    };\n\n    public getACSHeaders = (): Headers => {\n        return new Headers({\n            Authorization: `Bearer ${this.jwtToken}`,\n            'Content-Type': 'application/json',\n            'User-Agent': 'Splunk-ACS-UI',\n        });\n    };\n\n    private createJwtToken = async (): Promise<void> => {\n        const jwtTokenArgs = {\n            name: UserContextService.getCurrUsername(),\n            expires_on: '+2m',\n            audience: 'IP_ALLOW_LIST_UI',\n            type: 'ephemeral',\n        };\n\n        const fetchSettings = {\n            ...defaultFetchInit,\n            method: 'POST',\n            body: querystring.encode(jwtTokenArgs),\n        };\n        try {\n            const response = await fetch(this.createJWTTokenURL, fetchSettings);\n            const json = await handleResponse(201)(response);\n            this.jwtToken = get(json, 'entry[0].content.token', '');\n        } catch (err) {\n            throw new Error(ERRORS_CODES.CANNOT_CREATE_JWT_TOKEN);\n        }\n    };\n\n    public withJwtTokenRetry: IWithJwtTokenRetryFn = async (callbackFn): Promise<Response> => {\n        const response = await callbackFn();\n        if (response.status === 401) {\n            await this.createJwtToken();\n            return callbackFn();\n        }\n        return response;\n    };\n\n    private fetchIsTokenAuthDisabled = async (): Promise<void> => {\n        try {\n            const response = await fetch(this.checkIfTokenAuthIsEnabledURL, { ...defaultFetchInit });\n            const json = await handleResponse(200)(response);\n            this.isTokenAuthDisabled = get(json.entry[0], 'content.disabled', true);\n            if (this.isTokenAuthDisabled) {\n                throw new Error(ERRORS_CODES.TOKEN_AUTH_DISABLED);\n            }\n        } catch (err) {\n            throw new Error(ERRORS_CODES.TOKEN_AUTH_DISABLED);\n        }\n    };\n\n    private fetchStackID = async (): Promise<void> => {\n        try {\n            const response = await fetch(this.stackIDUrl, { ...defaultFetchInit });\n            const json = await handleResponse(200)(response);\n            const stackIDEntry = json.entry.find((item) => item.name === 'stack_id');\n            this.stackID = stackIDEntry.content;\n        } catch (err) {\n            throw new Error(ERRORS_CODES.STACK_ID_INVALID);\n        }\n    };\n\n    /*\n     * Uses the ACS status endpoint to determine what environment the stack is in (staging | production)\n     * and then set's the acsBaseUrl so service consumer can form correct ACS request URL\n     */\n    private fetchACSEnv = async (): Promise<void> => {\n        try {\n            const prodEnvUrl = this.formatACSBaseUrl('production');\n            const stgEnvUrl = this.formatACSBaseUrl('staging');\n            const statusEp = '/status';\n\n            const prodResponse = await fetch(prodEnvUrl + statusEp, { headers: this.getACSHeaders() });\n            if (prodResponse.status === 200) {\n                this.acsBaseURL = prodEnvUrl;\n                return;\n            }\n\n            const stgResponse = await fetch(stgEnvUrl + statusEp, { headers: this.getACSHeaders() });\n            if (stgResponse.status === 200) {\n                this.acsBaseURL = stgEnvUrl;\n                return;\n            }\n\n            throw new Error(ERRORS_CODES.ACS_ENVIRONMENT_NOT_FOUND);\n        } catch (err) {\n            throw new Error(ERRORS_CODES.ACS_ENVIRONMENT_NOT_FOUND);\n        }\n    };\n\n    private formatACSBaseUrl = (env: ACSEnvironments): string => {\n        return env === 'staging'\n            ? `https://staging.admin.splunk.com/${this.stackID}/adminconfig/${this.acsVersion}`\n            : `https://admin.splunk.com/${this.stackID}/adminconfig/${this.acsVersion}`;\n    };\n}\n\nexport const UserService = new UserServiceSingleton();\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".error-message [data-test='content'] {\\n    margin-left: 0px;\\n}\\n\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/config-page/ip-allow-list/IPAllowList.css\"],\"names\":[],\"mappings\":\"AAAA;IACI,gBAAgB;AACpB\",\"sourcesContent\":[\".error-message [data-test='content'] {\\n    margin-left: 0px;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n"],"names":["FORMATS","customValidators","value","isValid","validateIPAddress","schema","type","properties","items","format","hec","s2s","uischema","elements","label","MESSAGES","FeatureType","scope","options","customComponentProps","validators","placeholder","labelsForScreenReader","deleteConfirmationModal","title","content","suiComponentProps","addLabel","featureTypes","constructIPAllowListURL","feature","UserService","handleACSResponse","async","response","status","err","json","Error","message","rawText","text","JSON","parse","addDelSubnet","method","subnets","args","body","stringify","fetch","headers","console","log","initialData","reduce","acc","curr","index","generateDiff","prevSubnets","currSubnets","added","difference","removed","generateErrorMessage","records","map","resp","reason","fetchConfigSettings","responses","Promise","allSettled","acsResponse","filteredResp","filter","subnet","indexOf","removeFedSearch","fetchIPAllowList","formData","sort","error","TEST_IDS","CONTAINER","LEARN_MORE_LINK","WAITSPINNER","normalizeDataTestIds","remoteAppName","compName","testIds","WrapperDiv","styled","pick","enterprise","variables","prisma","WaitSpinnerWrapper","compose","withSplunkEnvFilter","withRBACFilter","formConfig","setFormConfig","useState","setFormData","isLoading","setIsLoading","errorMessages","setErrorMessages","tokenAuthEnabled","setTokenAuthEnabled","updateErrMsgWithTabName","errorMsgs","nonEmptyErrorMsgs","forEach","errorMsg","push","key","upperFirst","useEffect","initFormConfig","resolve","fetchFormConfig","initConfigSettings","all","Set","ERRORS_CODES","has","exec","to","createDocsURL","openInNewContext","length","Errors","data","onChange","onSubmit","successCb","failureCb","promises","trackingData","hasUpdates","i","updatedData","setPathValue","then","catch","reject","TrackingService","filterErrorMessages","errorUseCases","join","manageIPAllowList","size","ErrorWrapper","ErrorView","msg","permissionsNeeded","Comp","hasPermission","UserContextService","props","supportedEnvs","supportsEnv","includes","ServerInfoService","withOSFilter","supportedOS","supportsOS","withExperienceFilter","supportedExperiences","supportsExperience","ExperienceService","TOKEN_AUTH_BTN","StyledLink","Link","appearance","createURL","createRESTURL","app","this","isInitialized","acsVersion","version","fetchIsTokenAuthDisabled","fetchStackID","createJwtToken","fetchACSEnv","stackID","acsBaseURL","Headers","Authorization","jwtToken","jwtTokenArgs","name","expires_on","audience","fetchSettings","defaultFetchInit","querystring","encode","createJWTTokenURL","handleResponse","get","callbackFn","checkIfTokenAuthIsEnabledURL","isTokenAuthDisabled","entry","stackIDUrl","stackIDEntry","find","item","prodEnvUrl","formatACSBaseUrl","stgEnvUrl","statusEp","getACSHeaders","env","___CSS_LOADER_EXPORT___","module","id"],"sourceRoot":""}