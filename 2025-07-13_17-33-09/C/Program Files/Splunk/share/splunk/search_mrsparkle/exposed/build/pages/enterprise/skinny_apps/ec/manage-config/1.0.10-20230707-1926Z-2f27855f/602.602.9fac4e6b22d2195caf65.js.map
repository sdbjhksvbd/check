{"version":3,"file":"602.602.9fac4e6b22d2195caf65.js","mappings":"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","sources":["webpack://remote-manage-config-page/./src/config-page/dashboards-trusted-domains-list/DashboardsTrustedDomainsList.constants.ts","webpack://remote-manage-config-page/./src/config-page/dashboards-trusted-domains-list/DashboardsTrustedDomainsList.apiservice.ts","webpack://remote-manage-config-page/./src/config-page/dashboards-trusted-domains-list/DashboardsTrustedDomainsList.custom-validators.ts","webpack://remote-manage-config-page/./src/config-page/dashboards-trusted-domains-list/data/jsonforms/schema/index.ts","webpack://remote-manage-config-page/./src/config-page/dashboards-trusted-domains-list/data/jsonforms/uischema/index.ts","webpack://remote-manage-config-page/./src/config-page/dashboards-trusted-domains-list/DashboardsTrustedDomainsList.testids.ts","webpack://remote-manage-config-page/./src/config-page/dashboards-trusted-domains-list/DashboardsTrustedDomainsList.component.tsx","webpack://remote-manage-config-page/./src/config-page/dashboards-trusted-domains-list/DashboardsTrustedDomainsList.utils.ts","webpack://remote-manage-config-page/./src/shared/components/FilterHOCs/filterHOCs.tsx"],"sourcesContent":["export const DASHBOARDS_TRUSTED_DOMAINS_LIST_LOC_STR = 'dashboards.trusted.domains';\nexport const DASHBOARD_PREFIX = 'dashboards_trusted_domain.';\n","import { createRESTURL } from '@splunk/splunk-utils/url';\nimport { differenceWith, isEqual, set as setPathValue } from 'lodash';\nimport querystring from 'querystring';\n\nimport { defaultFetchInit } from '@splunk/splunk-utils/fetch';\nimport { DASHBOARD_PREFIX } from './DashboardsTrustedDomainsList.constants';\nimport {\n    ParsedDashboardUrlResponse,\n    DashboardFlags,\n    DashboardsTrustedDomainsListFormData,\n    DashboardUrl,\n    IGenerateDiffFn,\n} from './DashboardsTrustedDomainsList.interfaces';\nimport { TrackingService } from '../../shared/services/TrackingService';\n\nlet initialData = {\n    records: [],\n    errors: [],\n} as ParsedDashboardUrlResponse;\n\nconst generateDiff: IGenerateDiffFn = ({ prevDomains, currDomains }) => {\n    return {\n        added: differenceWith(currDomains, prevDomains, isEqual),\n        removed: differenceWith(prevDomains, currDomains, isEqual),\n    };\n};\n\nconst generateErrorMessage = async (err: Response): Promise<ParsedDashboardUrlResponse> => {\n    const errorResponse = await err.json();\n    if (errorResponse?.messages.length) {\n        errorResponse.messages\n            .filter((message) => message.type === 'ERROR')\n            .forEach((errorMessage) => {\n                if (errorMessage.text) {\n                    initialData.errors.push(errorMessage.text);\n                }\n            });\n    }\n    return initialData;\n};\n\n/*\n    In the response object, the keys prefixed with DASHBOARD_PREFIX 'dashboards_trusted_domain.' contain the dashboard url records.\n    normalizedObject function helps segregate these and returns a tuple of [Dashboard URL records (array of objects), dashboardFlags]\n */\nexport const normalizedObject = (dataObject: { [key: string]: string }): [DashboardUrl[], DashboardFlags] => {\n    const normalizedArray = [];\n    const dashboardFlags: DashboardFlags = {\n        enforce_dashboards_csp: null,\n        enable_dashboards_external_content_restriction: null,\n        enable_dashboards_redirection_restriction: null,\n    };\n    const dashboardFlagsKeys = Object.keys(dashboardFlags);\n\n    const addFlagVlaue = (flagName: string): void => {\n        const isEnforcedResponse = dataObject[flagName];\n        if (isEnforcedResponse === '1' || isEnforcedResponse === 'true') {\n            dashboardFlags[flagName] = true;\n        } else {\n            dashboardFlags[flagName] = false;\n        }\n    };\n\n    Object.keys(dataObject).forEach((key) => {\n        if (dashboardFlagsKeys.indexOf(key) !== -1) {\n            addFlagVlaue(key);\n        }\n\n        if (key.startsWith(DASHBOARD_PREFIX) && dataObject[key] !== '') {\n            const name = key.split('.')[1];\n            normalizedArray.push({ name, value: dataObject[key] });\n        }\n    });\n\n    return [normalizedArray, dashboardFlags];\n};\n\nconst handleResponse = async (response: Response): Promise<ParsedDashboardUrlResponse> => {\n    if (response.status === 200) {\n        try {\n            const jsonResponse = await response.json();\n            const { content } = jsonResponse?.entry[0];\n\n            if (content) {\n                initialData = {\n                    records: [],\n                    errors: [],\n                };\n            }\n\n            [initialData.records, initialData.dashboardFlags] = normalizedObject(content);\n            return initialData;\n        } catch (err) {\n            throw new Error(err);\n        }\n    } else {\n        return generateErrorMessage(response);\n    }\n};\n\nexport const fetchDashboardsTrustedDomainsList = async (): Promise<ParsedDashboardUrlResponse> => {\n    const response = await fetch(\n        createRESTURL('web-features/feature:dashboards_csp?output_mode=json', {\n            owner: 'nobody',\n            app: 'system',\n        }),\n        {\n            ...defaultFetchInit,\n        }\n    );\n    /* eslint-disable no-return-await */\n    return await handleResponse(response);\n};\n\nexport const addDelDashboardUrl = async (\n    updatedData: DashboardsTrustedDomainsListFormData\n): Promise<ParsedDashboardUrlResponse> => {\n    const { added, removed } = generateDiff({\n        prevDomains: initialData.records,\n        currDomains: updatedData['dashboard-values'],\n    });\n    const modifiedData = {};\n    const trackingData = {};\n    let hasUpdates = false;\n\n    if (removed.length) {\n        hasUpdates = true;\n        removed.forEach((element) => {\n            modifiedData[`${DASHBOARD_PREFIX}${element.name}`] = '';\n        });\n        setPathValue(trackingData, `request.remove`, removed.length);\n    }\n\n    if (added.length) {\n        hasUpdates = true;\n        added.forEach((element) => {\n            modifiedData[`${DASHBOARD_PREFIX}${element.name}`] = element.value;\n        });\n        setPathValue(trackingData, `request.add`, added.length);\n    }\n\n    if (hasUpdates) {\n        try {\n            const response = await fetch(\n                createRESTURL('web-features/feature:dashboards_csp', {\n                    owner: 'nobody',\n                    app: 'system',\n                }),\n                {\n                    ...defaultFetchInit,\n                    method: 'POST',\n                    body: querystring.encode({ ...modifiedData, output_mode: 'json' }),\n                }\n            );\n            const data = await handleResponse(response);\n            const { errors } = data;\n\n            if (!errors.length) {\n                if (added.length) {\n                    setPathValue(trackingData, `response.added`, added.length);\n                }\n\n                if (removed.length) {\n                    setPathValue(trackingData, `response.removed`, removed.length);\n                }\n            }\n\n            TrackingService.trackEvent({\n                type: 'manageConfigPage.submitBtnClicked',\n                data: trackingData,\n            });\n\n            if (errors.length) {\n                TrackingService.trackEvent({\n                    type: 'manageConfigPage.errorOnSubmit',\n                    data: {\n                        errorUseCases: data.errors.join(', '),\n                    },\n                });\n            }\n\n            return data;\n        } catch (err) {\n            return { records: null, errors: [err.message] };\n        }\n    } else {\n        return Promise.resolve({});\n    }\n};\n","import { validateDashboardUrlFormat, validateDashboardUrlKey } from '../../shared/utils/helper';\n\nexport const FORMATS = {\n    DASHBOARD_URL_KEY: 'dashboard-url-key',\n    DASHBOARD_URL_VALUE: 'dashboard-url-format',\n};\n\nexport const customValidators = {\n    [FORMATS.DASHBOARD_URL_KEY]: (value: string): boolean => {\n        const { isValid } = validateDashboardUrlKey(value);\n        return isValid;\n    },\n    [FORMATS.DASHBOARD_URL_VALUE]: (value: string): boolean => {\n        const { isValid } = validateDashboardUrlFormat(value);\n        return isValid;\n    },\n};\n","import { JsonSchema4 } from '@jsonforms/core';\nimport { FORMATS } from '../../../DashboardsTrustedDomainsList.custom-validators';\n\nexport const schema: JsonSchema4 = {\n    type: 'object',\n    properties: {\n        'dashboard-values': {\n            type: 'array',\n            items: {\n                type: 'object',\n                properties: {\n                    name: {\n                        type: 'string',\n                        format: FORMATS.DASHBOARD_URL_KEY,\n                    },\n                    value: {\n                        type: 'string',\n                        format: FORMATS.DASHBOARD_URL_VALUE,\n                    },\n                },\n            },\n        },\n    },\n};\n","import { MESSAGES } from '../../../../../messages';\nimport { validateDashboardUrlFormat, validateDashboardUrlKey } from '../../../../../shared/utils/helper';\n\nexport const uiSchema = {\n    type: 'HorizontalLayout',\n    elements: [\n        {\n            type: 'FormRows',\n            scope: '#/properties/dashboard-values',\n            options: {\n                customComponentProps: {\n                    validators: [validateDashboardUrlKey, validateDashboardUrlFormat],\n                    placeholder: ['e.g. splunk', 'e.g. https://www.splunk.com'],\n                    headers: [\n                        MESSAGES.DASHBOARDS_TRUSTED_DOMAINS_LIST.HEADER.NAME,\n                        MESSAGES.DASHBOARDS_TRUSTED_DOMAINS_LIST.HEADER.VALUE,\n                    ],\n                    labelsForScreenReader: [\n                        MESSAGES.DASHBOARDS_TRUSTED_DOMAINS_LIST.LABEL_SCREEN_READER.NAME,\n                        MESSAGES.DASHBOARDS_TRUSTED_DOMAINS_LIST.LABEL_SCREEN_READER.VALUE,\n                    ],\n                    deleteConfirmationModal: {\n                        title: MESSAGES.DASHBOARDS_TRUSTED_DOMAINS_LIST.DELETE_CONFIRMATION_MODAL_TITLE,\n                        content: MESSAGES.DASHBOARDS_TRUSTED_DOMAINS_LIST.DELETE_CONFIRMATION_MODAL_CONTENT,\n                    },\n                },\n                suiComponentProps: {\n                    addLabel: MESSAGES.DASHBOARDS_TRUSTED_DOMAINS_LIST.ADD_DOMAIN_BTN_LABEL,\n                },\n            },\n        },\n    ],\n};\n","import { normalizeDataTestIds } from '@splunk/sui-forms-shared-utils';\nimport { remoteAppName } from '../../constants';\n\nconst TEST_IDS = {\n    CONTAINER: 'Container',\n    LEARN_MORE_LINK: 'LearnmoreLink',\n    WAITSPINNER: 'Waitspinner',\n};\n\nnormalizeDataTestIds({ remoteAppName, compName: 'DashboardsTrustedDomainsList', testIds: TEST_IDS });\nexport default TEST_IDS;\n","import React, { FC, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport Heading from '@splunk/react-ui/Heading';\nimport Link from '@splunk/react-ui/Link';\nimport Message from '@splunk/react-ui/Message';\nimport WaitSpinner from '@splunk/react-ui/WaitSpinner';\nimport { createDocsURL } from '@splunk/splunk-utils/url';\nimport SUIFormRenderer, { ISubmitHandler, Errors } from '@splunk/sui-form-renderer';\nimport { pick, variables } from '@splunk/themes';\nimport { flowRight as compose } from 'lodash';\n\nimport {\n    addDelDashboardUrl,\n    fetchDashboardsTrustedDomainsList,\n} from './DashboardsTrustedDomainsList.apiservice';\nimport { getWarningMessage } from './DashboardsTrustedDomainsList.utils';\nimport { DASHBOARDS_TRUSTED_DOMAINS_LIST_LOC_STR } from './DashboardsTrustedDomainsList.constants';\nimport { DashboardsTrustedDomainsListFormData } from './DashboardsTrustedDomainsList.interfaces';\nimport { customValidators } from './DashboardsTrustedDomainsList.custom-validators';\nimport { schema } from './data/jsonforms/schema';\nimport { uiSchema } from './data/jsonforms/uischema';\nimport { MESSAGES } from '../../messages';\nimport TEST_IDS from './DashboardsTrustedDomainsList.testids';\nimport { withRBACFilter, withSplunkEnvFilter } from '../../shared/components/FilterHOCs/filterHOCs';\n\nconst WaitSpinnerWrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    margin-top: 40px;\n    margin-bottom: 40px;\n`;\n\nconst WrapperDiv = styled.div`\n    max-width: 960px;\n    padding: 30px 20px 20px 20px;\n    background-color: ${pick({\n        enterprise: variables.backgroundColor,\n        prisma: variables.backgroundColorPopup,\n    })};\n    box-shadow: ${variables.overlayShadow};\n    margin: 0 auto 20px;\n    display: flex;\n    flex-direction: column;\n`;\n\nconst DashboardsTrustedDomainsList: FC = () => {\n    const [formData, setFormData] = useState<DashboardsTrustedDomainsListFormData>({\n        'dashboard-values': [],\n    });\n\n    const [errorMessages, setErrorMessages] = useState<string[]>([]);\n    const [notEnforcedMsg, setNotEnforcedMsg] = useState<string>('');\n    const [isLoading, setIsLoading] = useState(true);\n\n    useEffect(() => {\n        (async (): Promise<void> => {\n            const { records, errors, dashboardFlags } = await fetchDashboardsTrustedDomainsList();\n            setNotEnforcedMsg(getWarningMessage(dashboardFlags));\n\n            if (records && records.length) {\n                setFormData({\n                    'dashboard-values': records,\n                });\n            }\n\n            if (errors.length) {\n                setErrorMessages(errors);\n            }\n\n            setIsLoading(false);\n        })();\n    }, []);\n\n    const handleSubmit: ISubmitHandler<DashboardsTrustedDomainsListFormData> = async ({\n        data,\n        successCb,\n        failureCb,\n    }) => {\n        const { records, errors } = await addDelDashboardUrl(data);\n        // If no records were updated, do nothing\n        if (!records && !errors?.length) {\n            return;\n        }\n\n        // Update records only if present. For error cases, we don't want to re-render the forms to preserve the user input that caused errors\n        if (errors.length) {\n            failureCb(errors);\n        } else {\n            setFormData({\n                'dashboard-values': records,\n            });\n            successCb();\n        }\n    };\n\n    const renderListEnforced = (): JSX.Element => {\n        return (\n            <Message appearance=\"fill\" type=\"warning\">\n                {MESSAGES.DASHBOARDS_TRUSTED_DOMAINS_LIST[notEnforcedMsg]}\n                <Link to={createDocsURL(DASHBOARDS_TRUSTED_DOMAINS_LIST_LOC_STR)} openInNewContext>\n                    {MESSAGES.COMMON.LEARN_MORE}\n                </Link>\n            </Message>\n        );\n    };\n\n    return (\n        <>\n            {!isLoading && (\n                <WrapperDiv data-test-name={TEST_IDS.CONTAINER}>\n                    {!!notEnforcedMsg && renderListEnforced()}\n                    <p>\n                        {MESSAGES.DASHBOARDS_TRUSTED_DOMAINS_LIST.DESCRIPTION}\n                        <Link\n                            to={createDocsURL(DASHBOARDS_TRUSTED_DOMAINS_LIST_LOC_STR)}\n                            openInNewContext\n                            data-test-name={TEST_IDS.LEARN_MORE_LINK}\n                        >\n                            {MESSAGES.COMMON.LEARN_MORE}\n                        </Link>\n                    </p>\n                    <Heading>{MESSAGES.DASHBOARDS_TRUSTED_DOMAINS_LIST.TRUSTED_DOMAINS}</Heading>\n                    {errorMessages.length > 0 && <Errors errorMessages={errorMessages} />}\n                    {!errorMessages.length && (\n                        <SUIFormRenderer\n                            schema={schema}\n                            uischema={uiSchema}\n                            data={formData}\n                            onSubmit={handleSubmit}\n                            customValidators={customValidators}\n                        />\n                    )}\n                </WrapperDiv>\n            )}\n            {isLoading && (\n                <WaitSpinnerWrapper data-test-name={TEST_IDS.WAITSPINNER}>\n                    <WaitSpinner size=\"medium\" />\n                </WaitSpinnerWrapper>\n            )}\n        </>\n    );\n};\n\nconst DTDL = compose([withSplunkEnvFilter(['cloud']), withRBACFilter(['edit_dashboard_allow_list'])])(\n    DashboardsTrustedDomainsList\n);\n\nexport default DTDL;\n","import { DashboardFlags } from './DashboardsTrustedDomainsList.interfaces';\n\nexport const getWarningMessage = (dashboardFlags: DashboardFlags): string => {\n    let message = '';\n    if (\n        dashboardFlags.enable_dashboards_external_content_restriction === false &&\n        dashboardFlags.enable_dashboards_redirection_restriction === false\n    ) {\n        message = 'LOAD_AND_REDIRECT_NOT_ENFORCED';\n    } else if (dashboardFlags.enable_dashboards_external_content_restriction === false) {\n        message = 'CONTENT_LOAD_NOT_ENFORCED';\n    } else if (dashboardFlags.enable_dashboards_redirection_restriction === false) {\n        message = 'REDIRECT_NOT_ENFORCED';\n    } else if (\n        dashboardFlags.enforce_dashboards_csp === false &&\n        typeof dashboardFlags.enable_dashboards_external_content_restriction !== 'boolean'\n    ) {\n        message = 'CSP_NOT_ENFORCED';\n    }\n\n    return message;\n};\n","import React, { FC } from 'react';\nimport styled from 'styled-components';\nimport { $any, SplunkInstanceTypes, SplunkExperienceTypes } from '../../../app.interfaces';\nimport { ServerInfoService } from '../../services/ServerInfoService';\nimport { UserContextService } from '../../services/UserContextService';\nimport { ExperienceService } from '../../services/ExperienceService';\nimport { IFilterHOCReturnType, OS, OSList } from './filterHOCs.interfaces';\nimport { MESSAGES } from '../../../messages';\n\nconst ErrorWrapper = styled.div`\n    margin: 25px;\n`;\n\nconst ErrorView: FC<{ msg: string }> = ({ msg = 'Error loading page' }) => {\n    return <h2>{msg}</h2>;\n};\n\nexport const withRBACFilter =\n    (permissionsNeeded = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const hasPermission = UserContextService.canReadPage(permissionsNeeded);\n        const RBACFilterComp: FC<$any> = (props) => {\n            return !hasPermission ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.RBAC_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return RBACFilterComp;\n    };\n\nexport const withSplunkEnvFilter =\n    (supportedEnvs: SplunkInstanceTypes[] = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsEnv = supportedEnvs.includes(ServerInfoService.getSplunkInstanceType());\n        const SplunkEnvFilterComp: FC<$any> = (props) => {\n            return !supportsEnv ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.SPLUNK_ENV_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return SplunkEnvFilterComp;\n    };\n\nexport const withOSFilter =\n    (supportedOS: OSList = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsOS = supportedOS.includes(ServerInfoService.getOS() as OS);\n        const OSFilterComp: FC<$any> = (props) => {\n            return !supportsOS ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.OS_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return OSFilterComp;\n    };\n\nexport const withExperienceFilter =\n    (supportedExperiences: SplunkExperienceTypes[] = []): IFilterHOCReturnType<$any> =>\n    (Comp: React.ComponentType): FC<$any> => {\n        const supportsExperience = supportedExperiences.includes(ExperienceService.getExperienceType());\n        const ExperienceFilterComp: FC<$any> = (props) => {\n            return !supportsExperience ? (\n                <ErrorWrapper>\n                    <ErrorView msg={MESSAGES.FILTER_HOC.ERRORS.SPLUNK_EXPERIENCE_FILTER} />\n                </ErrorWrapper>\n            ) : (\n                <Comp {...props} />\n            );\n        };\n        return ExperienceFilterComp;\n    };\n"],"names":["DASHBOARDS_TRUSTED_DOMAINS_LIST_LOC_STR","DASHBOARD_PREFIX","initialData","records","errors","handleResponse","async","response","status","errorResponse","err","json","messages","length","filter","message","type","forEach","errorMessage","text","push","generateErrorMessage","jsonResponse","content","entry","dashboardFlags","dataObject","normalizedArray","enforce_dashboards_csp","enable_dashboards_external_content_restriction","enable_dashboards_redirection_restriction","dashboardFlagsKeys","Object","keys","key","indexOf","flagName","isEnforcedResponse","addFlagVlaue","startsWith","name","split","value","normalizedObject","Error","FORMATS","customValidators","isValid","validateDashboardUrlKey","validateDashboardUrlFormat","schema","properties","items","format","uiSchema","elements","scope","options","customComponentProps","validators","placeholder","headers","MESSAGES","labelsForScreenReader","deleteConfirmationModal","title","suiComponentProps","addLabel","TEST_IDS","CONTAINER","LEARN_MORE_LINK","WAITSPINNER","normalizeDataTestIds","remoteAppName","compName","testIds","WaitSpinnerWrapper","styled","WrapperDiv","pick","enterprise","variables","prisma","compose","withSplunkEnvFilter","withRBACFilter","formData","setFormData","useState","errorMessages","setErrorMessages","notEnforcedMsg","setNotEnforcedMsg","isLoading","setIsLoading","useEffect","fetch","createRESTURL","owner","app","defaultFetchInit","fetchDashboardsTrustedDomainsList","getWarningMessage","appearance","to","createDocsURL","openInNewContext","Errors","uischema","data","onSubmit","successCb","failureCb","added","removed","prevDomains","currDomains","differenceWith","isEqual","generateDiff","updatedData","modifiedData","trackingData","hasUpdates","element","setPathValue","Promise","resolve","method","body","querystring","encode","output_mode","TrackingService","errorUseCases","join","addDelDashboardUrl","size","ErrorWrapper","ErrorView","msg","permissionsNeeded","Comp","hasPermission","UserContextService","props","supportedEnvs","supportsEnv","includes","ServerInfoService","withOSFilter","supportedOS","supportsOS","withExperienceFilter","supportedExperiences","supportsExperience","ExperienceService"],"sourceRoot":""}