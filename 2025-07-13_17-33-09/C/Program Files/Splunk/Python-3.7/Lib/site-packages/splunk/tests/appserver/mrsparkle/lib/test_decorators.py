import unittest
from splunk.appserver.mrsparkle.lib.decorators import _sanitize_field

class TestSanitizeField(unittest.TestCase):
    def test_spaces_are_not_modified(self):
        field = { 'label' : 'My Label' }
        sanitized_field = _sanitize_field(field)
        expected = { 'label' : 'My Label' }
        self.assertEqual(expected, sanitized_field)
    def test_crlf_is_encoded(self):
        field = { 'label': 'foo\n\nonclick=eval(atob("YWxlcnQoJ2V4ZWN1dGVkJyk="))\n\nbar' }
        sanitized_field = _sanitize_field(field)
        expected = { 'label' : 'foo%0A%0Aonclick%3Deval%28atob%28%22YWxlcnQoJ2V4ZWN1dGVkJyk%3D%22%29%29%0A%0Abar' }
        self.assertEqual(expected, sanitized_field)
        # this can expose a CRLF attack
        string_has_new_line = '\n' in sanitized_field
        self.assertFalse(string_has_new_line)
        # this can expose a CRLF attack
        string_has_carriage_return = '\r' in sanitized_field
        self.assertFalse(string_has_carriage_return)

if __name__ == '__main__':
    unittest.main()
