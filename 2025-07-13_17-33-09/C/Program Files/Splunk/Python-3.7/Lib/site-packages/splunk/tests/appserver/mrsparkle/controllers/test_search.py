import unittest
import os
from splunk.appserver.mrsparkle.controllers import search
try:
    from unittest.mock import patch
    from unittest.mock import MagicMock
except ImportError:
    from mock import patch
    from mock import MagicMock
from slim.utils.internal import string

SPLUNK_HOME = string(os.environ['SPLUNK_SOURCE'])
CONTROLLER_PATH = os.path.join(SPLUNK_HOME, 'py', '3', 'splunk', 'tests', 'appserver', 'mrsparkle', 'controllers')       

class TestSearch(unittest.TestCase):
    def setUp(self):
        self.job = search.JobsController()

    def tearDown(self):
        pass

    def test_sanitize_filename(self):
        extensions = [
            'xml',
            'csv',
            'txt',
            'json'
        ]
        sid = "example_sid"
        # test no filename
        for i in range(len(extensions)):
            self.assertEqual(self.job.sanitize_filename(None, sid, extensions[i]), "{}.{}".format(sid, extensions[i]))

        # test generic filename
        filename = 'test'
        for i in range(len(extensions)):
            self.assertEqual(self.job.sanitize_filename(filename, sid, extensions[i]), "{}.{}".format(filename, extensions[i]))

        # test filename with an extension
        filename = 'test.exe'
        for i in range(len(extensions)):
            self.assertEqual(self.job.sanitize_filename(filename, sid, extensions[i]), "{}.{}".format(filename, extensions[i]))
        
        # test sid period character is replaced with an underscore
        sid = "example.sid"
        for i in range(len(extensions)):
            self.assertEqual(self.job.sanitize_filename(None, sid, extensions[i]), 'example_sid.{}'.format(extensions[i]))

if __name__ == '__main__':
    unittest.main()
