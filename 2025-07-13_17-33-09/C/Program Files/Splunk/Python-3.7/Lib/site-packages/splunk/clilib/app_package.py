import os
import tempfile
import tarfile
from io import BytesIO
import json
from contextlib import contextmanager


@contextmanager
def generate_app(
    conf_content,
    app_name,
    app_manifest_content="",
    add_dependency=False,
    num_apps=1,
    prefix="",
    add_abs_path_dir=False
):
    tmp_file_path = tempfile.gettempdir()
    with tempfile.NamedTemporaryFile() as app_file:

        # creating a named temporary file leaves a file handle open to this file.
        # On Windows, this must be closed before continuing, or gzip will fail
        # when it tries to open the file (sharing violation). This is a no-op
        # on other platforms
        app_file.close()  

        confs = [
            {
                "path": "/default/app.conf",
                "content":  conf_content
            }
        ]

        with tarfile.open(app_file.name, "w:gz") as tar:
            # create sub folders for each app
            for i in range(num_apps):
                tmp_app_name = prefix + app_name + str(i)
                if add_abs_path_dir:
                    tmp_app_name = tmp_file_path + "/" + tmp_app_name
                sub_folders = ["%s/default" % (tmp_app_name)]
                print(sub_folders)
                for directory in sub_folders:
                    info = tarfile.TarInfo(directory)
                    info.type = tarfile.DIRTYPE
                    tar.addfile(info)

                # add conf file to tarball
                for conf in confs:
                    data = os.linesep.join(conf["content"])
                    info = tarfile.TarInfo((tmp_app_name) + conf["path"])
                    info.size = len(data)
                    tar.addfile(info)

            if add_dependency:
                # add app.manifest to tarball
                data = json.dumps(app_manifest_content)
                info = tarfile.TarInfo((tmp_app_name) + "app.manifest")
                info.size = len(data)
                tar.addfile(info)

                # add .dependencies directory to tarball
                dep_dir = "%s/.dependencies" % (tmp_app_name)
                info = tarfile.TarInfo(dep_dir)
                info.type = tarfile.DIRTYPE
                tar.addfile(info)

                # add a dummy package inside ./dependencies directory
                info = tarfile.TarInfo((tmp_app_name) + "/.dependencies" + "/DependentApp-1.1.0.tar.gz")
                tar.addfile(info)

        with tarfile.open(app_file.name) as tar:
            for i in tar.getmembers():
                print(i.name)
        yield app_file.name

    if os.path.exists(app_file.name):
        os.remove(app_file.name)



