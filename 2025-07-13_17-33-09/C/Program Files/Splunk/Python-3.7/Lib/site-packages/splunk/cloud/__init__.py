"""
Utilities/etc for running Splunk on various Cloud platforms.
"""
# NOTE: This file is auto-formatted with black

from __future__ import annotations

import enum
import functools
import sys

import requests

from .aws import (
    AWS_EC2_INSTANCE_IDENTITY_QUERY,
    AWS_IMDS_V2_TOKEN_QUERY,
    AwsImdsVersion,
    get_aws_imds_version,
)

assert sys.version_info > (3, 7)


class CloudPlatform(enum.Enum):
    """Cloud platform upon which we are running."""

    AWS = "AWS"
    GCP = "GCP"
    Unknown = "Unknown"


@functools.lru_cache(maxsize=None)  # replace w/ Python 3.9 functools.cache in the future
def get_cloud_platform() -> CloudPlatform:
    """Under which cloud platform are we running?

    Returns:
        CloudPlatform enum, e.g. CloudPlatform.AWS for Amazon Web Services.
    """
    try:
        imds_version = get_aws_imds_version()
        if imds_version == AwsImdsVersion.v1:
            return_code = requests.get(AWS_EC2_INSTANCE_IDENTITY_QUERY).status_code
        elif imds_version == AwsImdsVersion.v2:
            token = requests.put(
                AWS_IMDS_V2_TOKEN_QUERY, headers={"X-aws-ec2-metadata-token-ttl-seconds": "60"}
            ).text
            return_code = requests.get(
                AWS_EC2_INSTANCE_IDENTITY_QUERY, headers={"X-aws-ec2-metadata-token": token}
            ).status_code
    except Exception as ex:
        return CloudPlatform.Unknown

    if return_code == 200:
        return CloudPlatform.AWS
    else:
        try:
            return_code = requests.get(
                "http://metadata/computeMetadata/v1/instance/zone",
                headers={"Metadata-Flavor": "Google"},
            ).status_code
        except Exception as ex:
            return CloudPlatform.Unknown

        if return_code == 200:
            return CloudPlatform.GCP
        else:
            return CloudPlatform.Unknown
