import time

def _get_visibility_settings(telemetry_settings={}):
    """
    Determine which telemetry usage types the Splunk instance is opted in for.

    @type  telemetry_settings: dict
    @param telemetry_settings: Resolved telemetry settings.

    @rtype: list<string>
    @return: The telemetry usage types that the Splunk instance is opted in for.
    """
    visibility = []
    if 'sendAnonymizedUsage' in telemetry_settings and telemetry_settings['sendAnonymizedUsage']:
        visibility.append('anonymous')
    if 'sendSupportUsage' in telemetry_settings and telemetry_settings['sendSupportUsage']:
        visibility.append('support')
    return visibility

def generate_base_telemetry_payload(info, telemetry_settings={}, cherrypy_config={}):
    """
    Generate the base telemetry payload used for any telemetry event.

    @type  info: dict
    @param info: A dictionary containing the type (string) of the event and the
                 data (dict), which contains the additional data to go along with
                 the event.

    @type  telemetry_settings: dict
    @param telemetry_settings: Resolved settings from the telemetry splunkd endpoint.

    @type  cherrypy_config: dict
    @param cherrypy_config: A dict containing cherrypy configurations.

    @rtype: dict
    @return: The base telemetry payload.
    """
    if type(info) is not dict:
        raise Exception('"info" parameter is not a dict')
    if 'type' not in info or 'data' not in info:
        raise Exception('"info" parameter is malformed. Expected a dict with keys "type" and "data".')

    visibility = _get_visibility_settings(telemetry_settings)
    if len(visibility) <= 0:
        raise Exception('Splunk instance has opted-out of telemetry.')

    app = cherrypy_config.get('DEFAULT_NAMESPACE')
    owner = cherrypy_config.get('USERNAME')
    if not app or not owner:
        raise Exception('Failed to get current app/owner.')

    info['data']['splunkVersion'] = cherrypy_config.get('VERSION_LABEL')
    jsonargs = {
        'type': 'event',
        'component': 'cherrypy.{}'.format(info['type']),
        'data': info['data'],
        "timestamp": round(time.time()),
        "visibility": visibility,
        "optInRequired": 3
    }
    return (app, owner, jsonargs)
