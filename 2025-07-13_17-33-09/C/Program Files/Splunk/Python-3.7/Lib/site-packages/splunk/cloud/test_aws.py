"""
Test splunk.cloud.aws
"""

import unittest
from unittest.mock import patch

import requests
from splunk.cloud.aws import (
    AwsEncryption,
    AwsImdsVersion,
    get_aws_imds_version,
    get_ec2_region,
)

from .test_cloud import MockAwsFailedResponse, MockAwsGovCloudResponse, MockAwsResponse


class TestAwsImdsVersion(unittest.TestCase):
    """tests for splunk.cloud.aws.get_aws_imds_version()."""

    def test_aws_imdsv1(self):
        with patch("splunk.clilib.cli_common.getOptConfKeyValue") as conf_lookup:
            conf_lookup.return_value = "v1"

            imds_version = get_aws_imds_version()

        self.assertEqual(imds_version, AwsImdsVersion.v1)

    def test_aws_imdsv2(self):
        with patch("splunk.clilib.cli_common.getOptConfKeyValue") as conf_lookup:
            conf_lookup.return_value = "v2"

            imds_version = get_aws_imds_version()

        self.assertEqual(imds_version, AwsImdsVersion.v2)

    def test_aws_imds_wrong_conf(self):
        with patch("splunk.clilib.cli_common.getOptConfKeyValue") as conf_lookup:
            conf_lookup.return_value = "BUY_SPLK"

            imds_version = get_aws_imds_version()

            self.assertEqual(imds_version, AwsImdsVersion.DEFAULT_VERSION)

        with patch("splunk.clilib.cli_common.getOptConfKeyValue") as conf_lookup:
            conf_lookup.return_value = None

            imds_version = get_aws_imds_version()

            self.assertEqual(imds_version, AwsImdsVersion.DEFAULT_VERSION)


class TestAwsRegion(unittest.TestCase):
    """tests for splunk.cloud.aws.get_ec2_region()."""

    def test_not_aws(self):
        with patch("requests.get") as mock_request:
            mock_request.side_effect = requests.exceptions.ConnectionError

            region = get_ec2_region()

            self.assertIsNone(region)

        with patch("requests.get") as mock_request:
            mock_request.side_effect = MockAwsFailedResponse()

            region = get_ec2_region()

            self.assertIsNone(region)

    def test_us_west_2(self):
        with patch("splunk.cloud.aws.get_aws_imds_version") as mock_get_aws_imds_version, patch(
            "requests.get"
        ) as mock_requests_get:
            mock_get_aws_imds_version.return_value = AwsImdsVersion.v1
            mock_requests_get.return_value = MockAwsResponse()

            region = get_ec2_region()

            self.assertEqual(region, "us-west-2")

        with patch("splunk.cloud.aws.get_aws_imds_version") as mock_get_aws_imds_version, patch(
            "requests.put"
        ) as mock_requests_put, patch("requests.get") as mock_requests_get:
            mock_get_aws_imds_version.return_value = AwsImdsVersion.v2
            # just need something w/ .text property to serve as token
            mock_requests_put.return_value = MockAwsResponse()
            mock_requests_get.return_value = MockAwsResponse()

            region = get_ec2_region()

            self.assertEqual(region, "us-west-2")

    def test_govcloud(self):
        with patch("splunk.cloud.aws.get_aws_imds_version") as mock_get_aws_imds_version, patch(
            "requests.get"
        ) as mock_requests_get:
            mock_get_aws_imds_version.return_value = AwsImdsVersion.v1
            mock_requests_get.return_value = MockAwsGovCloudResponse()

            region = get_ec2_region()

            self.assertEqual(region, "us-gov-west-1")


class TestAwsEncryption(unittest.TestCase):
    def test_aws_encryption(self):
        self.assertEqual(AwsEncryption.NONE, AwsEncryption.from_str("none"))
        self.assertEqual(None, AwsEncryption.from_str(None))
        self.assertEqual(None, AwsEncryption.from_str("awssucks"))
        self.assertEqual(AwsEncryption.SSE_S3, AwsEncryption.from_str("sse-s3"))
        self.assertEqual(AwsEncryption.SSE_KMS, AwsEncryption.from_str("SSE-KMS"))
        self.assertEqual(AwsEncryption.SSE_KMS, AwsEncryption.from_str("SSE-kms"))
        self.assertEqual(AwsEncryption.SSE_KMS, AwsEncryption.from_str("sse-kms"))
        self.assertEqual(AwsEncryption.SSE_C, AwsEncryption.from_str("sse-c"))
        self.assertEqual(AwsEncryption.CSE, AwsEncryption.from_str("cse"))
