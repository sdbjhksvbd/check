"""
Test splunk.cloud
"""

import json
import unittest
from unittest.mock import patch

import requests
import splunk.cloud.aws
from splunk.cloud import CloudPlatform, get_cloud_platform
from splunk.cloud.aws import AwsImdsVersion, get_aws_imds_version, get_ec2_region


class MockRequestsResponse:
    def json(self):
        return json.loads(self.text)


class MockAwsFailedResponse(MockRequestsResponse):
    status_code = 500
    text = ""


class MockGcpResponse(MockRequestsResponse):
    status_code = 200
    text = "projects/00000000000/zones/us-central1-f"


class MockAwsResponse(MockRequestsResponse):
    status_code = 200
    text = '{\n  "accountId" : "000000000000",\n  "architecture" : "x86_64",\n  "availabilityZone" : "us-west-2b",\n  "billingProducts" : null,\n  "devpayProductCodes" : null,\n  "marketplaceProductCodes" : null,\n  "imageId" : "ami-007f3993d500d8525",\n  "instanceId" : "i-0df7c642986a550e4",\n  "instanceType" : "i3.large",\n  "kernelId" : null,\n  "pendingTime" : "2021-06-22T18:56:11Z",\n  "privateIp" : "10.0.0.1",\n  "ramdiskId" : null,\n  "region" : "us-west-2",\n  "version" : "2017-09-30"\n}'


class MockAwsGovCloudResponse(MockRequestsResponse):
    status_code = 200
    text = '{\n  "accountId" : "000000000000",\n  "architecture" : "x86_64",\n  "availabilityZone" : "us-gov-west-1b",\n  "billingProducts" : null,\n  "devpayProductCodes" : null,\n  "marketplaceProductCodes" : null,\n  "imageId" : "ami-0f7b32ef29f88ad7f",\n  "instanceId" : "i-076c4417078abed85",\n  "instanceType" : "c5.2xlarge",\n  "kernelId" : null,\n  "pendingTime" : "2021-06-21T17:42:40Z",\n  "privateIp" : "10.0.0.1",\n  "ramdiskId" : null,\n  "region" : "us-gov-west-1",\n  "version" : "2017-09-30"\n}'


class TestCloudPlatform(unittest.TestCase):
    """tests for splunk.cloud.get_cloud_platform()."""

    def setUp(self):
        # get_cloud_platform caches by default; clear cache before each test
        get_cloud_platform.cache_clear()

    def test_aws_standard(self):
        with patch("splunk.cloud.aws.get_aws_imds_version") as mock_get_aws_imds_version, patch(
            "requests.get"
        ) as mock_request:
            mock_get_aws_imds_version.return_value = AwsImdsVersion.v1
            mock_request.return_value = MockAwsResponse()

            platform = get_cloud_platform()

            self.assertEqual(platform, CloudPlatform.AWS)

        with patch("splunk.cloud.aws.get_aws_imds_version") as mock_get_aws_imds_version, patch(
            "requests.get"
        ) as mock_request:
            mock_get_aws_imds_version.return_value = AwsImdsVersion.v2
            mock_request.return_value = MockAwsResponse()

            platform = get_cloud_platform()

            self.assertEqual(platform, CloudPlatform.AWS)

    def test_aws_govcloud(self):
        with patch("requests.get") as mock_request:
            mock_request.return_value = MockAwsGovCloudResponse()

            platform = get_cloud_platform()

            self.assertEqual(platform, CloudPlatform.AWS)

    def test_not_on_cloud(self):
        with patch("requests.get") as mock_request:
            mock_request.side_effect = requests.exceptions.ConnectionError

            platform = get_cloud_platform()
            self.assertEqual(platform, CloudPlatform.Unknown)

    def test_gcp(self):
        with patch("requests.get") as mock_request:
            mock_request.side_effect = [MockAwsFailedResponse, MockGcpResponse]

            platform = get_cloud_platform()

            self.assertEqual(platform, CloudPlatform.GCP)
