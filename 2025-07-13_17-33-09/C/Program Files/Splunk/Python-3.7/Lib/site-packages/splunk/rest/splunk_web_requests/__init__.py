import cherrypy
import logging
import json
from splunk.rest import simpleRequest, format
from splunk.util import normalizeBoolean

logger = logging.getLogger('splunk.appserver')

def _parse_json_response(data, stanza=None):
    """
    Parses raw JSON data from a splunkd REST request for a specific stanza and sanitize
    the attributes.

    @type  dict
    @param dict: The raw JSON data from a splunkd REST request.

    @type  stanza: string | None
    @param stanza: The stanza within the .conf file which you are trying to fetch. Set as
                   None if you want all entries returned.

    @rtype: dict
    @return: The sanitized attributes for a specific stanza.
    """
    entries = data['entry']
    if stanza:
        find_name_pred = lambda entry: entry['name'] == stanza
        # find entry matching stanza name
        entries = list(filter(find_name_pred, entries))
    # map an entry object to an object of normalized attributes
    def normalize_attributes_pred(entry):
        normalized_attributes = { key: normalizeBoolean(value) for key, value in entry['content'].items() }
        normalized_attributes['name'] = entry['name']
        return normalized_attributes
    normalized_entries = list(map(normalize_attributes_pred, entries))
    # return dict if targetting specific stanza, otherwise return array
    return normalized_entries[0] if len(normalized_entries) == 1 and stanza else normalized_entries

def _make_get_request(url, session_key):
    """
    Makes a GET request to a splunk endpoint.

    @type  url: string
    @param url: The splunkd URL for the .conf file which you are trying to fetch.

    @type  session_key: string
    @param session_key: A key which is used to authenticate REST requests.

    @rtype: tuple (Class<Response>, dict)
    @return: A response object and a dictionary which contains raw resolved data.
    """
    return simpleRequest(
        path=url,
        sessionKey=session_key,
        raiseAllErrors=True
    )

def _get_settings(url, stanza=None, failure_message='Failed to get setting', session_key=None, cache_key=None):
    """
    A generic function which gets and normalizes settings associated with a specific .conf file.

    @type  url: string
    @param url: The splunkd URL for the .conf file which you are trying to fetch.
                The URL must request a JSON response to parse properly (ie. 'output_mode=json').

    @type  stanza: string | None
    @param stanza: The stanza within the .conf file which you are trying to fetch. Set as
                   None if you want all entries returned.

    @type  failure_message: string
    @param failure_message: The message you would like to log in the case of failure.

    @type  session_key: string
    @param session_key: A key which is used to authenticate REST requests.

    @type  cache_key: string
    @param cache_key: If you would like to cache requests to the endpoint until the
                      next Splunk restart, the cache key will store resolved data in
                      the CherryPy config.

    @rtype: list | dict | None
    @return: The resolved settings. A dict if a valid stanza was specified. A list
             if no stanza was specified or an empty list if no stanza was found. None
             is returned if the request failed.
    """
    if cache_key:
        cached_settings = cherrypy.config.get(cache_key)
        if cached_settings:
            return cached_settings
    if 'output_mode=json' not in url:
        raise Exception('url "{}" must request json output.'.format(url))
    try:
        _session_key = session_key or cherrypy.session.get('sessionKey')
        (response, data) = _make_get_request(url, _session_key)
        if response.status == 200:
            normalized_response = _parse_json_response(json.loads(data), stanza)
            if cache_key:
                cherrypy.config.update({ cache_key: normalized_response })
            return normalized_response
        else:
            logger.warn('{}: [HTTP {}]'.format(failure_message, response.status))
    except Exception as e:
        logger.warn('{}: {}'.format(failure_message, str(e)))
    return None

def _get_web_feature(session_key, feature_name, failure_message, cache_key=None):
    url = '/servicesNS/nobody/system/web-features/{}?output_mode=json'.format(feature_name)
    return _get_settings(url, feature_name, failure_message, session_key, cache_key)

def get_quarantine_files_settings(session_key=None):
    return _get_web_feature(session_key, 'feature:quarantine_files', 'Failed to get quarantine files settings')

def get_dashboards_csp_settings(session_key=None):
    return _get_web_feature(session_key, 'feature:dashboards_csp', 'Failed to get dashboards csp settings')

def get_highcharts_accessibility_settings(session_key=None):
    return _get_web_feature(session_key, 'feature:highcharts_accessibility', 'Failed to get highcharts accessibility settings')

def get_manager_xml_pages_settings(session_key=None):
    return _get_web_feature(session_key, 'feature:manager_xml_pages', 'Failed to get Manager XML pages settings')

def get_telemetry_settings(session_key=None):
    """
    Tries to get telemetry settings. This info will only be available if the splunk_instrumentation app is installed.

    @type  session_key: string
    @param session_key: A key which is used to authenticate REST requests.

    @rtype: dict
    @return: The resolved telemetry settings.
    """
    url = '/servicesNS/nobody/splunk_instrumentation/telemetry/general?output_mode=json'
    return _get_settings(url, 'general', 'Failed to get telemetry settings', session_key)

def get_page_migration_settings(session_key=None):
    return _get_web_feature(session_key, 'feature:page_migration',
                                        'Failed to get page migration settings with status code {}', 'page_migration')

def get_dashboard_studio_settings(session_key=None):
    return _get_web_feature(session_key, 'feature:dashboard_studio', 'Failed to get dashboard settings')

def is_v2_search_enabled(session_key=None):
    search_v2_settings = None
    enableSearchV2Endpoint = True
    try:
        search_v2_settings = _get_web_feature(session_key, 'feature:search_v2_endpoint', 'Failed to get search v2 feature settings')
        enableSearchV2Endpoint = search_v2_settings["enable_search_v2_endpoint"]
    except Exception as e:
        logger.exception('Exception in is_v2_search_enabled while fetching search_v2_settings = %s' % (search_v2_settings))
        logger.exception(e)
        return True
    return enableSearchV2Endpoint

def get_splunk_web_optimizations_settings(session_key=None):
    return _get_web_feature(session_key, 'feature:splunk_web_optimizations', 'Failed to get splunk web optimizations settings')
