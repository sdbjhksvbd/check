import logging
import json
import cherrypy
import splunk.appserver.mrsparkle.lib.config as config
from splunk.rest import simpleRequest, format
from splunk.rest.splunk_web_requests import get_telemetry_settings
from splunk.telemetry_utils import generate_base_telemetry_payload

logger = logging.getLogger('splunk.appserver')

def post_telemetry_metric(info, session_key=None):
    """
    FOR INTERNAL SPLUNK USE ONLY.

    Tries to send a telemetry event to Splunk's servers.

    @type  info: dict
    @param info: A dictionary containing the type (string) of the event and the
                 data (dict), which contains the additional data to go along with
                 the event.

    @type  session_key: string
    @param session_key: A key which is used to authenticate REST requests.

    @rtype: None
    """
    _session_key = session_key or cherrypy.session.get('sessionKey')
    try:
        telemetry_settings = get_telemetry_settings()
        if not telemetry_settings:
            raise Exception('Failed to get telemetry settings.')
        cherrypy_config = config.getConfig(sessionKey=_session_key)
        (app, owner, jsonargs) = generate_base_telemetry_payload(info, telemetry_settings, cherrypy_config)
    except Exception as e:
        logger.warn(str(e))
        return
    try:
        (response, data) = simpleRequest(
            path='/servicesNS/{}/{}/telemetry-metric'.format(owner, app),
            sessionKey=_session_key,
            method='POST',
            jsonargs=json.dumps(jsonargs)
        )
    except Exception as e:
        logger.warn('Failed to send telemetry event: {}'.format(str(e)))
