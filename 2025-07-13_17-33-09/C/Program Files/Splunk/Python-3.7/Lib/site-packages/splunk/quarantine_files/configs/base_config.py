import abc

ABC = abc.ABCMeta('ABC', (object,), {'__slots__': ()})

class Config(ABC):
    """
    Base Config class to quarantine files.

    --- REQUIRED PROPERTIES ---

    @type  setting: string
    @property setting: The name of the configuration setting.

    @type  should_restrict: bool
    @property should_restrict: Whether or not the files specified by the configuration
                            should be restricted (typically read from a .conf setting).

    @type  restricted_files_are_insecure: bool
    @property restricted_files_are_insecure: Whether or not the files specified by the configuration
                            are considered insecure.
    """
    def __init__(self, restricted_files_are_insecure):
        self.restricted_files_are_insecure = restricted_files_are_insecure

    @abc.abstractmethod
    def get_paths_to_restrict(self, base_path): raise NotImplementedError
    """
    Generate a list of files which should be restricted. The output can not contain
    folders. This should be a performant function that runs in <1s. ie. There should
    not be a conditional relying on file contents to determine whether a file should
    be restricted.

    @type  base_path: string
    @param base_path: The base source path where files currently are. Files will either
                      be in $SPLUNK_HOME/ or $SPLUNK_HOME/quarantined_files
                      depending on the current restricted status. Use this base path
                      as the root in constructing relative paths for files to move.

    @rtype: list[string]
    @return: A list of absolute file paths which should be moved.
    """
