from splunk.appserver.mrsparkle.lib.util import splunk_to_cherry_cfg
import unittest

try:
    from unittest.mock import MagicMock, patch
except ImportError:
    from mock import MagicMock, patch
class SplunkToCherryCfg(unittest.TestCase):
    @patch('splunk.clilib.cli_common.confSettings', {"web": {
        "settings": {
            "embed_uri": "https://foobar.com/<script>alert('attack')</script>",
        }
    }}) 
    def test_embed_uri_domains_extracted(self):
        cfg = splunk_to_cherry_cfg("web", "settings");
        self.assertEqual(cfg, {'embed_uri': 'https://foobar.com'}, 
                         'embed_uri value will have domain extracted')
        
    @patch('splunk.clilib.cli_common.confSettings', {"web": {
        "settings": {
            "embed_uri": "https://foobar.com/pop.js",
        }
    }}) 
    def test_embed_uri_domains_extracted_relative_js_removed(self):
        cfg = splunk_to_cherry_cfg("web", "settings");
        self.assertEqual(cfg, {'embed_uri': 'https://foobar.com'}, 
                         'embed_uri value will have domain extracted and js files path removed')
    
    @patch('splunk.clilib.cli_common.confSettings', {"web": {
        "settings": {
            "embed_uri": "https://foobar.com/attack/malicious.js",
        }
    }}) 
    def test_embed_uri_domains_extracted_nested_relative_js_removed(self):
        cfg = splunk_to_cherry_cfg("web", "settings");
        self.assertEqual(cfg, {'embed_uri': 'https://foobar.com'}, 
                         'embed_uri value will have domain extracted and nested js files path removed')

    @patch('splunk.clilib.cli_common.confSettings', {"web": {
        "settings": {
            "embed_uri": "someerror",
        }
    }}) 
    def test_embed_uri_domains_extracted_exception(self):
        cfg = splunk_to_cherry_cfg("web", "settings")
        self.assertEqual(cfg, {'embed_uri': ''}, 
                        'Values will be set to empty is exception occurs')
        
    @patch('splunk.clilib.cli_common.confSettings', {"web": {
        "settings": {
            "embed_uri": "",
        }
    }}) 
    def test_embed_uri_domains_extracted_exception_empty_value(self):
        cfg = splunk_to_cherry_cfg("web", "settings")
        self.assertEqual(cfg, {'embed_uri': ''}, 
                        'Values will be set to empty is exception occurs')
        
    @patch('splunk.clilib.cli_common.confSettings', {"web": {
        "settings": {
            "embed_uri": None,
        }
    }}) 
    def test_embed_uri_domains_extracted_exception_none_value(self):
        cfg = splunk_to_cherry_cfg("web", "settings")
        self.assertEqual(cfg, {'embed_uri': ''}, 
                        'Values will be set to empty is exception occurs')

        

if __name__ == '__main__':
    # run tests
    suite = unittest.TestLoader().loadTestsFromTestCase(SplunkToCherryCfg)
    unittest.TextTestRunner(verbosity=2).run(suite)
