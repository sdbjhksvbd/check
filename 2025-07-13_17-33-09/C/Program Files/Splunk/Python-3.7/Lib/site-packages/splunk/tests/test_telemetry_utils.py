import unittest
from splunk.telemetry_utils import _get_visibility_settings, generate_base_telemetry_payload

try:
    from unittest.mock import patch
    from unittest.mock import MagicMock
except ImportError:
    from mock import patch
    from mock import MagicMock

class TestGetVisibilitySettings(unittest.TestCase):
    def test_no_args_returns_empty_array(self):
        visibility = _get_visibility_settings()
        self.assertEqual(len(visibility), 0)
    def test_anonymized_usage(self):
        visibility = _get_visibility_settings({ 'sendAnonymizedUsage': True })
        self.assertEqual(len(visibility), 1)
        self.assertEqual(visibility[0], 'anonymous')
    def test_support_usage(self):
        visibility = _get_visibility_settings({ 'sendSupportUsage': True })
        self.assertEqual(len(visibility), 1)
        self.assertEqual(visibility[0], 'support')

class TestGenerateBaseTelemetryPayload(unittest.TestCase):
    def test_incorrect_info_type(self):
        try:
            generate_base_telemetry_payload('invalid')
            self.assertFalse(True) # should never get here
        except Exception as e:
            self.assertEqual(str(e), '"info" parameter is not a dict')
    def test_no_type_in_info(self):
        try:
            generate_base_telemetry_payload({ 'data': {} })
            self.assertFalse(True) # should never get here
        except Exception as e:
            self.assertEqual(str(e), '"info" parameter is malformed. Expected a dict with keys "type" and "data".')
    def test_no_data_in_info(self):
        try:
            generate_base_telemetry_payload({ 'type': 'foo' })
            self.assertFalse(True) # should never get here
        except Exception as e:
            self.assertEqual(str(e), '"info" parameter is malformed. Expected a dict with keys "type" and "data".')
    def test_opted_out_of_telemetry(self):
        try:
            telemetry_settings = { 'sendAnonymizedUsage': False }
            generate_base_telemetry_payload({ 'type': 'foo', 'data': {} }, telemetry_settings)
            self.assertFalse(True) # should never get here
        except Exception as e:
            self.assertEqual(str(e), 'Splunk instance has opted-out of telemetry.')
    def test_failed_to_get_app_and_owner(self):
        try:
            telemetry_settings = { 'sendAnonymizedUsage': True }
            generate_base_telemetry_payload({ 'type': 'foo', 'data': {} }, telemetry_settings)
            self.assertFalse(True) # should never get here
        except Exception as e:
            self.assertEqual(str(e), 'Failed to get current app/owner.')
    @patch('time.time', MagicMock(return_value=1))
    def test_valid_telemetry_payload(self):
        cherrypy_config = { 'DEFAULT_NAMESPACE': 'foo_app', 'USERNAME': 'foo_user' }
        telemetry_settings = { 'sendAnonymizedUsage': True }
        (app, owner, jsonargs) = generate_base_telemetry_payload({ 'type': 'foo', 'data': {} }, telemetry_settings, cherrypy_config)
        self.assertEqual(app, 'foo_app')
        self.assertEqual(owner, 'foo_user')
        self.assertEqual(jsonargs, {
            'component': 'cherrypy.foo',
            'data': {'splunkVersion': None},
            'optInRequired': 3,
            'timestamp': 1,
            'type': 'event',
            'visibility': ['anonymous']
        })

if __name__ == '__main__':
    unittest.main()
