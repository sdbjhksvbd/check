"use strict";(self["webpackJsonp-dc-desktop-app"]=self["webpackJsonp-dc-desktop-app"]||[]).push([[692],{wRgL:(t,e,s)=>{s.r(e),s.d(e,{default:()=>NetworkProvider});var r,i=s("plsW");!function(t){t[t.SUCCESS=0]="SUCCESS",t[t.ERROR=1]="ERROR",t[t.FETCHING=2]="FETCHING",t[t.IDLE=3]="IDLE"}(r||(r={}));class NetworkCall{get status(){return this.mStatus}get responseData(){return this.mResponseData}get errorData(){return this.mErrorData}get numSubscribers(){return this.mObservers.length}get isRetrying(){return null!==this.mRetryInfo.timerID}constructor(t,e,s,i){this.mResponseData={},this.mErrorData={},this.mRequest={},this.mObservers=[],this.mOptions={retries:3},this.mLastSuccessTimestamp=0,this.mRetryInfo={retryIndex:0,timerID:null},this.mIsFetching=!1,this.mStatus=r.IDLE,this.Retry=this.Retry.bind(this),i&&(this.mOptions=Object.assign(Object.assign({},this.mOptions),i)),this.mFullUrl=NetworkCall.CreateFullUrl(t,e),s&&(this.mRequest=s)}Subscribe(t){this.mObservers.includes(t)||this.mObservers.push(t)}Unsubscribe(t){this.mObservers=this.mObservers.filter((e=>e!==t))}NotifyStatusChange(t){this.mObservers.forEach((e=>e.onStatusChange(t)))}NotifyResponse(t){this.mObservers.forEach((e=>e.onResponse(t)))}NotifyError(t){this.mObservers.forEach((e=>e.onError(t)))}static CreateFullUrl(t,e){if(!e)return t;const s=new URL(t);return Object.entries(e).forEach((t=>{s.searchParams.set(t[0],t[1].toString())})),s.searchParams.sort(),s.toString()}async MakeFetchCall(){let t,e;this.mIsFetching=!0;try{t=await fetch(this.mFullUrl,this.mRequest)}catch(e){t=e}this.mResponseHeaders=null==t?void 0:t.headers,this.mResponseStatusCode=null==t?void 0:t.status;try{e=await t.json()}catch(t){e=t}t.ok?this.HandleSuccess(e):this.HandleError(e),this.mIsFetching=!1}HandleSuccess(t){var e;this.mLastSuccessTimestamp=Date.now(),this.mStatus=r.SUCCESS,this.mResponseData=t,(null===(e=this.mOptions)||void 0===e?void 0:e.wantsHeaders)?this.NotifyResponse({body:this.mResponseData,headers:this.mResponseHeaders,status:this.mResponseStatusCode}):this.NotifyResponse(this.mResponseData),this.NotifyStatusChange(this.mStatus),this.mRetryInfo.retryIndex=0,this.ClearRetryTimer()}HandleError(t){var e;if(this.mRetryInfo.retryIndex<this.mOptions.retries){this.mRetryInfo.retryIndex+=1,this.ClearRetryTimer();const t=this.CalcRetryInterval(this.mRetryInfo.retryIndex);this.mRetryInfo.timerID=setTimeout(this.Retry,t)}else this.mStatus=r.ERROR,this.mErrorData=t,(null===(e=this.mOptions)||void 0===e?void 0:e.wantsHeaders)?this.NotifyError({body:this.mErrorData,headers:this.mResponseHeaders,status:this.mResponseStatusCode}):this.NotifyError(this.mErrorData),this.NotifyStatusChange(this.mStatus)}Retry(){this.mRetryInfo.timerID=null,this.MakeFetchCall()}ClearRetryTimer(){null!==this.mRetryInfo.timerID&&(clearTimeout(this.mRetryInfo.timerID),this.mRetryInfo.timerID=null)}CalcRetryInterval(t){const e=2**(t-1);return Math.min(1e3*e,3e4)}}class NetworkQuery extends NetworkCall{get options(){return this.mOptions}constructor(t,e,s,r){s||(s={}),s.method="GET",super(t,e,s,r=r?Object.assign(Object.assign({},NetworkQuery.sDefaultOptions),r):NetworkQuery.sDefaultOptions),r&&r.refreshInterval&&setInterval(this.RefreshAtInterval.bind(this),r.refreshInterval)}RefreshAtInterval(){this.mIsFetching||this.isRetrying||this.MakeFetchCall()}Refresh(){if(this.mIsFetching)return;const t=0!==this.mLastSuccessTimestamp,e=this.mLastSuccessTimestamp+this.options.staleTime<Date.now();t&&!e||(this.ClearRetryTimer(),void 0!==this.mResponseData&&0!==Object.keys(this.mResponseData).length||(this.mStatus=r.FETCHING,this.NotifyStatusChange(this.mStatus)),this.MakeFetchCall())}}NetworkQuery.sDefaultOptions={staleTime:0,retries:3};class NetworkMutation extends NetworkCall{constructor(t,e,s,r){s?s.method||(s.method="POST"):s={method:"POST"},super(t,e,s,r)}Mutate(t){this.mIsFetching||(this.mRequest.body=JSON.stringify(t),this.ClearRetryTimer(),this.mStatus=r.FETCHING,this.NotifyStatusChange(this.mStatus),this.MakeFetchCall())}MutateStr(t){this.mIsFetching||(this.mRequest.body=t,this.ClearRetryTimer(),this.mStatus=r.FETCHING,this.NotifyStatusChange(this.mStatus),this.MakeFetchCall())}}const a=new class NetworkCallDirectory{constructor(){this.mDirectory={}}get length(){return Object.keys(this.mDirectory).length}Has(t){return t in this.mDirectory}Get(t){return t in this.mDirectory?this.mDirectory[t]:null}Add(t,e){this.mDirectory[e]=t}Remove(t){delete this.mDirectory[t]}RemoveCall(t){let e=null;Object.entries(this.mDirectory).every((s=>s[1]!==t||(e=s[0],!1))),e&&delete this.mDirectory[e]}CreateHash(t,e,s){const r={url:NetworkCall.CreateFullUrl(t,e)};return s&&(r.request=s),JSON.stringify(r,((t,e)=>"object"!=typeof e?e:Object.keys(e).sort().reduce(((t,s)=>(t[s]=e[s],t)),{})))}};class NetworkProvider{ready(){return Promise.resolve(this)}GetNetworkQuery(t,e,s,r){const i=a.CreateHash(t,e,s);let o=a.Get(i);return o||(a.Add(new NetworkQuery(t,e,s,r),i),o=a.Get(i)),o}GetNetworkMutation(t,e,s,r){const i=a.CreateHash(t,e,s);let o=a.Get(i);return o||(a.Add(new NetworkMutation(t,e,s,r),i),o=a.Get(i)),o}}NetworkProvider.getInstance=i.providerUtil.getSingletonFunction(NetworkProvider)}}]);
//# sourceMappingURL=private/network-api.75f2d16344b0226d6f01.map