"use strict";(self["webpackJsonp-desktop-app"]=self["webpackJsonp-desktop-app"]||[]).push([[6091],{wt7i:(e,t,i)=>{i.d(t,{A:()=>s});var n=i("plsW"),__awaiter=function(e,t,i,n){return new(i||(i=Promise))((function(s,o){function fulfilled(e){try{step(n.next(e))}catch(e){o(e)}}function rejected(e){try{step(n.throw(e))}catch(e){o(e)}}function step(e){e.done?s(e.value):function adopt(e){return e instanceof i?e:new i((function(t){t(e)}))}(e.value).then(fulfilled,rejected)}step((n=n.apply(e,t||[])).next())}))};const s=class HomeNativeAPI{static get Instance(){return this.instance||(this.instance=new this),this.instance}getHomeNativeAPI(){return __awaiter(this,void 0,void 0,(function*(){if(!this.homeNativeAPI&&n.providers["native-api"]){const e=yield n.providers["native-api"]();this.homeNativeAPI=yield null==e?void 0:e.HomeAPI()}return this.homeNativeAPI}))}getHomeAPIObject(){return __awaiter(this,void 0,void 0,(function*(){if(!this.homeApiObj){const e=yield this.getHomeNativeAPI();this.homeApiObj=null==e?void 0:e.getHomeAPIObject()}return this.homeApiObj}))}listenForCustomEvent(e,t){return __awaiter(this,void 0,void 0,(function*(){const i=yield this.getHomeNativeAPI();null==i||i.addEventCallback(e,t)}))}unListenForCustomEvent(e,t){return __awaiter(this,void 0,void 0,(function*(){const i=yield this.getHomeNativeAPI();null==i||i.removeEventCallback(e,t)}))}}.Instance},T2AP:(e,t,i)=>{i.d(t,{A:()=>a});var n=i("bV+/"),s=i("wt7i"),o=i("oYND"),r=i("UQd+"),l=i("plsW"),__awaiter=function(e,t,i,n){return new(i||(i=Promise))((function(s,o){function fulfilled(e){try{step(n.next(e))}catch(e){o(e)}}function rejected(e){try{step(n.throw(e))}catch(e){o(e)}}function step(e){e.done?s(e.value):function adopt(e){return e instanceof i?e:new i((function(t){t(e)}))}(e.value).then(fulfilled,rejected)}step((n=n.apply(e,t||[])).next())}))};class KWThumbnailController{constructor(){this.thumbnailCache=new Map,this.listeners=new Set,this.pendingRequests=new Map,this.requestQueue=[],this.isProcessingQueue=!1,this.nativeEventPromises=new Map,this.retryCountMap=new Map,this.requestDetailsMap=new Map;const e=o.A.KWC_THUMBNAIL_UPDATE_NOTIF;try{const t=this.handleThumbnailUpdate.bind(this);try{s.A.listenForCustomEvent(e,t)}catch(e){console.log("[KWThumbnailController] Failed to register event listener with homeAPIProvider:",e)}(()=>{__awaiter(this,void 0,void 0,(function*(){var i,n,s,o,r;try{let a;try{a=l.providers["contextboard-api"]()}catch(e){console.log("[KWThumbnailController] Failed to get contextboardAPIProvider from providers:",e)}if(a)(null==a?void 0:a.listenForCustomEvent)?a.listenForCustomEvent(e,t):(null==a?void 0:a.addEventCallback)&&a.addEventCallback(e,t);else try{const a=yield l.providers["native-api"]();if(null==a?void 0:a.readerContextModel){const l=null===(n=null===(i=a.readerContextModel)||void 0===i?void 0:i.get("rna"))||void 0===n?void 0:n.get("contextBoardAPI");(null==l?void 0:l.addEventListener)&&l.addEventListener(e,t);const h=null===(r=null===(o=null===(s=a.readerContextModel)||void 0===s?void 0:s.get("rna"))||void 0===o?void 0:o.get("rnaAPI"))||void 0===r?void 0:r.get("kwcAPI");(null==h?void 0:h.addEventListener)?(h.addEventListener(e,t),console.log("[KWThumbnailController] Successfully registered KWCAPI event listener")):console.log("[KWThumbnailController] KWCAPI addEventListener not available")}}catch(e){console.log("[KWThumbnailController] Failed to get nativeAPIProvider:",e)}}catch(e){console.log("[KWThumbnailController] Failed to register event listener with contextboardAPIProvider:",e)}}))})()}catch(e){console.log("[KWThumbnailController] Failed to initialize:",e)}}static getInstance(){return KWThumbnailController.instance||(KWThumbnailController.instance=new KWThumbnailController),KWThumbnailController.instance}addUpdateListener(e){this.listeners.add(e)}removeUpdateListener(e){this.listeners.delete(e)}notifyListeners(e){this.listeners.forEach((t=>t(e)))}cleanupOldUrls(e){const t=this.thumbnailCache.get(e);t&&(URL.revokeObjectURL(t),this.thumbnailCache.delete(e))}createNativeEventPromise(e){let t;const i=new Promise((e=>{t=e}));return this.nativeEventPromises.set(e,{resolve:t,promise:i}),i}processQueue(){return __awaiter(this,void 0,void 0,(function*(){if(!this.isProcessingQueue){this.isProcessingQueue=!0;try{yield this.processNextRequest()}finally{this.isProcessingQueue=!1}}}))}processNextRequest(){return __awaiter(this,void 0,void 0,(function*(){if(0===this.requestQueue.length)return;const e=this.requestQueue.shift(),{assetId:t,renditionAssetId:i,renditionAssetUrl:n,fetchFromSAM:s,sizeToBeFetched:o}=e;if(this.requestDetailsMap.set(i,e),!this.pendingRequests.has(i)&&!this.thumbnailCache.has(i)){const e=this.createNativeEventPromise(i),r=this.fetchThumbnail(t,i,n,s,o);this.pendingRequests.set(i,r);try{yield Promise.race([Promise.all([r,e]),new Promise(((e,t)=>setTimeout((()=>t(new Error("Thumbnail request timeout"))),5e3)))])}catch(e){console.log(`Error processing ${i}:`,e)}finally{this.pendingRequests.delete(i),this.nativeEventPromises.delete(i),this.requestDetailsMap.delete(i)}yield new Promise((e=>setTimeout(e,100)))}yield this.processNextRequest()}))}fetchThumbnail(e,t,i,s,o){return __awaiter(this,void 0,void 0,(function*(){try{yield(0,n._f)(e,t,i,s,o)}catch(e){console.log(`Failed to request thumbnail for ${t}:`,e);const i=this.nativeEventPromises.get(t);i&&i.resolve()}}))}handleThumbnailUpdate(e){var t;return __awaiter(this,void 0,void 0,(function*(){const{url:i,rendition_asset_id:s}=(null===(t=null==e?void 0:e.detail)||void 0===t?void 0:t.params)||{};if(!i||!s)return void console.log("[KWThumbnailController] Invalid thumbnail update event:",{url:i,rendition_asset_id:s});const o=this.retryCountMap.get(s)||0;try{this.cleanupOldUrls(s);const e=yield r.A.fetchBinaryBlob(i);if(!e||0===e.size)throw new Error(`Empty blob received for ${s}`);const t=URL.createObjectURL(e);this.thumbnailCache.set(s,t),this.retryCountMap.delete(s),this.requestDetailsMap.delete(s);const n=this.nativeEventPromises.get(s);n&&n.resolve(),this.notifyListeners(s)}catch(e){if(console.log(`[KWThumbnailController] Error processing thumbnail update (attempt ${o+1}/4):`,e),o<3){const e=this.requestDetailsMap.get(s);if(e)try{this.retryCountMap.set(s,o+1),yield(0,n._f)(e.assetId,s,e.renditionAssetUrl,e.fetchFromSAM,e.sizeToBeFetched)}catch(e){console.log("[KWThumbnailController] Failed to retry thumbnail fetch:",e)}}else this.retryCountMap.delete(s),this.requestDetailsMap.delete(s);this.notifyListeners(s)}}))}getKWCThumbnail(e,t){let i=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",n=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:512;e&&t&&(this.pendingRequests.has(t)||this.thumbnailCache.has(t)?this.thumbnailCache.has(t)&&this.notifyListeners(t):(this.requestQueue.push({assetId:e,renditionAssetId:t,renditionAssetUrl:i,fetchFromSAM:n,sizeToBeFetched:s}),this.processQueue()))}getThumbnailUrl(e){return this.thumbnailCache.get(e)}cleanup(){this.thumbnailCache.forEach((e=>{URL.revokeObjectURL(e)})),this.thumbnailCache.clear(),this.listeners.clear(),this.pendingRequests.clear(),this.requestQueue.length=0,this.nativeEventPromises.clear(),this.retryCountMap.clear(),this.requestDetailsMap.clear()}}const a=KWThumbnailController.getInstance()}}]);